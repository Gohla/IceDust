module types-references-attributes-direct

language IceDust

fixture [[
  module test
  [[...]]
]]


test type of ref attribute (Identifier) [[
  model
  entity X{
    i : Int = [[i]]
  }
]] run get-type on #1 to Int()

test type of ref this.attribute [[
  model
  entity X{
    i : Int = [[this.i]]
  }
]] run get-type on #1 to Int()

test type of ref entity.attribute [[
  model
  entity X{
    i : Int = [[x.i]] (default)
  }
  
  data
  x : X {
    i=3
  }
]] run get-type on #1 to Int()

test type of ref role.attribute [[
  model
  entity Node{
    i : Int = [[this.in.out.i]]
  }
  relation Edge{
    Node.in 1  -> in
    Node.out 1 -> out
    in.a <-> out.b
  }
]] run get-type on #1 to Int()


test multiplicity of ref attribute (Identifier) One [[
  model
  entity X{
    i : Int = [[i]]
  }
]] run get-multiplicity on #1 to One()

test multiplicity of ref attribute (Identifier) ZeroOrOne [[
  model
  entity X{
    i : Int ? = [[i]]
  }
]] run get-multiplicity on #1 to ZeroOrOne()

test multiplicity of ref this.attribute One [[
  model
  entity X{
    i : Int = [[this.i]]
  }
]] run get-multiplicity on #1 to One()

test multiplicity of ref this.attribute ZeroOrOne [[
  model
  entity X{
    i : Int ? = [[this.i]]
  }
]] run get-multiplicity on #1 to ZeroOrOne()

test multiplicity of ref entity.attribute One [[
  model
  entity X{
    i : Int = [[x.i]] (default)
  }
  
  data
  x : X {
    i=3
  }
]] run get-multiplicity on #1 to One()

test multiplicity of ref entity.attribute ZeroOrOne [[
  model
  entity X{
    i : Int ? = [[x.i]]
  }
  
  data
  x : X {}
]] run get-multiplicity on #1 to ZeroOrOne()

test ordering of ref entity.attribute Ordered [[
  model
  entity X{
    i : Int ? = [[x.i]]
  }
  
  data
  x : X {}
]] run get-ordering on #1 to Ordered()
