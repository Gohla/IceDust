module generating/java/model

imports // constructors

  api/constructors
  desugaring/constructors
  java/Java
  signatures/Model-sig
  signatures/Modules-sig

imports // functions

  analysis2/path
  api/_runtime
  api/model-names-api
  generating/_ir/model
  generating/java/expressions
  generating/java/types
  lib/lists-tuples
  lib/traverse
  names/naming/names
  naming/_notNaBL

rules

  model-entityname-to-java-typedec(err): x_entityName -> result
    where
      is-entityname
    with
      membersJava*      := <entityname-get-arrinames     ;fmap(model-membername-to-java-classbodydecs(err)       )>x_entityName;
      shortcutsJava*    := <entityname-get-shortcutnames ;fmap(model-shortcutname-to-java-classbodydecs(err)     )>x_entityName;
      initCachesJava*   := <entityname-get-arrinames     ;fmap(model-init-name-to-java-stms(err)                 )>x_entityName
    with
      result := type-dec |[
        class x_entityName
        {
          public x_entityName()
          {
            ~initCachesJava*
          }
          ~membersJava*
          ~shortcutsJava*
        }
      ]|

rules

  model-membername-to-java-classbodydecs(err): x_name -> result
    where
      is-attributename <+ is-relationname <+ is-rolename <+ is-inversename
    with
      x_entityName       := <attributename-get-entityname>x_name;
      x_moduleName       := <entityname-get-modulename>x_entityName;
      qualifiedName-exp  := Lit(String([Chars($[[x_entityName].[x_name]])]));
      x_type             := <get-type2;type-to-string-java>x_name;
      multType           := <name-to-java-type(err)>x_name;
      x_get              := <name-get>x_name;
      x_set              := <name-set>x_name;
      x_add              := <name-add>x_name;
      x_remove           := <name-remove>x_name;
      x_calculate        := <name-calculate>x_name;
      x_getCalculated    := <name-getCalculated>x_name;
      x_cache            := <name-cache>x_name;
      x_updateCache      := <name-update-cache>x_name;
      x_dirty            := <name-dirty>x_name;
      x_updateAllCache   := <name-updateallcache>x_name;
      x_hasDirty         := <name-hasdirty>x_name;
      x_flagDirty        := <name-flagdirty>x_name;
      x_dirtyFlagFlows   := <name-dirtyflagflowsto>x_name;
      x_setIncr          := <name-set-incremental>x_name;
      x_addIncr          := <name-add-incremental>x_name;
      x_removeIncr       := <name-remove-incremental>x_name;
      x_setCacheIncr     := <name-set-cache-incr>x_name;
      x_addCacheIncr     := <name-add-cache-incr>x_name;
      x_removeCacheIncr  := <name-remove-cache-incr>x_name;
      x_setCache         := <name-set-cache>x_name;
      x_addCache         := <name-add-cache>x_name;
      x_removeCache      := <name-remove-cache>x_name
    with
      if name-is-bidirectional then
        x_inverseName            := <name-get-inversename>x_name;
        x_inverseType            := <get-type2;type-to-string-java>x_inverseName;
        x_inverseCache           := <name-cache>x_inverseName;
        x_inverseSetIncr         := <name-set-incremental>x_inverseName;
        x_inverseAddIncr         := <name-add-incremental>x_inverseName;
        x_inverseRemoveIncr      := <name-remove-incremental>x_inverseName;
        x_inverseSetCacheIncr    := <name-set-cache-incr>x_inverseName;
        x_inverseAddCacheIncr    := <name-add-cache-incr>x_inverseName;
        x_inverseRemoveCacheIncr := <name-remove-cache-incr>x_inverseName
      end
    with
      if name-has-expr then
        (calculate-stms*, calculate-exp) := <name-get-expr;exp-to-java-stm(err|0)>x_name
      end
    with
      if name-is-calconwrite then
        flowsto-stms* := <name-get-flowsto-pathexprs;filter(where(pathexpr-last;name-is-incremental));map(model-pathexpr-to-java-stm(err))>x_name
      end
    with // Recalculate layer
      switch id
        case name-is-incremental; name-is-default-derived:
          result-updateCache* := class-body-dec* |[
            protected void x_updateCache()
            {
              x_setCache(x_calculate());
            }
            public static boolean x_hasDirty()
            {
              return !x_dirty.isEmpty();
            }
            public static void x_updateAllCache(){
              Collection<x_entityName> ens = x_dirty;
              x_dirty = new HashSet<x_entityName>();
              if (ens.size() > 0) {
                System.out.println("Updating " + ~qualifiedName-exp + ": " + ens.size());
              }
              for(x_entityName en : ens){
                en.x_updateCache();
              }
            }
          ]|
        otherwise:
          result-updateCache* := []
      end
    with // Setter, maintain bidirectional Layer (1/2)
      switch id
        case name-is-unidirectional; name-is-to-one; name-is-normal-default:
          result-set* := class-body-dec* |[
            public void x_set(x_type en)
            { 
              x_setIncr(en);
            }
          ]|
        case name-is-bidirectional; name-is-to-one; name-inverse-is-to-one; name-is-normal-default:
          result-set* := class-body-dec* |[
            public void x_set(x_type en)
            { 
              if(x_name != null){
                x_name.x_inverseSetIncr(null);
              }
              if(en != null){
                x_inverseType v = en.x_inverseName;
                if(v != null){
                  v.x_setIncr(null);
                }
                en.x_inverseSetIncr(this);
              }
              this.x_setIncr(en);
            }
          ]|
        case name-is-bidirectional; name-is-to-one; name-inverse-is-to-many; name-is-normal-default:
          result-set* := class-body-dec* |[
            public void x_set(x_type en)
            { 
              if(x_name != null){
                x_name.x_inverseRemoveIncr(this);
              }
              if(en != null){
                en.x_inverseAddIncr(this);
              }
              this.x_setIncr(en);
            }
          ]|
        case name-is-bidirectional; name-is-to-many; name-is-normal-default:
          result-set* := class-body-dec* |[
            public void x_set(Collection<x_type> en)
            { 
              Collection<x_type> toAdd = new HashSet<x_type>();
              toAdd.addAll(en);
              toAdd.removeAll(x_name);
              for(x_type n : toAdd)
              { 
                x_add(n);
              }
              Collection<x_type> toRemove = new HashSet<x_type>();
              toRemove.addAll(x_name);
              toRemove.removeAll(en);
              for(x_type n : toRemove)
              { 
                x_remove(n);
              }
            }
          ]|
        otherwise:
          result-set* := []
      end
    with
      switch id
        case name-is-unidirectional; name-is-to-one; name-is-default-derived ;name-is-incremental:
          result-setCache* := class-body-dec* |[
            public void x_setCache(x_type en)
            { 
              x_setCacheIncr(en);
            }
          ]|
        case name-is-bidirectional; name-is-to-one; name-inverse-is-to-one; name-is-default-derived ;name-is-incremental:
          result-setCache* := class-body-dec* |[
            public void x_setCache(x_type en)
            { 
              if(x_cache != null){
                x_cache.x_inverseSetCacheIncr(null);
              }
              if(en != null){
                x_inverseType v = en.x_inverseCache;
                if(v != null){
                  v.x_setCacheIncr(null);
                }
                en.x_inverseSetCacheIncr(this);
              }
              this.x_setCacheIncr(en);
            }
          ]|
        case name-is-bidirectional; name-is-to-one; name-inverse-is-to-many; name-is-default-derived ;name-is-incremental:
          result-setCache* := class-body-dec* |[
            public void x_setCache(x_type en)
            { 
              if(x_cache != null){
                x_cache.x_inverseRemoveCacheIncr(this);
              }
              if(en != null){
                en.x_inverseAddCacheIncr(this);
              }
              this.x_setCacheIncr(en);
            }
          ]|
        case name-is-bidirectional; name-is-to-many; name-is-default-derived ;name-is-incremental:
          result-setCache* := class-body-dec* |[
            public void x_setCache(Collection<x_type> en)
            { 
              Collection<x_type> toAdd = new HashSet<x_type>();
              toAdd.addAll(en);
              toAdd.removeAll(x_cache);
              for(x_type n : toAdd)
              { 
                x_addCache(n);
              }
              Collection<x_type> toRemove = new HashSet<x_type>();
              toRemove.addAll(x_cache);
              toRemove.removeAll(en);
              for(x_type n : toRemove)
              { 
                x_removeCache(n);
              }
            }
          ]|
        otherwise:
          result-setCache* := []
      end
    with // Setter, maintain bidirectional Layer (2/2)
      switch id
         case name-is-bidirectional; name-is-to-many; name-inverse-is-to-one; name-is-normal-default:
          result-set2* := class-body-dec* |[
            public void x_add(x_type en)
            { 
              if(en != null){
                x_inverseType v = en.x_inverseName;
                if(v != null){
                  v.x_removeIncr(en);
                }
                en.x_inverseSetIncr(this);
                this.x_addIncr(en);
              }
            }
            public void x_remove(x_type en)
            { 
              if(en != null){
                en.x_inverseSetIncr(null);
                this.x_removeIncr(en);
              }
            }
          ]|
        case name-is-bidirectional; name-is-to-many; name-inverse-is-to-many; name-is-normal-default:
          result-set2* := class-body-dec* |[
            public void x_add(x_type en)
            { 
              if(en != null){
                en.x_inverseAddIncr(this);
                this.x_addIncr(en);
              }
            }
            public void x_remove(x_type en)
            { 
              if(en != null){
                en.x_inverseRemoveIncr(this);
                this.x_removeIncr(en);
              }
            }
          ]|
        otherwise:
          result-set2* := []
      end
    with
      switch id
        case name-is-bidirectional; name-is-to-many; name-inverse-is-to-one; name-is-default-derived ;name-is-incremental:
          result-setCache2* := class-body-dec* |[
            public void x_addCache(x_type en)
            { 
              if(en != null){
                x_inverseType v = en.x_inverseCache;
                if(v != null){
                  v.x_removeCacheIncr(en);
                }
                en.x_inverseSetCacheIncr(this);
                this.x_addCacheIncr(en);
              }
            }
            public void x_removeCache(x_type en)
            { 
              if(en != null){
                en.x_inverseSetCacheIncr(null);
                this.x_removeCacheIncr(en);
              }
            }
          ]|
        case name-is-bidirectional; name-is-to-many; name-inverse-is-to-many; name-is-default-derived ;name-is-incremental:
          result-setCache2* := class-body-dec* |[
            public void x_addCache(x_type en)
            { 
              if(en != null){
                en.x_inverseAddCacheIncr(this);
                this.x_addCacheIncr(en);
              }
            }
            public void x_removeCache(x_type en)
            { 
              if(en != null){
                en.x_inverseRemoveCacheIncr(this);
                this.x_removeCacheIncr(en);
              }
            }
          ]|
        otherwise:
          result-setCache2* := []
      end
    with // Set, maintain incremental Layer
      switch id
        case name-is-normal-default; name-is-to-one; name-is-ondemand:
          result-setIncremental* := class-body-dec* |[
            protected void x_setIncr(x_type en)
            { 
              this.x_name = en;
            }
          ]|
        case name-is-normal-default; name-is-to-one; name-is-incremental:
          result-setIncremental* := class-body-dec* |[
            protected void x_setIncr(x_type en)
            { 
              if(this.x_name != en){
                x_type oldValue = this.x_get();
                this.x_name = en;
                x_type newValue = this.x_get();
                if((oldValue==null && newValue !=null) || (!oldValue.equals(newValue))){
                  x_dirtyFlagFlows();
                }
              }
            }
          ]|
        case name-is-normal-default; name-is-to-many; name-is-ondemand:
          result-setIncremental* := class-body-dec* |[
            protected void x_addIncr(x_type en)
            { 
              this.x_name.add(en);
            }
            protected void x_removeIncr(x_type en)
            { 
              this.x_name.remove(en);
            }
          ]|
        case name-is-normal-default; name-is-to-many; name-is-incremental:
          result-setIncremental* := class-body-dec* |[
            protected void x_addIncr(x_type en)
            { 
              if(en != null){
                Collection<x_type> oldValue = this.x_get();
                this.x_name.add(en);
                Collection<x_type> newValue = this.x_get();
                if((oldValue==null && newValue !=null) || (!oldValue.equals(newValue))){
                  x_dirtyFlagFlows(); //TODO: does this dirty flag too much?
                }
              }
            }
            protected void x_removeIncr(x_type en)
            { 
              if(en != null){
                Collection<x_type> oldValue = this.x_get();
                this.x_name.remove(en);
                Collection<x_type> newValue = this.x_get();
                if((oldValue==null && newValue !=null) || (!oldValue.equals(newValue))){
                  x_dirtyFlagFlows(); //TODO: does this dirty flag too much?
                }
              }
            }
          ]|
        otherwise:
          result-setIncremental* := []
      end
    with
      switch id
        case name-is-default-derived; name-is-to-one; name-is-incremental:
          result-setCacheIncr* := class-body-dec* |[
            protected void x_setCacheIncr(x_type en)
            { 
              if(this.x_cache != en){
                x_type oldValue = this.x_get();
                this.x_cache = en;
                x_type newValue = this.x_get();
                if((oldValue==null && newValue !=null) || (!oldValue.equals(newValue))){
                  x_dirtyFlagFlows();
                }
              }
            }
          ]| 
        case name-is-default-derived; name-is-to-many; name-is-incremental:
          result-setCacheIncr* := class-body-dec* |[
            protected void x_addCacheIncr(x_type en)
            { 
              if(en != null){
                Collection<x_type> oldValue = this.x_get();
                this.x_cache.add(en);
                Collection<x_type> newValue = this.x_get();
                if((oldValue==null && newValue !=null) || (!oldValue.equals(newValue))){
                  x_dirtyFlagFlows(); //TODO: does this dirty flag too much?
                }
              }
            }
            protected void x_removeCacheIncr(x_type en)
            { 
              if(en != null){
                Collection<x_type> oldValue = this.x_get();
                this.x_cache.remove(en);
                Collection<x_type> newValue = this.x_get();
                if((oldValue==null && newValue !=null) || (!oldValue.equals(newValue))){
                  x_dirtyFlagFlows(); //TODO: does this dirty flag too much?
                }
              }
            }
          ]| 
        otherwise:
          result-setCacheIncr* := []
      end
    with // Getter, many valued Layer
      switch id
        case name-is-to-one:
          result-getStatic* := class-body-dec* |[
            public static x_type x_get(x_entityName en)
            { 
              return en == null ? null : en.x_get();
            }
          
            public static Collection<x_type> x_get(Collection<x_entityName> ens)
            { 
              Collection<x_type> result = Expressions.emptyCollection();
              for(x_entityName en : ens)
              { 
                if(en.x_get() != null)
                  result.add(en.x_get());
              }
              return result;
            }
          ]|
        case name-is-to-many:
          result-getStatic* := class-body-dec* |[
            public static Collection<x_type> x_get(x_entityName en)
            { 
              Collection<x_type> empty = Expressions.emptyCollection();
              return en == null ? empty : en.x_get();
            }
          
            public static Collection<x_type> x_get(Collection<x_entityName> ens)
            { 
              Collection<x_type> result = Expressions.emptyCollection();
              for(x_entityName en : ens)
              { 
                result.addAll(en.x_get());
              }
              return result;
            }
          ]|
        otherwise:
          result-getStatic* := []
      end
    with // Getter, derivation type Layer
      switch id
        case name-is-normal:
          result-get* := class-body-dec* |[
            public ~type:multType x_get()
            { 
              return x_name;
            }
          ]|
        case name-is-default:
          result-get* := class-body-dec* |[
            public ~type:multType x_get()
            { 
              if(x_name != null)
                return x_name;
              return x_getCalculated();
            }
          ]|
        case name-is-derived:
          result-get* := class-body-dec* |[
            public ~type:multType x_get()
            { 
              return x_getCalculated();
            }
          ]|
        otherwise:
          result-get* := []
        end
    with // Getter, calculated value Layer
      switch id
        case name-is-default-derived; name-is-ondemand:
          result-getCalculated* := class-body-dec* |[
            private ~type:multType x_getCalculated()
            { 
              return x_calculate();
            }
          ]|
        case name-is-default-derived; name-is-incremental:
          result-getCalculated* := class-body-dec* |[
            private ~type:multType x_getCalculated()
            { 
              return x_cache;
            }
          ]|
        otherwise:
          result-getCalculated* := []
        end
    with // Expressions + Dataflows Layer
      switch id
        case name-is-default-derived; name-has-expr:
          result-calculate* := class-body-dec* |[
            private ~type:multType x_calculate()
            { 
              ~calculate-stms*
              return ~calculate-exp;
            }
          ]|
        case name-is-default-derived; not(name-has-expr):
          result-calculate* := class-body-dec* |[
            private ~type:multType x_calculate()
            { 
              throw new UnsupportedOperationException("Cannot read inverse derived value with on-demand calculation strategy.");
            }
          ]|
        otherwise:
          result-calculate* := []
      end
    with
      switch id
        case name-is-incremental:
          result-dirtyFlagFlows* := class-body-dec* |[
            public void x_dirtyFlagFlows()
            {
              ~flowsto-stms*
            }
          ]|
        otherwise:
          result-dirtyFlagFlows* := []
      end
    with
      switch id
        case name-is-incremental; name-is-default-derived:
          result-flagDirty* := class-body-dec* |[
            protected static void x_flagDirty(x_entityName en)
            {
              if(en != null)
                x_dirty.add(en);
            }
            
            protected static void x_flagDirty(Collection<x_entityName> ens)
            {
              x_dirty.addAll(ens);
            }
          ]|
        otherwise :
          result-flagDirty* := []
      end
    with // Data Structure Layer
      switch id
        case name-is-normal-default; name-is-to-one:
          result-userField* := class-body-dec* |[
            protected x_type x_name;
          ]|
        case name-is-normal-default; name-is-to-many:
          result-userField* := class-body-dec* |[
            protected Collection<x_type> x_name = Expressions.emptyCollection();
          ]|
        otherwise :
          result-userField* := []
      end
    with
      switch id
        case name-is-incremental; name-is-default-derived; name-is-to-one:
          result-cacheField* := class-body-dec* |[
            protected x_type x_cache;
          ]|
        case name-is-incremental; name-is-default-derived; name-is-to-many:
          result-cacheField* := class-body-dec* |[
            protected Collection<x_type> x_cache = Expressions.emptyCollection();
          ]|
        otherwise :
          result-cacheField* := []
      end
    with
      switch id
        case name-is-incremental; name-is-default-derived:
          result-dirtyFlags* := class-body-dec* |[
            private static Collection<x_entityName> x_dirty = new HashSet<x_entityName>();
          ]|
        otherwise :
          result-dirtyFlags* := []
      end
    with
      result := class-body-dec* |[
        ~result-updateCache*
        ~result-set*
        ~result-setCache*
        ~result-set2*
        ~result-setCache2*
        ~result-setIncremental*
        ~result-setCacheIncr*
        ~result-getStatic*
        ~result-get*
        ~result-getCalculated*
        ~result-calculate*
        ~result-dirtyFlagFlows*
        ~result-flagDirty*
        ~result-userField*
        ~result-cacheField*
        ~result-dirtyFlags*
      ]|

  model-pathexpr-to-java-stm(err): pathexpr -> result
    with
      x_attributeName := <pathexpr-last>pathexpr;
      x_entityName    := <attributename-get-entityname>x_attributeName;
      x_flagDirty     := <name-flagdirty>x_attributeName;
      (stms*, expr)   := <pathexpr-shorten-safe;exp-to-java-stm(err|0)>pathexpr
    with
      result := bstm |[
        {
          ~stms*
          x_entityName.x_flagDirty(~expr);
        }
      ]|

rules

  model-shortcutname-to-java-classbodydecs(err): x_shortcutName -> result-getShortcut*
    where
      is-shortcutname
    with
      x_sourceEntityName := <attributename-get-entityname>x_shortcutName;
      x_targetEntityName := <get-type2>x_shortcutName;
      x_inverseName      := <shortcutname-get-inversename>x_shortcutName;
      x_roleName         := <shortcutname-get-rolename>x_shortcutName;
      x_relationName     := <attributename-get-entityname>x_roleName;
      x_getShortcut      := <name-get>x_shortcutName;
      x_getInverse       := <name-get>x_inverseName;
      x_getRole          := <name-get>x_roleName
    with
      if name-is-to-one then
        result-getShortcut* := class-body-dec* |[
          public x_targetEntityName x_getShortcut()
          { 
            return x_relationName.x_getRole(this.x_getInverse());
          }
        
          public static x_targetEntityName x_getShortcut(x_sourceEntityName en)
          { 
            return en == null ? null : x_relationName.x_getRole(en.x_getInverse());
          }
        
          public static Collection<x_targetEntityName> x_getShortcut(Collection<x_sourceEntityName> ens)
          { 
            Collection<x_targetEntityName> result = Expressions.emptyCollection();
            for(x_sourceEntityName en : ens)
            { 
              x_targetEntityName v = x_relationName.x_getRole(en.x_getInverse());
              if(v != null)
                result.add(v);
            }
            return result;
          }
        ]|
      else // many
        result-getShortcut* := class-body-dec* |[
          public Collection<x_targetEntityName> x_getShortcut()
          { 
            return x_relationName.x_getRole(this.x_getInverse());
          }
        
          public static Collection<x_targetEntityName> x_getShortcut(x_sourceEntityName en)
          { 
            return en == null ? null : x_relationName.x_getRole(en.x_getInverse());
          }
        
          public static Collection<x_targetEntityName> x_getShortcut(Collection<x_sourceEntityName> ens)
          { 
            Collection<x_targetEntityName> result = Expressions.emptyCollection();
            for(x_sourceEntityName en : ens)
            { 
              result.addAll(x_relationName.x_getRole(en.x_getInverse()));
            }
            return result;
          }
        ]|
      end

rules

  model-init-name-to-java-stms(err): x_attributeName -> result
    with
      x_entityName                := <attributename-get-entityname>x_attributeName;
      x_flagDirty                 := <name-flagdirty>x_attributeName
    with
      if name-is-default-derived; name-is-calconwrite then
        result := bstm* |[
          x_entityName.x_flagDirty(this);
        ]|
      else
        result := []
      end
