module generating/webdsl/js/module

imports // constructors

	webdsl/constructors
	webdsl/WebDSL
	
	desugaring/constructors

imports // functions
  lib/js/signatures/spoofaxJS-sig
  generating/_ir/model 
  generating/webdsl/model
	generating/webdsl/data
  api/model-names-api
	api/module-api
  api/module-names-api
  lib/lists-tuples
  lib/string
  analysis2/path
	api/_runtime
	api/model-api
	api/model-names-api
  generating/_ir/model
  generating/webdsl/expressions
  generating/webdsl/expressions-references
  generating/webdsl/types
	lib/search
  names/naming/names
	naming/_notNaBL
	
rules // module

  name-to-jsstring: name -> String(<concat-strings> ["\"", name, "\""])

  moduleName-to-derivation-js: moduleName -> derivation-js
    with
      attributes := <modulename-get-attributenames-default-derivation> moduleName
    ; stmt_derivationjs* := <map(attributeName-default-derivation-to-js)>attributes
    ; derivation-js := js-program |[stmt_derivationjs*]|
  
  attributeName-default-derivation-to-js: attributeName -> derivation-js
  	with
  	  exp_attributeNamestr := <name-to-jsstring> attributeName
  	; exp_derivation := <attributename-get-expr; expr-to-js> attributeName
  	; derivation-js := js-stmt |[
  	  setDerived(exp_attributeNamestr, function() {
		return exp_derivation;
	  });]|

  expr-to-js: LitString(str1) -> <name-to-jsstring> str1
  expr-to-js: Ref(entityName) -> js-ex |[ get(exp_entityName) ]| where exp_entityName := <name-to-jsstring> entityName
  expr-to-js: Float(f) -> FloatLiteral(f)
  expr-to-js: Int(i) -> IntegerLiteral(i)
  expr-to-js: True() -> True()
  expr-to-js: False() -> False()
  expr-to-js: NoValue() -> Null()
  expr-to-js: Datetime(str1) -> js-ex |[ parseDatetime(exp_1) ]| with exp_1 := String(str1)

  expr-to-js: Cast(ex1, ex1-ty) -> js-cast
    with
      exp_1 := <expr-to-js>ex1;
      exp_call := $[as[<postfix-id>ex1-ty]];
      js-cast := js-ex |[ exp_call(exp_1) ]|

  expr-to-js: expr -> js
      where
        lib-call
      with
        arg*            := <get-arguments>expr;
        exp_args*       := <map(expr-to-js)>arg*;
        exp_call        := <lib-method-name>expr
      with
        js := js-ex |[
          exp_call(exp_args*)
        ]|

    