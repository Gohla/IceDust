module generating/webdsl/module-ui

imports // constructors

  webdsl/constructors
  webdsl/WebDSL
  desugaring/constructors
  signatures/Types-sig
  analysis2/path
  tiersplit/constructors

imports // functions
  
  generating/_ir/model 
  generating/webdsl/model
  generating/webdsl/data
  generating/webdsl/types
  api/model-names-api
  api/module-api
  api/module-names-api
  lib/lists-tuples
  lib/string

rules //crud
  
  entityname-to-webdsl-defs: x_entityName -> result
    with
      elem_nameString:= String(x_entityName);
      x_manageEntity := <name-manage>x_entityName;
      x_createEntity := <name-create>x_entityName;
      x_editEntity   := <name-edit>x_entityName;
      x_removeEntity := <name-remove>x_entityName;
      x_viewEntity   := <lcfirst>x_entityName;
      attributenames := <entityname-get-attributenames2>x_entityName;
      relations := <entityname-get-relationnames> x_entityName;
      relationsOnes := <filter(where(get-multiplicity; ?One()))> relations;
      attributenames-normal-default := <entityname-get-attributenames2-normal-default>x_entityName;
      numberOfAttributes := <length>attributenames;
      numberOfAttributesNormalDefault := <length>attributenames-normal-default;
      entity-fields := <map(attributename-to-webdsl)>attributenames;
      allNames := <conc> (attributenames, relationsOnes);
      createNames := <filter(attributename-is-normal-default)> allNames;
//      elem_deriveRowsVarCreate   := <map(attributename-to-webdsl-varcreate)> createNames;
      elem_deriveRowsInputCreate := <map(attributename-to-webdsl-inputedit)> attributenames; // createNames;
//      elem_deriveRowsVarEdit     := <map(attributename-to-webdsl-varedit)>   attributenames-normal-default;
      elem_deriveRowsInputEdit   := <map(attributename-to-webdsl-inputedit)> attributenames;
//    elem_deriveRowsOutputView  := <map(attributename-to-webdsl-outputview)>attributenames;
      
      if <?0> numberOfAttributesNormalDefault then
        x_createEntityBlock := ObjectCreation(x_entityName, [])
      else
        x_createEntityBlock :=
          ObjectCreation(x_entityName, <map(attributename-to-creation-property)> attributenames-normal-default)
      end;
      
      stat_assignEditEntity := <map(attributename-to-webdsl-assignedit)> attributenames-normal-default;
      def_relationsetters := <map(relationname-to-setter(|x_entityName))> relations;
      elem_editRelations := <map(relationname-to-editlink)> relations;
      elem_relationsOutputView := <map(relationname-to-output)> relations;
      stat_createDefaultWrap* :=
        <filter(where(_get-type; ?String()); attributename-is-default);
         map(create-wrap-default)> attributenames;
      attributenames-default-derivation := <entityname-get-attributenames2-default-derivation> x_entityName;
      partial_vars := <fmap(attributename-get-expr-tiersplit-vars)> attributenames-default-derivation;
      elem_hiddenvars* := <map(var-to-hidden-div)> partial_vars;
      
      ctime := "0";//<time>;
      x_jsExpressions := <double-quote> $[Expressions.js?[ctime]];
      x_jsLib := <double-quote> $[javascript-lib.js?[ctime]];
      x_jsDerivations := <double-quote> $[derivations.js?[ctime]]
    with
      result := def* |[
        page x_manageEntity(){
          main()
          define body() {
            header{ elem_nameString }
            navigate x_createEntity() [class="ice-ent-create"] { "Create " }
            <br/>
            for(entity: x_entityName order by entity.name asc) {
              div[class="ice-ent"]{
                div[class="ice-ent-name"]{
                  navigate x_viewEntity(entity) [] { output(entity.name) }
                }
                action("Delete", x_removeEntity(entity))
              }
            }
            action x_removeEntity(entity: x_entityName) {
              entity.delete();
            }
          }
        }
        
        page x_createEntity(){
          var temp := x_entityName{}
          includeJS(x_jsExpressions)
          includeJS(x_jsLib)
          includeJS(x_jsDerivations)
          main()
          define body() {
            header{ "Create " elem_nameString }
            div[class="ice-form"] {
              form {
                elem_hiddenvars*
                elem_deriveRowsInputCreate
                <br/>
                action("Save", save())
              }
            }
            action save() {
              stat_createDefaultWrap*
              temp.save();
              return x_viewEntity(temp);
            }
          }
        }
        
        page x_viewEntity(temp: x_entityName){
          includeJS(x_jsExpressions)
          includeJS(x_jsLib)
          includeJS(x_jsDerivations)
          main()
          define body() {
            header{"Edit " output(temp.name)}
            div[class="ice-form"] {
              form {
                elem_editRelations
                elem_hiddenvars*
                elem_deriveRowsInputEdit
                <br/>
                submit action {
                  stat_createDefaultWrap*
                  temp.save();
                } { "Save" }
              }
            }
          }
        }

        def_relationsetters
      ]|
    
  
  attributename-to-webdsl: x_name -> DeriveDefault(x_name)
  
  entityname-to-webdsl-elem: x_entityName -> result
    with
      x_manageName := $[manage[x_entityName]];
      $text := Text(x_entityName)
    with
      result := elem |[
        navbaritem{navigate x_manageName(){$text}}
      ]|

rules //crud rules
  
  var-to-hidden-div: TierSplit(name, expr) -> result
    with
      type := <attributename-pp2-type-multiplicity> expr;
      x_strname := <double-quote> name;
      x_strtype := <double-quote> type;
      x_getname := <name-get> name;
      result := elem |[
        <div
          data-partial-var="true"
          data-name=x_strname
          data-type=x_strtype
          style="display:none">
          output(temp.x_getname().toString())
        </div>
      ]|

  create-wrap-default : x_name -> result
  with
    result := stat |[
      if(temp.x_name.trim() == "") {
        temp.x_name := null;
      }
    ]|

  attributename-to-webdsl-varcreate : x_name -> result
  with
    x_type := <name-to-webdsl-srt(err)>x_name;
    result := def |[
      var x_name : x_type := null
    ]|
  
  booleantype-to-webdsl-inputtext : ZeroOrOne() -> result
  with
    result := "inputNonRequiredBool"
    
  booleantype-to-webdsl-inputtext : m -> result
  with
    result := "input"
    
  relationname-to-editlink : x_name -> result
  with
    entity := <attributename-get-entityname> x_name;
    x_namestr := String(<ucfirst>x_name);
    x_setname := $[set_[entity]_[x_name]];
    x_s := <double-quote> x_name;
    x_getname := <name-get> x_name;
    result := elem* |[
      <div class="ice-attr">
        <div class="ice-attr-name">
          "" x_namestr ":"
        </div>
        <div class="ice-rel-val">
          "" output(temp.x_getname())
        </div>
        <div class="ice-rel-edit">
          navigate x_setname(temp) [] { "Edit " }
        </div>
      </div>
    ]|
    
  relationname-to-output : x_name -> result
  with
    mult := <get-multiplicity> x_name;
    x_s := <double-quote> x_name;
    x_getname := <name-get> x_name;
    if <?ZeroOrMore()> mult then // *
      result := elem* |[
        <b>x_s ": "</b> <br/>
        for(s in temp.x_getname()) {
          output(s.name) <br/>
        }
      ]|
    else // 1 ?
      result := elem* |[
        x_s ": " output(temp.x_getname().name) <br/>
      ]|
    end  
  
  relationname-to-setter(|x_entityName) : x_name -> result
  with
    mult := <get-multiplicity> x_name;
    x_setname := $[set_[x_entityName]_[x_name]];
    x_stringifiedname := <double-quote> x_name;
    x_getname := <name-get> x_name;
    x_editEntity := <name-edit> x_entityName;
    x_viewEntity   := <lcfirst>x_entityName;
    x_inverseName := <name-get-inversename> x_name;
    x_entname := <attributename-get-entityname>x_inverseName;
    if <?One()> mult then // 1
      result := def |[
        page x_setname(ent: x_entityName) {
          main()
          define body() {
            header{ "Edit " output(ent.name) " " x_stringifiedname }
            <div class="ice-form">
              <div class="ice-attr">
                <div class="ice-attr-name">
                  "" x_stringifiedname ":"
                </div>
                <div class="ice-rel-val">
                  "" output(ent.x_getname())
                </div>
              </div>
            </div>
            <div class="ice-form2">
              for(s: x_entname order by s.name asc) {
                if(ent.x_getname() != s) {
                  div[class="ice-ent"]{
                    div[class="ice-ent-name"]{
                      output(s)
                    }
                    submit action {
                      ent.x_name := s;
                      ent.save();
                    } { "Set" }
                  }
                }
              }
            </div>
          }
        }
      ]|
    else
      if <?ZeroOrOne()> mult then // ?
        result := def |[
          page x_setname(ent: x_entityName) {
            main()
            define body() {
              header{ "Edit " output(ent.name) " " x_stringifiedname }
              <div class="ice-form">
                <div class="ice-attr">
                  <div class="ice-attr-name">
                    "" x_stringifiedname ":"
                  </div>
                  <div class="ice-rel-val">
                    "" output(ent.x_getname())
                  </div>
                  if(ent.x_getname() != null){
                    <div class="ice-rel-edit">
                      submit action {
                        ent.x_name := null;
                        ent.save();
                      } { "Remove" }
                    </div>
                  }
                </div>
              </div>
              <div class="ice-form2">
                for(s: x_entname order by s.name asc) {
                  if(ent.x_getname() != s) {
                    div[class="ice-ent"]{
                      div[class="ice-ent-name"]{
                        output(s)
                      }
                      submit action {
                        ent.x_name := s;
                        ent.save();
                      } { "Set" }
                    }
                  }
                }
              </div>
            }
          }
        ]|
      else // *
        result := def |[
          page x_setname(ent: x_entityName) {
            main()
            define body() {
              header{ "Edit " output(ent.name) " " x_stringifiedname }
              <div class="ice-form">
                <div class="ice-attr">
                  <div class="ice-attr-name">
                    "" x_stringifiedname ":"
                  </div>
                  <div class="ice-rel-vals">
                    for(s in ent.x_getname()) {
                      <div class="ice-rel-val">
                        "" output(s)
                      </div>
                      <div class="ice-rel-edit">
                        submit action {
                          ent.x_name.remove(s);
                          ent.save();
                        } { "Remove" }
                      </div>
                      <br/>
                    }
                  </div>
                </div>
              </div>
              <div class="ice-form2">
                for(s: x_entname order by s.name asc) {
                  if(ent.x_getname().indexOf(s) == -1) {
                    div[class="ice-ent"]{
                      div[class="ice-ent-name"]{
                        output(s)
                      }
                      submit action {
                        ent.x_name.add(s);
                        ent.save();
                      } { "Add" }
                    }
                  }
                }
              </div>
            }
          }
        ]|
      end
    end
  
  attributetype-to-webdsl-inputtext(|x_name) : type -> result
  with
    result := "input"
  
  attributename-to-webdsl-inputcreate : x_name -> result
  with
    x_qname := <double-quote> x_name;
    elem_input := <name-to-webdsl-input> x_name;
    result := elem* |[ "" x_qname ": " elem_input <br/> ]|
  
  name-to-webdsl-input : x_name -> result
  with
    if <_get-type;Boolean()> x_name then
      if <get-multiplicity;ZeroOrOne()> x_name then
        result := elem |[ inputNonRequiredBool(temp.x_name) ]|
      else
        result := elem |[ input(temp.x_name) ]|
      end
    else
      result := elem |[ input(temp.x_name) ]|
    end
    
  extract-flow : DataflowPath(x, Ref(y)) ->
    $[[<attributename-get-entityname> y]_[y]]
  extract-flow : DataflowPath(x, y) -> ""
  
  add-space : s -> <conc-strings> (s, " ")
  
  attributename-to-webdsl-inputedit : x_name -> result
  with
    x_namestr := String(<ucfirst>x_name);
    entityName := <attributename-get-entityname> x_name;
    x_derivedname := $["[entityName]_[x_name]"];
    x_typestr := <attributename-pp2-type-multiplicity; double-quote> x_name;
    x_input := <name-to-webdsl-input> x_name;
    flows := <name-get-flowsto-paths> x_name;
    flows-extracted := <map(extract-flow)> flows;
    x_flows := <map(add-space); concat-strings; double-quote> flows-extracted;
    x_output := <attributename-to-webdsl-output> x_name;
    if <attributename-is-derivation>x_name then
      result := elem* |[
        <div class="ice-attr">
          <div class="ice-attr-name">
            "" x_namestr ":"
          </div>
          <div class="ice-attr-val ice-attr-output">
            <div
              data-name = x_derivedname
              data-type = x_typestr
              data-updates = x_flows>
              <div class="output">
                "" x_output
              </div>
              <div class="error-msg"></div>
            </div>
          </div>
        </div>
      ]|
    else
    if <attributename-is-default> x_name then
        result := elem* |[
          <div class="ice-attr">
            <div class="ice-attr-name">
              "" x_namestr ":"
            </div>
            <div class="ice-attr-val ice-attr-input-output">
              <div
                data-name = x_derivedname
                data-type = x_typestr
                data-updates = x_flows
                data-default = "true">
                "" x_input
                <div class="error-msg"></div>
                <div class="default-output">
                  "" x_output
                </div>
              </div>
            </div>
          </div>
        ]|
      else
        result := elem* |[
          <div class="ice-attr">
            <div class="ice-attr-name"> 
              "" x_namestr ":"
            </div>
            <div class="ice-attr-val ice-attr-input">
              <div
                data-name = x_derivedname
                data-type = x_typestr
                data-updates = x_flows>
                "" x_input
                <div class="error-msg"></div>
                <div class="default-output"></div>
              </div>
            </div>
          </div>
        ]|
      end
    end
  
  attributename-to-creation-property : x_name -> ObjectPropertyAssignment(x_name, Var(x_name))

  attributename-to-webdsl-assignedit : x_name -> result
  with
    if <attributename-is-default>x_name then
      if <_get-type;String()>x_name then
        result := stat |[
          if(x_name.trim() != "") {
            temp.x_name := x_name;
          } else {
            temp.x_name := null;
          }
        ]|
      else
        result := stat |[
          if(x_name != null) {
              temp.x_name := x_name;
          } else {
              temp.x_name := null;
          }
        ]|
      end
    else
      result := stat |[temp.x_name := x_name;]|
    end
    
  attributename-to-webdsl-varedit: x_name -> result
  with
    ux_name := <ucfirst>x_name;
    if <attributename-is-default>x_name then
      x_nameRightHand := $[temp.[x_name]];
      result := def |[
        var x_name := x_nameRightHand
      ]|
    else
      x_nameRightHand := $[temp.get[ux_name]()];
      result := def |[
        var x_name := x_nameRightHand
      ]|
    end
    
    attributename-to-webdsl-output: x_name ->  result
  with
    x_getname := <name-get> x_name;
    if <_get-type;Datetime()>x_name then
      result := elem |[output(temp.x_name)]|
    else
      result := elem |[output(temp.x_getname())]|
    end
    
  attributename-to-webdsl-outputview: x_name ->  result
  with
    x_qname := <double-quote> x_name;
    if <_get-type;Datetime()>x_name then
      result := elem* |["" x_qname ": " output(temp.x_name) <br/>]|
    else
      x_getname := <name-get> x_name;
      result := elem* |["" x_qname ": " output(temp.x_getname()) <br/>]|
    end
