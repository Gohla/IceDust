module generating/webdsl/partial-expressions

imports // constructors

  webdsl/constructors
  webdsl/WebDSL
  signatures/Data-sig
  signatures/Expressions-sig  
  desugaring/constructors

imports // functions

  api/_runtime  
  api/module-names-api
  generating/_ir/expressions
  generating/webdsl/model
  generating/webdsl/data
  generating/webdsl/types
  names/naming/names

signature
  constructors
    NoRelation: Exp -> Exp
    Partial: STRING -> Exp

rules
  expr-is-norelation = ?NoRelation(_)
  expr-is-aggregation = ?Count(_)
  expr-is-aggregation = ?Max(_)                 
  expr-is-aggregation = ?Min(_)                 
  expr-is-aggregation = ?Avg(_)                 
  expr-is-aggregation = ?Sum(_)                 
  expr-is-aggregation = ?Conj(_)                
  expr-is-aggregation = ?Disj(_)                
  expr-is-aggregation = ?Concat(_)
  
  expr-is-relationref: Ref(entityName) -> NoRelation(Ref(entityName)) where not(<is-relationname> entityName)
  expr-to-partial-expr = expr-is-relationref
  expr-to-partial-expr: expr -> result
  where
    not(expr-is-relationref);
    not(expr-to-partial-expr-type)
  with
    arg* := <get-arguments>expr;
    exp_args* := <map(expr-to-partial-expr)>arg*;
    relations := <collect-all(expr-is-norelation)> exp_args*;
    if <?[]> relations then
      result := Partial("String")
    else
      constr := <get-constructor>expr;
      newterm := <mkterm>(constr,exp_args*);
      result := newterm
    end
    
  expr-to-partial-expr-type: LitString(str1)                 -> Partial("String")
  expr-to-partial-expr-type: Int(i_1)                        -> Partial("String")
  expr-to-partial-expr-type: Float(f_1)                      -> Partial("String")
  expr-to-partial-expr-type: True()                          -> Partial("String")
  expr-to-partial-expr-type: False()                         -> Partial("String")
  expr-to-partial-expr-type: Datetime(str1)                  -> Partial("String")
  expr-to-partial-expr-type: NoValue()                       -> Partial("String")
  expr-to-partial-expr = expr-to-partial-expr-type
  