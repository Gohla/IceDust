module lib/nabl-ext

imports // constructors
  
  api/_runtime-constructors

imports // functions
  
  api/_runtime
  lib/string
  lib/traverse
  lib/debug
  lib/lists-tuples

rules // api for unresolved references error messages
  
  nabl-constraint(|ctx): x -> <fail>
    where
      (e, nses) := <unresolved-error>x;
      nses-s := <pp-nses-or>nses;
      <_has-annotation(?Use(task))>e;
      <_task-create-error-on-failure(|ctx, task, ["Unresolved reference: ", e, " cannot be resolved to ", <string-prep-a-an>nses-s])> e
  
  pp-nses-or: [] -> ""
  pp-nses-or: [ns|nses] -> <concat-strings>[ns-s, sep, nses-s]
    with
      ns-s := <_pp-ns>ns;
      nses-s := <pp-nses-or>nses;
      if <eq>(<length>nses, 0) then
        sep := ""
      else if <eq>(<length>nses, 1) then
        sep := " or "
      else
        sep := ", "
      end end
  
  unresolved-error = fail // interface implemented by language

rules // api for conflicting nses error messages
  
  nabl-constraint(|ctx):  a -> <fail>
    where
      <is-string>a;                     //on all strings
      name := <nabl-get-name>a;         //that have an nabl name
      <not(_nabl-has-reference)>name;    //and this name is a def
      uri := <_nabl-uri> name;
      ns  := <_nabl-uri-namespace> uri;
      nses := <ns-conflict-error;filter(fetch(?ns));Hd>ns //get the list of nses that this ns is in (where-fail if there is no such list)
    with
      <name-nses-conflict(|ctx, nses)>name

  name-nses-conflict(|ctx,nses): a-name -> <id>
    with
      <map(name-ns-conflict(|ctx, a-name))>nses

  name-ns-conflict(|ctx, a-name): conflict-ns -> <id>
    with
      uri := <_nabl-uri> a-name;
      ns  := <_nabl-uri-namespace> uri;
      if <not(eq)> (conflict-ns, ns) then
        uri':= <_nabl-uri-parent> uri;
        parent:= <_nabl-uri-name> uri';
        parent-ns := <_nabl-uri-namespace> uri';
        role-defs := <_nabl-lookup-lexical(|ctx, conflict-ns)> a-name;
        <_task-create-error-on-success(|ctx, role-defs, ["Conflicting ", <_pp-ns>ns, " and ", <_pp-ns>conflict-ns, " ", a-name, " in ", <_pp-ns>parent-ns, " ", parent])> a-name
      end

  ns-conflict-error = fail // interface implemented by language
  
  nabl-get-name = fail // generated by nabl

signature constructors
  
  ContainsAll : Term * Term * Term * Term * Term -> Term
  
  ShadowChildren : List(Def) -> List(Def)

rules // api for checking something contains all of def

  // interface implemented by language
  contains-all-errors = fail
  eval(|f)            = fail

  nabl-constraint(|ctx): a -> <fail>
    with
      contains-all-errors;map(try(nabl-constraint(|ctx, a)))

  nabl-constraint(|ctx, a): f -> <id>
    where
      ContainsAll(
        def-child-ns, 
        filters,
        f-on,
        f-ast-children,
        f-msg-on
      ) := f
    where
      <eval(|f-on)>a
    with
      a-ty                        := <_get-or-create-property-task(|ctx, Type())>a;
      a-ty-def                    := <_nabl-create-collectdefs(|ctx)> a-ty;
      [a-ty-def-children]         := <_nabl-resolve-all-tasks(|ctx, def-child-ns, [])> [a-ty-def];
      a-ty-def-parents            := <_relation-create-lookup(|ctx, "<sub:")>a-ty-def;
      [a-ty-def-parents-children] := <_nabl-resolve-all-tasks(|ctx, def-child-ns, [])> [a-ty-def-parents];
      a-ty-def-children-all       := <_task-create-combine(|ctx)>[a-ty-def-children, a-ty-def-parents-children];
      a-ty-def-children-shadowed  := <_new-task(|ctx, <_task-combinator-type>, <_task-auto-storage>);_task-create-combine(|ctx)> Rewrite("shadow-children", ShadowChildren(a-ty-def-children-all));
      a-children                  := <eval(|f-ast-children)>a;
      a-children-defs             := <map(_nabl-create-collectdefs(|ctx));_task-create-combine(|ctx)>a-children;
      diff                        := <_task-create-diff(|ctx)> (a-ty-def-children-shadowed, a-children-defs);
      diff-filtered               := <filter-propconstraints(|ctx,filters)>diff;
      a-msg-on                    := <eval(|f-msg-on)>a;
      msg                         := ["Provide all required ", <_pp-ns>def-child-ns, "s: ", diff-filtered];
      <_task-create-error-on-success(|ctx, diff-filtered, msg)> a-msg-on

  task-rewrite : ("shadow-children", t) -> <shadow-children>t
  
  shadow-children: ShadowChildren(defs) -> defs'
    with
      defs' := <remove-duplicates(def-to-name;rm-annotations)>defs

  filter-propconstraints(|ctx, filters) = where(!(filters, []);equal);id
  filter-propconstraints(|ctx, filters): def-list -> def-list-filtered-rec
    where
      !(filters, []);not(equal)
    with
      [filter|filters-tail] := filters;
      (nablprop, propvalue) := filter;
      def-list-filtered     := <_nabl-create-propconstraint(|ctx, nablprop, def-list)> propvalue;
      def-list-filtered-rec := <filter-propconstraints(|ctx, filters-tail)>def-list-filtered

rules // getting results of tasks
  
  give-all-tasks-results-anno = bottomup-anno(try(give-task-results-anno))
  give-task-results-anno = _give-task-results;try(de-list)
  
  de-list: [a]->a

rules // replacing uses with defs
  
  replace-use-with-defs-anno = bottomup-anno(try(replace-use-with-def))
  
  replace-use-with-def : Use(d@Def(_)) -> d
  replace-use-with-def : Use([d@Def(_)]) -> d

rules // string{uri} funcs

  nabl-name-parent = _nabl-uri;_nabl-uri-parent;?uri;_nabl-uri-name;?name;!name{Def(uri)}

rules

  def-to-name: d@Def(uri) -> name{d} with name := <_nabl-uri-name>uri
  uri-to-name: uri        -> name{Def(uri)} with name := <_nabl-uri-name>uri
  
rules
  
  // fails if name has no uri
  name-get-childname(|ns, childname-string): name -> childname
    where
      nameUri := <_nabl-uri>name
    with
      childnameUri := <_nabl-extend-uri(|ns, $[[childname-string]], <_nabl-uri-qualifier>nameUri)>nameUri;
      childname := <uri-to-name>childnameUri
      
rules

  add-custom-error-messages(my-error-messages): result -> result'
    with
      Result(file-result*, message-result*, affected-source*, debug-result, time-result) := result;
      [FileResult(source, initial-ast, analyzed-ast, error*, warning*, note*)] := file-result*;
      new-error* := <my-error-messages>analyzed-ast;
      error'* := [error*, new-error*];
      file-result'* := [FileResult(source, initial-ast, analyzed-ast, error'*, warning*, note*)]; 
      result':= Result(file-result'*, message-result*, affected-source*, debug-result, time-result)
