module tiersplit/intra-object

imports // constructors

  signatures/Types-sig
  signatures/Expressions-sig
  tiersplit/constructors

imports // functions

  api/model-names-api
  lib/new-name
  lib/traverse
  
rules

  attributename-get-expr-tiersplit-expr = attributename-get-expr-tiersplit;Fst
  attributename-get-expr-tiersplit-vars = attributename-get-expr-tiersplit;Snd

  attributename-get-expr-tiersplit: attrName -> (expr-tiersplit', vars)
    with
      entityName      := <attributename-get-entityname>attrName;
      expr            := <attributename-get-expr>attrName;
      expr-tiersplit  := <expr-to-tiersplit-expr>expr;
      expr-tiersplit' := <tiersplit-expr-add-names(|<concat-strings>[entityName, "_", attrName, "_"])>expr-tiersplit;
      vars            := <collect-all(?Partial(_,_))> expr-tiersplit'
//      ;
//      <debug>attrName;
//      <debug><attributename-get-expr>attrName;
//      <debug>expr-tiersplit';
//      <debug>vars
 
rules
 
  expr-is-tiersplit = ?Partial(_,_)
  
  expr-is-norelation = ?NoRelation(_)
  
  expr-is-aggregation = ?Count(_)
  expr-is-aggregation = ?Max(_)                 
  expr-is-aggregation = ?Min(_)                 
  expr-is-aggregation = ?Avg(_)                 
  expr-is-aggregation = ?Sum(_)                 
  expr-is-aggregation = ?Conj(_)                
  expr-is-aggregation = ?Disj(_)                
  expr-is-aggregation = ?Concat(_)
  
  expr-remove-tiersplit: Partial(s,e) -> e
  expr-remove-tiersplit: e -> e where not(expr-is-tiersplit)

  expr-is-relationref: Ref(entityName) -> NoRelation(Ref(entityName)) where not(<is-relationname> entityName)

  expr-to-tiersplit-expr:  w @ Boolean() -> w
  expr-to-tiersplit-expr:  w @ Int() -> w
  expr-to-tiersplit-expr:  w @ Float() -> w
  expr-to-tiersplit-expr:  w @ String() -> w
  expr-to-tiersplit-expr:  w @ Datetime() -> w
  expr-to-tiersplit-expr:  w @ NoValue() -> w

  expr-to-tiersplit-expr = expr-is-relationref
  expr-to-tiersplit-expr: expr -> result
  where
    not(expr-is-relationref);
    not(expr-to-tiersplit-expr-type)
  with
    annotations := <get-annotations> expr;
    arg* := <get-arguments>expr;
    exp_args* := <map(expr-to-tiersplit-expr)>arg*;
    constr := <get-constructor>expr;
    relations := <collect-all(expr-is-norelation)> exp_args*;
    if <?[]> relations then
      newterm_plain := <mkterm>(constr, <map(expr-remove-tiersplit)> exp_args*);
      newterm := <set-annotations> (newterm_plain, annotations);
      result := Partial("String",newterm)
    else
      result_plain := <mkterm>(constr, exp_args*);
      result := <set-annotations> (result_plain, annotations)
    end
    
  expr-to-tiersplit-expr-type: w @ LitString(str1)                 -> Partial("String", w)
  expr-to-tiersplit-expr-type: w @ Int(i_1)                        -> Partial("String", w)
  expr-to-tiersplit-expr-type: w @ Float(f_1)                      -> Partial("String", w)
  expr-to-tiersplit-expr-type: w @ True()                          -> Partial("String", w)
  expr-to-tiersplit-expr-type: w @ False()                         -> Partial("String", w)
  expr-to-tiersplit-expr-type: w @ Datetime(str1)                  -> Partial("String", w)
  expr-to-tiersplit-expr-type: w @ NoValue()                       -> Partial("String", w)
  
  expr-to-tiersplit-expr = expr-to-tiersplit-expr-type

  tiersplit-expr-add-name(|prefix): (Partial(s,e), history) -> result
    with
      (s', history') := <new-name>(prefix, history);
      result := (Partial(s',e), history')
  
  tiersplit-expr-add-name(|prefix): (expr, history) -> (expr, history)
    where not(<expr-is-tiersplit> expr)

  tiersplit-expr-add-names(|prefix): expr -> expr'
    with
      (expr', _) := <topdown-fold-keep-anno(try(tiersplit-expr-add-name(|prefix)))> (expr, [])
 