module weblab

// A simplified model of a grade calculation and course statistics tool in the university.
//
// It features:
//  - weighted average grades, for example the course grade is 70% exam and 30% practical
//  - optional minimum grades, for example the exam and practical both need to be at least a 5.0 before a course grade is given
//  - optional deadlines and deadline extensions, if an assignment is turned in after a deadline but before the deadline extension a grade penalty is applied. If the assignment is turned in after the deadline extension, no grade.
//  - personal deadlines and deadline extensions, teachers can assign students a personal deadline
//  - assignment and course statistics

//  entity Student {
//    name       : String 1
//    
//    passedCourses : Int 1 = sum(enrollments.pass2)
//  }
//  
//  entity Course {
//    name       : String 1
//    
//    avgGrade   : Float?  = assignment.avgGrade
//    passPerc   : Float?  = assignment.passPerc
//    numStudents: Int 1     = count(enrollments)
//    
//    summary    : String 1  = "The course " + name + " has " + numStudents as String + " students, " +
//                           ("has a pass percentage of " + passPerc as String + "%" <+ "has no passing students") + ", and " +
//                           ("passing students have an average grade of " + avgGrade as String + "." <+ "has no average grade.")
//  }
//  
//  entity Enrollment {
//    name       : String 1  = course.name + " " +student.name
//    
//    grade      : Float?  = submission.grade
//    pass       : Boolean 1 = submission.pass
//    pass2      : Int 1     = pass ? 1 : 0
//  }
//  
//  relation Course.enrollments *  <-> 1 Enrollment.course
//  relation Student.enrollments * <-> 1 Enrollment.student
//  
//  entity Assignment {
//    name       : String 1
//    question   : String?
//    minimum    : Float?
//    weight     : Float 1   = 1.0 (default)
//    deadline   : Datetime? // deadline is optional
//    extension  : Datetime? // deadline extension is optional
//    latePenalty: Float?    // penalty for using the full deadline extension
//    
//    avgGrade   : Float?  = avg(submissions.grade)
//    passPerc   : Float?  = sum(submissions.passInt) / count(submissions) * 100.0
//  }
//  
//  entity Submission {
//    name       : String 1  = assignment.name + " " + student.name
//    answer     : String?
//    date       : Datetime?
//    
//    deadline   : Datetime? = assignment.deadline (default) // teacher can overrride the deadline for a specific student
//    extension  : Datetime? = assignment.extension (default) // teacher can override the deadline extension for a specific student
//    
//    onTime     : Boolean 1 = date <= deadline
//                           <+
//                           count(deadline)==0 || count(date)==1 // no deadline is always on time
//
//    onExtension: Boolean 1 = !onTime && date <= extension
//                           <+
//                           false // no extension means late, no submission date also means late
//
//    latePenalty: Float 1   = if(onExtension)
//                             (date - deadline) / (extension - deadline) * assignment.latePenalty
//                           else
//                             0.0
//                           <+
//                           0.0
//    
//    childGrade : Float?  = sum(children.gradeWeighted) / sum(assignment.children.weight)
//    baseGrade  : Float?  = switch {
//                             case childPass => childGrade
//                             default        => no value // if one of child assignments not passed, no grade in the parent assignment
//                           } (default)                  // if this a leaf assginment, then the grade is entered here
//    grade      : Float?  = switch {
//                             case onTime      => baseGrade
//                             case onExtension => baseGrade - latePenalty
//                             default          => no value
//                           }
//    gradeWeighted : Float? = grade * assignment.weight
//    
//    childPass  : Boolean 1 = conj(children.pass)
//    pass       : Boolean 1 = grade >= (assignment.minimum<+0.0) && childPass <+ false
//  
//    passInt    : Int 1     = if(pass) 1 else 0
//    best       : Boolean 1 = grade == max(assignment.submissions.grade) <+ false
//  }
//  
//  relation Assignment.parent     ? <-> * Assignment.children
//  relation Submission.parent     ? <-> * Submission.children
//  relation Submission.student    1 <-> * Student.submissions
//  relation Submission.assignment 1 <-> * Assignment.submissions
//  
//  relation Course.assignment     1 <-> ? Assignment.course
//  relation Enrollment.submission 1 <-> ? Submission.enrollment
