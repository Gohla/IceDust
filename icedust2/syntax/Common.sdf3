module Common

lexical syntax

  ID             = [a-zA-Z] [a-zA-Z0-9]* 
  INT            = "-"? [0-9]+ 
  STRING         = "\"" StringChar* "\"" 
  StringChar     = ~[\"\n] 
  StringChar     = "\\\"" 
  StringChar     = BackSlashChar 
  BackSlashChar  = "\\" 
  LAYOUT         = [\ \t\n\r] 
  CommentChar    = [\*] 
  LAYOUT         = "/*" InsideComment* "*/" 
  InsideComment  = ~[\*] 
  InsideComment  = CommentChar 
  LAYOUT         = "//" ~[\n\r]* NewLineEOF 
  NewLineEOF     = [\n\r] 
  NewLineEOF     = EOF 
  EOF            =  

lexical restrictions

  // Ensure greedy matching for lexicals
  
  CommentChar   -/- [\/]
  INT           -/- [0-9]
  ID            -/- [a-zA-Z0-9\_]
  
  // EOF may not be followed by any char
  
  EOF           -/- ~[]
  
  // Backslash chars in strings may not be followed by " 
  
  BackSlashChar -/- [\"]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]

lexical syntax // Keywords

  Keyword = "and"
  Keyword = "as"
  Keyword = "avg"
  Keyword = "Boolean"
  Keyword = "case"
  Keyword = "concat"
  Keyword = "conj"
  Keyword = "count"
  Keyword = "data"
  Keyword = "Datetime"
  Keyword = "default"
  Keyword = "disj"
  Keyword = "else"
  Keyword = "entity"
  Keyword = "execute"
  Keyword = "false"
  Keyword = "Float"
  Keyword = "if"
  Keyword = "Int"
  Keyword = "max"
  Keyword = "match"
  Keyword = "min"
  Keyword = "model"
  Keyword = "module"
  Keyword = "no"
  Keyword = "not"
  Keyword = "or"
  Keyword = "ordered"
  Keyword = "relation"
  Keyword = "String"
  Keyword = "sum"
  Keyword = "switch"
  Keyword = "this"
  Keyword = "true"
  Keyword = "unordered"
  
  ID = Keyword {reject}
  