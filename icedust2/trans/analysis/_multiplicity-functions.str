module analysis/_multiplicity-functions

imports
 
  static-semantics

signature constructors
  
  CartesianProduct : Type * Type -> TypeOp

rules

  nabl2-is-op-hook = ?CartesianProduct(_,_)
  
  nabl2-reduce-op-hook(|sol): CartesianProduct(TOne()       , a            ) -> a
  nabl2-reduce-op-hook(|sol): CartesianProduct(a            , TOne()       ) -> a
  nabl2-reduce-op-hook(|sol): CartesianProduct(TZeroOrMore(), _            ) -> TZeroOrMore()
  nabl2-reduce-op-hook(|sol): CartesianProduct(_            , TZeroOrMore()) -> TZeroOrMore()
  nabl2-reduce-op-hook(|sol): CartesianProduct(TOneOrMore() , TOneOrMore() ) -> TOneOrMore()
  nabl2-reduce-op-hook(|sol): CartesianProduct(TOneOrMore() , TZeroOrOne() ) -> TZeroOrMore()
  nabl2-reduce-op-hook(|sol): CartesianProduct(TZeroOrOne() , TOneOrMore() ) -> TOneOrMore()
  nabl2-reduce-op-hook(|sol): CartesianProduct(TZeroOrOne() , TZeroOrOne() ) -> TZeroOrOne()
  
signature constructors
  
  InBounds : Type * Type -> TypeOp // bounds * fits in bound?

rules

  nabl2-is-op-hook = ?InBounds(_,_)

  nabl2-reduce-op-hook(|sol): InBounds(a            , a     ) -> None()
  nabl2-reduce-op-hook(|sol): InBounds(TZeroOrMore(), _     ) -> None()
  nabl2-reduce-op-hook(|sol): InBounds(_            , TOne()) -> None()
  
signature constructors
  
  UpperboundOne : Type -> TypeOp

rules

  nabl2-is-op-hook = ?UpperboundOne(_)

  nabl2-reduce-op-hook(|sol): UpperboundOne(TOne()       ) -> TOne()
  nabl2-reduce-op-hook(|sol): UpperboundOne(TZeroOrOne() ) -> TZeroOrOne()
  nabl2-reduce-op-hook(|sol): UpperboundOne(TOneOrMore() ) -> TOne()
  nabl2-reduce-op-hook(|sol): UpperboundOne(TZeroOrMore()) -> TZeroOrOne()
  