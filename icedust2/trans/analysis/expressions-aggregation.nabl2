module expressions-aggregation

rules
  
  [[ Min(e1) ^ (s) : TTuple(e1_type, out_mult) ]] :=
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult) ]],
    NumericType(e1_type) == None(),
    UpperboundOne(e1_mult) == out_mult.
    
  [[ Max(e1) ^ (s) : TTuple(e1_type, out_mult) ]] := // identical to Min
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult) ]],
    NumericType(e1_type) == None(),
    UpperboundOne(e1_mult) == out_mult.
    
  [[ Avg(e1) ^ (s) : TTuple(e1_type, out_mult) ]] := // identical to Min
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult) ]],
    NumericType(e1_type) == None(),
    UpperboundOne(e1_mult) == out_mult.
    
  [[ Sum(e1) ^ (s) : TTuple(e1_type, TOne()) ]] :=
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult) ]],
    NumericType(e1_type) == None().
    
  [[ Conj(e1) ^ (s) : TTuple(e1_type, TOne()) ]] :=
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult) ]],
    BooleanType(e1_type) == None().
    
  [[ Disj(e1) ^ (s) : TTuple(e1_type, TOne()) ]] := // identical to Conj
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult) ]],
    BooleanType(e1_type) == None().
    
  [[ Concat(e1) ^ (s) : TTuple(e1_type, TOne()) ]] :=
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult) ]],
    StringType(e1_type) == None().

  [[ Count(e1) ^ (s) : TTuple(TInt(), TOne()) ]] :=
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult) ]],
    IsType(e1_type) == None(). // make sure this evaluates
    