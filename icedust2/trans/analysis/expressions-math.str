module analysis/expressions-math

imports
 
  static-semantics

  signatures/Expressions-sig

signature constructors
  
  AdditionType : Type -> TypeOp

rules

  nabl2-is-op-hook = ?AdditionType(_)
  
  nabl2-reduce-op-hook(|sol): AdditionType(TInt()    ) -> None()
  nabl2-reduce-op-hook(|sol): AdditionType(TFloat()  ) -> None()
  nabl2-reduce-op-hook(|sol): AdditionType(TString() ) -> None()
  nabl2-reduce-op-hook(|sol): AdditionType(TNoValue()) -> None()

signature constructors
  
  SubtractionType : Type -> TypeOp
  
rules

  nabl2-is-op-hook = ?SubtractionType(_)
  
  nabl2-reduce-op-hook(|sol): SubtractionType(TInt()     ) -> TInt()
  nabl2-reduce-op-hook(|sol): SubtractionType(TFloat()   ) -> TFloat()
  nabl2-reduce-op-hook(|sol): SubtractionType(TDatetime()) -> TInt()
  nabl2-reduce-op-hook(|sol): SubtractionType(TNoValue() ) -> TNoValue()

signature constructors
  
  DivisionType : Type -> TypeOp
  
rules

  nabl2-is-op-hook = ?DivisionType(_)
  
  nabl2-reduce-op-hook(|sol): DivisionType(TInt()     ) -> None()
  nabl2-reduce-op-hook(|sol): DivisionType(TFloat()   ) -> None()
  nabl2-reduce-op-hook(|sol): DivisionType(TNoValue() ) -> None()

signature constructors
  
  DivisionMult : Type * Term -> TypeOp //least-upper-bound mult * division term
  
rules

  nabl2-is-op-hook = ?DivisionMult(_, _)
  
  nabl2-reduce-op-hook(|sol): DivisionMult(TZeroOrOne() , _) -> TZeroOrOne()
  nabl2-reduce-op-hook(|sol): DivisionMult(TZeroOrMore(), _) -> TZeroOrMore()
  nabl2-reduce-op-hook(|sol): DivisionMult(TOne()       , t) -> TOne()        where <non-zero-const>t
  nabl2-reduce-op-hook(|sol): DivisionMult(TOneOrMore() , t) -> TOneOrMore()  where <non-zero-const>t
  nabl2-reduce-op-hook(|sol): DivisionMult(TOne()       , t) -> TZeroOrOne()  where <not(non-zero-const)>t
  nabl2-reduce-op-hook(|sol): DivisionMult(TOneOrMore() , t) -> TZeroOrMore() where <not(non-zero-const)>t
  
  non-zero-const = ?Int(c)  ;where(!c;not(?"0"))
  non-zero-const = ?Float(c);where(!c;not(?"0.0"))
