module expressions

imports

  signatures/-

rules

  [[ Ref(r) ^ (s) : r_def_ty ]] :=
    Member{r} -> s,
    Member{r} |-> r_def,
    r_def : r_def_ty.
      
  [[ MemberAccess(expr, r) ^ (s) : TTuple(r_def_type, ref_mult) ]] :=
    [[expr ^ (s) : TTuple(expr_type, expr_mult) ]],
    expr_type == TEntity(expr_type_entity),
    expr_type_entity ?=I=> entity_scope,
    new_scope -I-> entity_scope,
    Member{r} -> new_scope,
    Member{r} |-> r_def,
    r_def : TTuple(r_def_type, r_def_mult),
    CartesianProduct(expr_mult, r_def_mult) == ref_mult,
    new new_scope.
   