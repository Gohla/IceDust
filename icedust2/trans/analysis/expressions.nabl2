module expressions

imports

  signatures/-

rules

  [[ This() ^ (s) : TTuple(this_type, TOne()) ]] :=
    Implicit{"this"} -> s,
    Implicit{"this"} |-> this_def,
    this_def : this_type.

  [[ Ref(r) ^ (s) : r_def_ty ]] :=
    Member{r} -> s,
    Member{r} |-> r_def,
    r_def : r_def_ty.
      
  [[ MemberAccess(expr, r) ^ (s) : TTuple(r_def_type, ref_mult) ]] :=
    [[expr ^ (s) : TTuple(expr_type, expr_mult) ]],
    expr_type == TEntity(expr_type_entity),
    expr_type_entity ?=I=> entity_scope,
    new_scope -I-> entity_scope,
    Member{r} -> new_scope,
    Member{r} |-> r_def,
    r_def : TTuple(r_def_type, r_def_mult),
    CartesianProduct(expr_mult, r_def_mult) == ref_mult,
    new new_scope.

  [[ Int(_)       ^ (s) : TTuple(TInt()     , TOne()      ) ]] := true.
  [[ Float(_)     ^ (s) : TTuple(TFloat()   , TOne()      ) ]] := true.
  [[ True()       ^ (s) : TTuple(TBoolean() , TOne()      ) ]] := true.
  [[ False()      ^ (s) : TTuple(TBoolean() , TOne()      ) ]] := true.
  [[ Datetime(_)  ^ (s) : TTuple(TDatetime(), TOne()      ) ]] := true.
  [[ LitString(_) ^ (s) : TTuple(TString()  , TOne()      ) ]] := true.
  [[ NoValue()    ^ (s) : TTuple(TNoValue() , TZeroOrOne()) ]] := true.
  