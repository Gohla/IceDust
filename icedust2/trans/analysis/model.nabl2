module model

imports

  signatures/-

rules
    
  [[ Module(m, es) ^ (init_scope) ]] :=
    !D(module_scope)/Entity | error "Duplicate entity" @NAMES,
    Module{m} <- init_scope,
    module_scope ---> init_scope,
    Module{m} ===> module_scope,
    Map1 [[ es ^ (module_scope) ]],
    new module_scope. 

  [[ Entity(e, as) ^ (module_scope) ]] :=
    !D(entity_scope)/Attribute | error "Duplicate attribute" @NAMES,
    Entity{e} <- module_scope,
    entity_scope ---> module_scope,
    Entity{e} ===> entity_scope,
    Entity{e} : TEntity(Entity{e}),
    Map1 [[ as ^ (entity_scope) ]],
    Entity2{e} -> module_scope,   // matches 0 or more times, one for each relation (like partial class definition)
    Entity2{e} <=I= entity_scope, // import all from that reference
    new entity_scope.
    
  [[ Relation(e1, r1, m1, m2, e2, r2) ^ (module_scope) ]] :=
    Entity2{e1} <- module_scope,
    Entity2{e1} ===> entity1_scope,
    Member{r1} <- entity1_scope,
    Entity{e1} -> module_scope,
    Entity{e1} |-> e1_def,
    e1_def : e1_type,
    [[m1 ^ (module_scope) : m1_mult ]],
    Member{r1} : TTuple(e2_type, m1_mult),
    Entity2{e2} <- module_scope,
    Entity2{e2} ===> entity2_scope,
    Member{r2} <- entity2_scope,
    Entity{e2} -> module_scope,
    Entity{e2} |-> e2_def,
    e2_def : e2_type,
    [[m2 ^ (module_scope) : m2_mult ]],
    Member{r2} : TTuple(e1_type, m2_mult),
    new entity1_scope,
    new entity2_scope.
    
  [[ Attribute(a, t, m) ^ (entity_scope) ]] :=
    Member{a} <- entity_scope,
    Member{a} : TTuple(a_type, a_mult),
    [[ t ^ (entity_scope) : a_type ]],
    [[ m ^ (entity_scope) : a_mult ]].
    
  [[ DerivationAttribute(a, t, m, e) ^ (entity_scope) ]] :=
    Member{a} <- entity_scope,
    Member{a} : TTuple(a_type, a_mult),
    [[ t ^ (entity_scope) : a_type ]],
    [[ m ^ (entity_scope) : a_mult ]],
    [[ e ^ (entity_scope) : TTuple(e_type, e_mult) ]],
    IsSubtype(a_type, e_type) == None() | error $[Type error: expected [a_type] got [e_type].]@e,
    InBounds (a_mult, e_mult) == None() | error $[Multiplicity error: expected [a_mult] got [e_mult].]@e.
    
  [[ DefaultAttribute(a, t, m, e) ^ (entity_scope) ]] :=
    Member{a} <- entity_scope,
    Member{a} : TTuple(a_type, a_mult),
    [[ t ^ (entity_scope) : a_type ]],
    [[ m ^ (entity_scope) : a_mult ]],
    [[ e ^ (entity_scope) : TTuple(e_type, e_mult) ]],
    IsSubtype(a_type, e_type) == None() | error $[Type error: expected [a_type] got [e_type].]@e,
    InBounds (a_mult, e_mult) == None() | error $[Multiplicity error: expected [a_mult] got [e_mult].]@e.
   