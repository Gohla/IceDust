module api/types-api

imports // signatures

  signatures/Types-sig

rules

  is-type = ?Boolean()
  is-type = ?Float()
  is-type = ?Datetime()
  is-type = ?Int()
  is-type = ?String()

  is-multiplicity = ?One()
  is-multiplicity = ?ZeroOrOne()
  is-multiplicity = ?OneOrMore()
  is-multiplicity = ?ZeroOrMore()

  is-ordering = ?Ordered()
  is-ordering = ?Unordered()

rules

  pp2-type = ?Boolean();!"Boolean"
  pp2-type = ?Float();!"Float"
  pp2-type = ?Int();!"Int"
  pp2-type = ?String();!"String"
  pp2-type = ?Datetime();!"Datetime"
  pp2-type = where(is-string)
  
  pp2-multiplicity = ?One();!""
  pp2-multiplicity = ?ZeroOrOne();!"?"
  pp2-multiplicity = ?OneOrMore();!"+"
  pp2-multiplicity = ?ZeroOrMore();!"*"
  
  pp2-type-multiplicity = ?(type, multiplicity);!$[[<pp2-type>type][<pp2-multiplicity>multiplicity]]

rules // predicates over multiplcities
  
  upper-one  = ?ZeroOrOne()
  upper-one  = ?One()
  upper-many = ?ZeroOrMore()
  upper-many = ?OneOrMore()
  lower-zero = ?ZeroOrOne()
  lower-zero = ?ZeroOrMore()
  lower-one  = ?One()
  lower-one  = ?OneOrMore()
  nullable   = lower-zero

rules
  
  mult-inbounds(|multiplicity) = where(!multiplicity => ZeroOrMore())
  mult-inbounds(|multiplicity) = where(!multiplicity => OneOrMore()) ;?i ;where(!(i,1);geq)
  mult-inbounds(|multiplicity) = where(!multiplicity => ZeroOrOne()) ;?i ;where(!(i,1);leq)
  mult-inbounds(|multiplicity) = where(!multiplicity => One())       ;?i ;where(!(i,1);eq)
  
rules

  ordered = ?Ordered()
  unordered = ?Unordered()
