module analysis

imports
  
  nabl2shared
  nabl2runtime
  
  static-semantics

  editor/pp

  analysis/_constructors
  analysis/_multiplicity-functions
  analysis/_type-functions
  analysis/expressions-aggregation
  analysis/expressions-casts
  analysis/expressions-logic
  analysis/expressions-math
  analysis/expressions-multiplicity-operators

  desugaring/desugar
  
  analysis2/analysis2

rules // Analysis: NaBL2 hooks

  editor-analyze = nabl2-analyze(desugar-before-analysis)

  nabl2-ignore-unused-references-hook = ?Namespace("Entity2")
  nabl2-ignore-unused-references-hook = ?Namespace("Member2")

//  debug-generate-constraint = id

  nabl2-debug-analysis-hook = id
  
  nabl2-custom-analysis-unit-hook: (resource, ast, customInitialResult) -> customUnitResult
    with
      customUnitResult := (resource, ast)
  
  nabl2-custom-analysis-final-hook(|a):(resource , customInitialResult, customUnitResult*) -> (error*, warning*, note*, customFinalResult)
    with
      ast := <Hd;Snd>customUnitResult*
      ;<debug>ast
    with
      (error*, warning*, note*, customFinalResult) := <nabl2-after-analysis(|resource,ast)>a
      ;<debug>(error*, warning*, note*, customFinalResult)

rules // Debugging
  
  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path
       ; result   := selected

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path
       ; result   := selected


