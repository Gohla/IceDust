module lib/nabl2

imports // functions

  api/_generated
  api/_runtime
  lib/debug

signature constructors

  Occurrence : Namespace * String * TermIndex -> Occurrence
  Namespace : String -> Namespace
  TermIndex : String * Int -> TermIndex
  Key : String -> Key

  
rules
  
  store-analysis: path -> None()
    with
      analysis := <_get-analysis>$[[<_project-path>]/[path]];
      rules(StoredAnalysis : None() -> analysis)
  
  get-stored-analysis = !None();StoredAnalysis <+ (!"Error: Analysis is not stored. Please store with <store-analysis>path.";debug;fail)    
  get-stored-analysis-p = get-stored-analysis;_sol-p
  get-stored-analysis-g = get-stored-analysis;sol-g

rules // String (with attachment) -> Ast

  string-get-prop(|namespace, key) = ?x;get-stored-analysis;?analysis;!x;string-get-prop(|analysis, namespace, key)

  string-get-prop(|analysis, namespace, key) = string-get-occurrence(|namespace);occurence-get-prop(|analysis, key)
  
  string-get-occurrence(|namespace) = ?x;!Occurrence(Namespace(namespace),x,<_get-ast-index>x)
  
  occurrence-get-string = ?Occurrence(_, <id>, _)
  name-get-string       = ?Name(_ ,<id>)
  
  occurence-get-prop(|analysis, key) = get-property(|analysis, key)

rules

  string-get-assoc-scope(|namespace) = string-get-occurrence(|namespace);occurrence-get-assoc-scope
  
  occurrence-get-assoc-scope = ?o;get-stored-analysis-g;?g;!(g,o);G-assocs;Hd;Snd
  
  scope-get-decls            = ?s;get-stored-analysis-g;?g;!(g,s);G-decls;map(occurrence-get-string)
  
  scope-get-reachables(|ns)  = ?s;get-stored-analysis-g;?g;!Reachables(s,Namespace(ns));get-names(|g);map(name-get-string)
  
rules

  string-get-scope(|namespace) = string-get-occurrence(|namespace);occurrence-get-scope
  
  occurrence-get-scope = ?o;get-stored-analysis-g;?g;!(g,o);(G-ref-scope<+G-decl-scope)

rules

  scope-get-assoc-occurrence = ?s;get-stored-analysis-g;?g;!(g,s);G-scope-assocs;Hd;Fst
  
  scope-get-assoc-string = scope-get-assoc-occurrence;occurrence-get-string

  
rules // TODO remove

  G-refs             = ?G(<id>,_) ; map(?(_,<id>);?S(_,<id>,_,_)) ; concat
  G-scope            = ?(G(<id>,_),r) ; getfirst(G-scope_exists(|r))
  G-scope_exists(|r) = ?(s,S(_,r*,_,_)) ; <elem> (r,r*) ; !s
  G-decls            = ?(G(s*,_),s) ; <lookup> (s,s*) ; ?S(<id>,_,_,_)
  G-refs             = ?(G(s*,_),s) ; <lookup> (s,s*) ; ?S(_,<id>,_,_)
  G-direct-edges     = ?(G(s*,_),s) ; <lookup> (s,s*) ; ?S(_,_,<id>,_)
  G-named-edges      = ?(G(s*,_),s) ; <lookup> (s,s*) ; ?S(_,_,_,<id>)
  G-assocs           = ?(G(_,a*),d) ; <lookup> (d,a*)
  G-ref-scope = ?(G(<id>,_),r) ; getfirst(\ (s,S(_,r*,_,_)) -> s where <elem> (r,r*) \)
  G-decl-scope = ?(G(<id>,_),d) ; getfirst(\ (s,S(d*,_,_,_)) -> s where <elem> (d,d*) \)
  G-scope-assocs = ?(G(_,<id>),s) ; filter(\ (d,ls*) -> <filter(\(l,s') -> (d,l) where <eq> (s,s')\)>ls* \);flatten-list
  
  get-names(|g): Reachables(s,ns) -> n*
    where <is-ground> s;
          (Total(),e*) := <env(empty-lt|<labels-wf>,g,[],[])> s
    with  n* := <values;concat;map(Fst);
                 filter-ns(|ns);
                 map(occurrence-atom)> e*
