module static-semantics

imports

  signatures/-

signature

  types

    TBoolean()
    TDatetime()
    TFloat()
    TInt()
    TString()
    TEntity(occurrence)
    
    TOne()
    TZeroOrOne()
    TOneOrMore()
    TZeroOrMore()
    
    TTuple(type, type)
    
//    CartesianProduct(type, type)

rules

  init ^ (init_scope) :=
//    CartesianProduct{(TOne(),        TOne())} <- init_scope, CartesianProduct{(TOne(),        TOne())}  : TOne(), 
//    CartesianProduct{(TZeroOrMore(), TOne())} <- init_scope, CartesianProduct{(TZeroOrMore(), TOne())}  : TZeroOrMore(), 
    new init_scope.
    
  [[ Module(m, es) ^ (init_scope) ]] :=
    !D(module_scope)/Entity | error "Duplicate entity" @NAMES,
    Module{m} <- init_scope,
    module_scope ---> init_scope,
    Module{m} ===> module_scope,
    false | note "Some message on the module name..." @m,
    Map1 [[ es ^ (module_scope) ]],
    new module_scope. 

  [[ Entity(e, as) ^ (module_scope) ]] :=
    !D(entity_scope)/Attribute | error "Duplicate attribute" @NAMES,
    Entity{e} <- module_scope,
    entity_scope ---> module_scope,
    Entity{e} ===> entity_scope,
    Entity{e} : TEntity(Entity{e}),
    Map1 [[ as ^ (entity_scope) ]],
    Entity2{e} -> module_scope,   // matches 0 or more times, one for each relation (like partial class definition)
    Entity2{e} <=I= entity_scope, // import all from that reference
    new entity_scope.
    
  [[ Relation(e1, r1, m1, m2, e2, r2) ^ (module_scope) ]] :=
    Entity2{e1} <- module_scope,
    Entity2{e1} ===> entity1_scope,
    Member{r1} <- entity1_scope,
    Entity{e1} -> module_scope,
    Entity{e1} |-> e1_def,
    e1_def : e1_type,
    [[m1 ^ (module_scope) : m1_mult ]],
    Member{r1} : TTuple(e2_type, m1_mult),
    Entity2{e2} <- module_scope,
    Entity2{e2} ===> entity2_scope,
    Member{r2} <- entity2_scope,
    Entity{e2} -> module_scope,
    Entity{e2} |-> e2_def,
    e2_def : e2_type,
    [[m2 ^ (module_scope) : m2_mult ]],
    Member{r2} : TTuple(e1_type, m2_mult),
    new entity1_scope,
    new entity2_scope.
    
  [[ Attribute(a, t, m) ^ (entity_scope) ]] :=
    Member{a} <- entity_scope,
    Member{a} : TTuple(a_type, a_mult),
    [[ t ^ (entity_scope) : a_type ]],
    [[ m ^ (entity_scope) : a_mult ]].
    
  [[ Attribute(a, t, m, e) ^ (entity_scope) ]] :=
    Member{a} <- entity_scope,
    Member{a} : TTuple(a_type, a_mult),
    [[ t ^ (entity_scope) : a_type ]],
    [[ m ^ (entity_scope) : a_mult ]],
    [[ e ^ (entity_scope) : TTuple(e_type, e_mult) ]],
    e_type == a_type | error $[Type error: expected [a_type] got [e_type].]@e,
    e_mult == a_mult | error $[Multiplicity error: expected [a_mult] got [e_mult].]@e.
  
  [[ Ref(r) ^ (s) : r_def_ty ]] :=
    Member{r} -> s,
    Member{r} |-> r_def,
    r_def : r_def_ty.
      
  [[ Ref(expr, r) ^ (s) : TTuple(r_def_type, ref_mult) ]] :=
    [[expr ^ (s) : TTuple(expr_type, expr_mult) ]],
    expr_type == TEntity(expr_type_entity),
    expr_type_entity ?=I=> entity_scope,
    new_scope -I-> entity_scope,
    Member{r} -> new_scope,
    Member{r} |-> r_def,
    r_def : TTuple(r_def_type, r_def_mult),
    ref_mult == r_def_mult, //TODO r_def_mult * expr_mult
//    CartesianProduct(r_def_mult, expr_mult, ref_mult) == CartesianProduct(r_def_mult, expr_mult, ref_mult),
//    cp == CartesianProduct{(r_def_mult, expr_mult)},
//    CartesianProduct{(r_def_mult, expr_mult)} : ref_mult,
    new new_scope.
  
  [[ EntityType(e) ^ (s) : TEntity(e_def) ]] :=
    Entity{e} -> s,
    Entity{e} |-> e_def.

  [[ Boolean()    ^ (s) : ty ]] := ty == TBoolean().
  [[ Datetime()   ^ (s) : ty ]] := ty == TDatetime().
  [[ Float()      ^ (s) : ty ]] := ty == TFloat().
  [[ Int()        ^ (s) : ty ]] := ty == TInt().
  [[ String()     ^ (s) : ty ]] := ty == TString().

  [[ One()        ^ (s) : ty ]] := ty == TOne().
  [[ ZeroOrOne()  ^ (s) : ty ]] := ty == TZeroOrOne().
  [[ OneOrMore()  ^ (s) : ty ]] := ty == TOneOrMore().
  [[ ZeroOrMore() ^ (s) : ty ]] := ty == TZeroOrMore().
   
//  [[ CartesianProduct(TOne(),        TOne()        ) ^ (s) : TOne()        ]] := true.
//  [[ CartesianProduct(TOne(),        TZeroOrOne()  ) ^ (s) : TZeroOrOne()  ]] := true.
//  [[ CartesianProduct(TOne(),        TOneOrMore()  ) ^ (s) : TOneOrMore()  ]] := true.
//  [[ CartesianProduct(TOne(),        TZeroOrMore() ) ^ (s) : TZeroOrMore() ]] := true.
//  [[ CartesianProduct(TZeroOrOne(),  TOne()        ) ^ (s) : TZeroOrOne()  ]] := true.
//  [[ CartesianProduct(TZeroOrOne(),  TZeroOrOne()  ) ^ (s) : TZeroOrOne()  ]] := true.
//  [[ CartesianProduct(TZeroOrOne(),  TOneOrMore()  ) ^ (s) : TZeroOrMore() ]] := true.
//  [[ CartesianProduct(TZeroOrOne(),  TZeroOrMore() ) ^ (s) : TZeroOrMore() ]] := true.
//  [[ CartesianProduct(TOneOrMore(),  TOne()        ) ^ (s) : TOneOrMore()  ]] := true.
//  [[ CartesianProduct(TOneOrMore(),  TZeroOrOne()  ) ^ (s) : TZeroOrMore() ]] := true.
//  [[ CartesianProduct(TOneOrMore(),  TOneOrMore()  ) ^ (s) : TOneOrMore()  ]] := true.
//  [[ CartesianProduct(TOneOrMore(),  TZeroOrMore() ) ^ (s) : TZeroOrMore() ]] := true.
//  [[ CartesianProduct(TZeroOrMore(), TOne()        ) ^ (s) : TZeroOrMore() ]] := true.
//  [[ CartesianProduct(TZeroOrMore(), TZeroOrOne()  ) ^ (s) : TZeroOrMore() ]] := true.
//  [[ CartesianProduct(TZeroOrMore(), TOneOrMore()  ) ^ (s) : TZeroOrMore() ]] := true.
//  [[ CartesianProduct(TZeroOrMore(), TZeroOrMore() ) ^ (s) : TZeroOrMore() ]] := true.
  
//  [[ CartesianProduct(TOne(),        TOne(),        TOne()       ) ^ (s) ]] := true.
//  [[ CartesianProduct(TOne(),        TZeroOrOne(),  TZeroOrOne() ) ^ (s) ]] := true.
//  [[ CartesianProduct(TOne(),        TOneOrMore(),  TOneOrMore() ) ^ (s) ]] := true.
//  [[ CartesianProduct(TOne(),        TZeroOrMore(), TZeroOrMore()) ^ (s) ]] := true.
//  [[ CartesianProduct(TZeroOrOne(),  TOne(),        TZeroOrOne() ) ^ (s) ]] := true.
//  [[ CartesianProduct(TZeroOrOne(),  TZeroOrOne(),  TZeroOrOne() ) ^ (s) ]] := true.
//  [[ CartesianProduct(TZeroOrOne(),  TOneOrMore(),  TZeroOrMore()) ^ (s) ]] := true.
//  [[ CartesianProduct(TZeroOrOne(),  TZeroOrMore(), TZeroOrMore()) ^ (s) ]] := true.
//  [[ CartesianProduct(TOneOrMore(),  TOne(),        TOneOrMore() ) ^ (s) ]] := true.
//  [[ CartesianProduct(TOneOrMore(),  TZeroOrOne(),  TZeroOrMore()) ^ (s) ]] := true.
//  [[ CartesianProduct(TOneOrMore(),  TOneOrMore(),  TOneOrMore() ) ^ (s) ]] := true.
//  [[ CartesianProduct(TOneOrMore(),  TZeroOrMore(), TZeroOrMore()) ^ (s) ]] := true.
//  [[ CartesianProduct(TZeroOrMore(), TOne(),        TZeroOrMore()) ^ (s) ]] := true.
//  [[ CartesianProduct(TZeroOrMore(), TZeroOrOne(),  TZeroOrMore()) ^ (s) ]] := true.
//  [[ CartesianProduct(TZeroOrMore(), TOneOrMore(),  TZeroOrMore()) ^ (s) ]] := true.
//  [[ CartesianProduct(TZeroOrMore(), TZeroOrMore(), TZeroOrMore()) ^ (s) ]] := true.
   