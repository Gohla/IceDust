module books

model

	entity Book{
		title : String
	}
	
	entity Reader{
		name : String
	}
	
	entity Lender{
		numSubscribers : Int = count(subscriber)
		maxSubscribers : Int
		maxSubscribersReached : Boolean = numSubscribers >= maxSubscribers
	}
	
	relation Own{
		Lender * owner 
		Book 1 holding
	}
	
	relation Borrow{
		Reader * borrower
		Book ? borrowed
	}
	relation Subscribe{
		Reader * subscriber
		Lender * 
	}

rules

	// ensure reader is subscribed to lender	
	subscribe(lender:Lender, reader:Reader)
			?[lender subscriber reader.]
		->
			lender subscriber reader.

	// only subscribe if not subscribed yet	
	subscribe2(lender:Lender, reader:Reader)
	->
	?[
			0[lender subscriber reader.]
		->
			lender subscriber reader.	
	]
	
	// only subscribe if not subscribed yet	and max subscribers is not reached yet=
	subscribe3(lender:Lender, reader:Reader)
	->
	?[
			lender{maxSubscribersReached=false}.
			0[lender subscriber reader.]
		->
			lender subscriber reader.	
	]

	// only borrow if nobody else borrowed
	borrow(book:Book, reader:Reader)
			0[book borrower other.]
		->
			book borrower reader.
	
	// if somebody else borrowed he returns it	
	borrow2(book:Book, reader:Reader)
		->
			book borrower reader.
		?[
				book borrower other. -> other.
		]
		
// 	borrow2a(book:Book, reader:Reader)
// 			0[book borrower other.]
// 		->
// 			book borrower reader.
// 
// 	borrow2b(book:Book, reader:Reader)
// 			book borrower other.
// 		->
// 			book borrower reader.
// 			other.
// 
//	borrow2 = borrow2b +> borrow2a	
			
	
	return(book:Book)
			book borrower reader.
		->
			book.
			reader.
