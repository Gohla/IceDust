module generate-weblab

language Relations

setup Common [[

module weblabTest

model

  entity Student {
    name : String  
  }

  entity Course {
    avgGrade : Int? = avg( enrollment.grade )
    passPerc : Int? = 100 * count(enrollment.pass2) / count(enrollment)
  }

  relation Enrollment {
    Course * 
    Student *
    
    pass  : Boolean = studentAssignment.pass
    pass2 : Int     = pass?1:0
    grade : Int?    = studentAssignment.grade
  }

  entity Assignment {
    gradeMinimum  : Int = 55 (default)
    gradeWeight   : Int = 1  (default)
    
    deadline      : Int? // day since start academic year
    extension     : Int?
    extensionDays : Int? = extension - deadline
    penalty       : Int? // for using the full extension
  }

  relation Submission {
    Student * 
    Assignment * 

    grade        : Int    // between 10 (min) and 100 (max)
    date         : Int?
    extension    : Int? = assignment.extension (default)
    
    gradePanelty : Int? = assignment.penalty*lateDays/assignment.extensionDays
    gradeReal    : Int? = onTime      ? grade :
                          onExtension ? grade - gradePanelty :
                          noValue
    
    lateDays     : Int? = date - assignment.deadline
    
    onTime       : Boolean = date <= assignment.deadline
                             <+ 
                             count(date)==1 || count(assignment.deadline)==0

    onExtension  : Boolean = date <= extension && !onTime
                             <+
                             count(date)==1 || count(extension)==0
    noValue : Int?
  }
  
  relation CourseAssignments {
    Course 1 
    Assignment ?
  }
  
  relation AssignmentPart {
    Assignment * whole <- wholeAssignment
    Assignment ? part  <- partAssignment
  }
  
  entity StudentAssignment {
    pass            : Boolean = passGrade && passParts
    
    passGrade       : Boolean = grade >= assignment.gradeMinimum <+ false
    passParts       : Boolean = conj( part.pass ) <+ true 
    
    grade           : Int? = passParts ? (gradeSubmission <+ gradeParts) : noValue
    
    gradeWeighted   : Int? = grade * assignment.gradeWeight
    
    gradeSubmission : Int? = submission.gradeReal
    gradeParts      : Int? = count(part)==count(part.grade)
                             ? sum ( part.gradeWeighted ) / 
                               sum ( assignment.part.gradeWeight )
                             : noValue
    
    noValue : Int?
  }
  
  relation StudentAssignmentPart {
    StudentAssignment * whole <- wholeAssignment
    StudentAssignment ? part  <- partAssignment
  }
  
  relation SA_E {
    StudentAssignment ? Enrollment 1
  }

  relation SA_S {
    StudentAssignment ? Submission 1
  }

  relation SA_A {
    StudentAssignment 1 Assignment *
  }

data
 
  Student alice   { name="Alice"   }
  Student bob     { name="Bob"     }
  Student charlie { name="Charlie" }

  Course compiler { }

  Enrollment enA { student:alice   course:compiler }
  Enrollment enB { student:bob     course:compiler }
  Enrollment enC { student:charlie course:compiler }

  Assignment comp       { }
  Assignment exam       { gradeWeight=2 gradeMinimum=60 }
  Assignment practical  { gradeWeight=1 gradeMinimum=60 }
  Assignment practicalA { gradeWeight=2 gradeMinimum=50 deadline=7 }
  Assignment practicalB { gradeWeight=3 gradeMinimum=50 deadline=14 extension=16 penalty=20 }

  CourseAssignments { course:compiler assignment:comp }

  AssignmentPart { whole:comp      part:exam       }
  AssignmentPart { whole:comp      part:practical  }
  AssignmentPart { whole:practical part:practicalA }
  AssignmentPart { whole:practical part:practicalB }

  Submission sa1 { student:alice   assignment:practicalA grade=50  date=7  }
  Submission sa2 { student:alice   assignment:practicalB grade=90  date=13 }
  Submission sa3 { student:alice   assignment:exam       grade=60          }
  Submission sb1 { student:bob     assignment:practicalA grade=50  date=7  }
  Submission sb2 { student:bob     assignment:practicalB grade=60  date=10 }
  Submission sb3 { student:bob     assignment:exam       grade=100         }
  Submission sc1 { student:charlie assignment:practicalA grade=88  date=7  }
  Submission sc2 { student:charlie assignment:practicalB grade=76  date=15 }
  Submission sc3 { student:charlie assignment:exam       grade=98          }
  
  // these entities and relations should be derived
  StudentAssignment aComp   { }
  StudentAssignment aExam   { }
  StudentAssignment aPract  { }
  StudentAssignment aPractA { }
  StudentAssignment aPractB { }
  StudentAssignment bComp   { }
  StudentAssignment bExam   { }
  StudentAssignment bPract  { }
  StudentAssignment bPractA { }
  StudentAssignment bPractB { }
  StudentAssignment cComp   { }
  StudentAssignment cExam   { }
  StudentAssignment cPract  { }
  StudentAssignment cPractA { }
  StudentAssignment cPractB { }
  
  StudentAssignmentPart { whole:aComp  part:aExam   }
  StudentAssignmentPart { whole:aComp  part:aPract  }
  StudentAssignmentPart { whole:aPract part:aPractA }
  StudentAssignmentPart { whole:aPract part:aPractB }
  StudentAssignmentPart { whole:bComp  part:bExam   }
  StudentAssignmentPart { whole:bComp  part:bPract  }
  StudentAssignmentPart { whole:bPract part:bPractA }
  StudentAssignmentPart { whole:bPract part:bPractB }
  StudentAssignmentPart { whole:cComp  part:cExam   }
  StudentAssignmentPart { whole:cComp  part:cPract  }
  StudentAssignmentPart { whole:cPract part:cPractA }
  StudentAssignmentPart { whole:cPract part:cPractB }

  SA_E { studentAssignment:aComp   enrollment:enA }
  SA_E { studentAssignment:bComp   enrollment:enB }
  SA_E { studentAssignment:cComp   enrollment:enC }

  SA_S { studentAssignment:aPractA submission:sa1 }
  SA_S { studentAssignment:aPractB submission:sa2 }
  SA_S { studentAssignment:aExam   submission:sa3 }
  SA_S { studentAssignment:bPractA submission:sb1 }
  SA_S { studentAssignment:bPractB submission:sb2 }  
  SA_S { studentAssignment:bExam   submission:sb3 }
  SA_S { studentAssignment:cPractA submission:sc1 }
  SA_S { studentAssignment:cPractB submission:sc2 }
  SA_S { studentAssignment:cExam   submission:sc3 }
  
  SA_A { studentAssignment:aComp   assignment:comp       }
  SA_A { studentAssignment:aExam   assignment:exam       }
  SA_A { studentAssignment:aPract  assignment:practical  }
  SA_A { studentAssignment:aPractA assignment:practicalA }
  SA_A { studentAssignment:aPractB assignment:practicalB }
  SA_A { studentAssignment:bComp   assignment:comp       }
  SA_A { studentAssignment:bExam   assignment:exam       }
  SA_A { studentAssignment:bPract  assignment:practical  }
  SA_A { studentAssignment:bPractA assignment:practicalA }
  SA_A { studentAssignment:bPractB assignment:practicalB }
  SA_A { studentAssignment:cComp   assignment:comp       }
  SA_A { studentAssignment:cExam   assignment:exam       }
  SA_A { studentAssignment:cPract  assignment:practical  }
  SA_A { studentAssignment:cPractA assignment:practicalA }
  SA_A { studentAssignment:cPractB assignment:practicalB }

execute

  compiler.avgGrade

]]

// test Weblab generate-java [[ ]] build generate-java-test

// test Weblab compile-java [[ ]] build compile-java-test

test Weblab execute-java [[ ]] build execute-java-test to "77"
