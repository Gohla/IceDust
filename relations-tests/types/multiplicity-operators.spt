module types-multiplicity-operators

language Relations

setup Common [[
	module test
	model
	entity X{
		i : Int ?
	}
	data
	X x{}
	execute
]]

test type of choice Int		[[ [[4 <+ 3]] 		]] run get-type to Int
test type of choice String[[ [["a" <+ "b"]] ]] run get-type to String

test type of merge Int		[[ [[4 :: 3]] 		]] run get-type to Int
test type of merge String	[[ [["a" :: "b"]] ]] run get-type to String

test multiplicity of ZeroOrOne	merge ZeroOrOne	[[ [[x.i 				:: x.i]] 				]] run get-multiplicity to ZeroOrMore
test multiplicity of ZeroOrOne	merge One				[[ [[x.i 				:: 3]] 					]] run get-multiplicity to OneOrMore
test multiplicity of ZeroOrOne	merge ZeroOrMore[[ [[x.i 				:: (x.i::x.i)]] ]] run get-multiplicity to ZeroOrMore
test multiplicity of ZeroOrOne	merge OneOrMore	[[ [[x.i 				:: (3::2)]] 		]] run get-multiplicity to OneOrMore
test multiplicity of One 				merge ZeroOrOne	[[ [[4 					:: x.i]] 				]] run get-multiplicity to OneOrMore
test multiplicity of One				merge One				[[ [[4 					:: 3]] 					]] run get-multiplicity to OneOrMore
test multiplicity of One				merge ZeroOrMore[[ [[4 					:: (x.i::x.i)]] ]] run get-multiplicity to OneOrMore
test multiplicity of One				merge OneOrMore	[[ [[4 					:: (3::2)]] 		]] run get-multiplicity to OneOrMore
test multiplicity of ZeroOrMore merge ZeroOrOne	[[ [[(x.i::x.i) :: x.i]] 				]] run get-multiplicity to ZeroOrMore
test multiplicity of ZeroOrMore	merge One				[[ [[(x.i::x.i) :: 3]] 					]] run get-multiplicity to OneOrMore
test multiplicity of ZeroOrMore	merge ZeroOrMore[[ [[(x.i::x.i) :: (x.i::x.i)]] ]] run get-multiplicity to ZeroOrMore
test multiplicity of ZeroOrMore	merge OneOrMore	[[ [[(x.i::x.i) :: (3::2)]] 		]] run get-multiplicity to OneOrMore
test multiplicity of OneOrMore	merge ZeroOrOne	[[ [[(3::2) 		:: x.i]] 				]] run get-multiplicity to OneOrMore
test multiplicity of OneOrMore	merge One				[[ [[(3::2) 		:: 3]] 					]] run get-multiplicity to OneOrMore
test multiplicity of OneOrMore	merge ZeroOrMore[[ [[(3::2) 		:: (x.i::x.i)]]	]] run get-multiplicity to OneOrMore
test multiplicity of OneOrMore	merge OneOrMore	[[ [[(3::2) 		:: (3::2)]] 		]] run get-multiplicity to OneOrMore

test multiplicity of ZeroOrOne	choice ZeroOrOne	[[ [[x.i 				<+ x.i]] 				]] run get-multiplicity to ZeroOrOne
test multiplicity of ZeroOrOne	choice One				[[ [[x.i 				<+ 3]] 					]] run get-multiplicity to One
test multiplicity of ZeroOrOne	choice ZeroOrMore [[ [[x.i 				<+ (x.i::x.i)]] ]] run get-multiplicity to ZeroOrMore
test multiplicity of ZeroOrOne	choice OneOrMore	[[ [[x.i 				<+ (3::2)]] 		]] run get-multiplicity to OneOrMore
test multiplicity of One 				choice ZeroOrOne	[[ [[4 					<+ x.i]] 				]] run get-multiplicity to One
test multiplicity of One				choice One				[[ [[4 					<+ 3]] 					]] run get-multiplicity to One
test multiplicity of One				choice ZeroOrMore [[ [[4 					<+ (x.i::x.i)]] ]] run get-multiplicity to One
test multiplicity of One				choice OneOrMore	[[ [[4 					<+ (3::2)]] 		]] run get-multiplicity to One
test multiplicity of ZeroOrMore choice ZeroOrOne	[[ [[(x.i::x.i) <+ x.i]] 				]] run get-multiplicity to ZeroOrMore
test multiplicity of ZeroOrMore	choice One				[[ [[(x.i::x.i) <+ 3]] 					]] run get-multiplicity to OneOrMore
test multiplicity of ZeroOrMore	choice ZeroOrMore [[ [[(x.i::x.i) <+ (x.i::x.i)]] ]] run get-multiplicity to ZeroOrMore
test multiplicity of ZeroOrMore	choice OneOrMore	[[ [[(x.i::x.i) <+ (3::2)]] 		]] run get-multiplicity to OneOrMore
test multiplicity of OneOrMore	choice ZeroOrOne	[[ [[(3::2) 		<+ x.i]] 				]] run get-multiplicity to OneOrMore
test multiplicity of OneOrMore	choice One				[[ [[(3::2) 		<+ 3]] 					]] run get-multiplicity to OneOrMore
test multiplicity of OneOrMore	choice ZeroOrMore [[ [[(3::2) 		<+ (x.i::x.i)]]	]] run get-multiplicity to OneOrMore
test multiplicity of OneOrMore	choice OneOrMore	[[ [[(3::2) 		<+ (3::2)]] 		]] run get-multiplicity to OneOrMore


test multiplicity of One choice One		[[ [[4 <+ 3]] 		]] run get-multiplicity to One

