module types-references-roles-inverses

language Relations

setup Common [[
	module test
	model
	entity Node{}
	relation Edge{
		Node ? maybe <- maybe
		Node 1 one   <- one
		Node * star  <- star
		Node + plus  <- plus
	}
	data
	Node n{}
	Edge e{
		maybe:n
		one:n
		star:n
		plus:n
	}
	execute
]]

test type of role								[[ [[e.maybe]] ]] 					run get-type to "Node"{_}
test type of role inverse 			[[ [[e.maybe.one]] ]] 			run get-type to "Edge"{_}
test type of role inverse role	[[ [[e.maybe.one.star]] ]]	run get-type to "Node"{_}

test type of inverse							[[ [[n.maybe]] ]] 					run get-type to "Edge"{_}
test type of inverse role 				[[ [[n.maybe.one]] ]] 			run get-type to "Node"{_}
test type of inverse role inverse	[[ [[n.maybe.one.star]] ]]	run get-type to "Edge"{_}

test multiplicity of role ZeroOrOne		[[ [[e.maybe]] ]] run get-multiplicity to One
test multiplicity of role One					[[ [[e.one]] ]] 	run get-multiplicity to One
test multiplicity of role ZeroOrMore	[[ [[e.star]] ]]	run get-multiplicity to One
test multiplicity of role OneOrMore		[[ [[e.plus]] ]]	run get-multiplicity to One

test multiplicity of inverse ZeroOrOne	[[ [[n.maybe]] ]] run get-multiplicity to ZeroOrOne
test multiplicity of inverse One				[[ [[n.one]] ]] 	run get-multiplicity to One
test multiplicity of inverse ZeroOrMore	[[ [[n.star]] ]]	run get-multiplicity to ZeroOrMore
test multiplicity of inverse OneOrMore	[[ [[n.plus]] ]]	run get-multiplicity to OneOrMore

test multiplicity of inverse role ZeroOrOne 	[[ [[n.maybe.maybe]] ]] run get-multiplicity to ZeroOrOne
test multiplicity of inverse role ZeroOrOne 2	[[ [[n.maybe.star]]  ]] run get-multiplicity to ZeroOrOne
test multiplicity of inverse role ZeroOrOne 3	[[ [[n.maybe.plus]]  ]] run get-multiplicity to ZeroOrOne