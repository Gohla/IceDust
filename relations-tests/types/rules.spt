module types-rules

language Relations

setup Common [[
	module test
	model
		entity Student {name:String}
		entity Course {}
	
		relation Enrollment{
			Student *
			Course +
		}
	rules
]]

test Type of parameter  [[
	enRoll([[s]]:Student)
			s.
		->
			s.
]] run get-type to "Student"{_}

test (Spoofax/937) Type of parameter ref  [[
	enRoll(s:Student)
			[[s]].
		->
			s.
]] run get-type to "Student"{_} //http://yellowgrass.org/issue/Spoofax/937

test (Spoofax/937) Type of node variable def by rel [[
	enRoll(s:Student)
			s course [[c]].
		->
			s.
]] run get-type to "Course"{_} //http://yellowgrass.org/issue/Spoofax/937

test (Spoofax/937) Type of node variable def by type [[
	enRoll(s:Student)
			[[c]]:Course.
		->
			s.
]] run get-type to "Course"{_} //http://yellowgrass.org/issue/Spoofax/937

test Error on wrong node variable type rel and typed [[
	enRoll(s:Student)
			s course [[c:Student]].
		->
			s.
]] 1 error

test Error on wrong node variable type rel and rel [[
	enRoll(s:Student)
			s course c.
			Course student [[c]].
		->
			s.
]] 1 error

test Error on wrong node variable type typed and rel [[
	enRoll(s:Student)
			c:Course.
			Course student [[c]].
		->
			s.
]] 1 error

test Error on wrong type anotation on node [[
	enRoll(s:Student)
			s:[[Course]].
		->
]] 1 error

test No error on correct type anotation on node [[
	enRoll(s:Student)
			s:Student.
		->
]] 0 errors

test No error on correct attribute match [[
	enRoll(s:Student)
			s{name="alice"}.
		->
			s.
]] 0 errors

test Error on correct attribute match [[
	enRoll(s:Student)
			s{name=[[1]]}.
		->
			s.
]] 1 error

test Type of attribute bind [[
	enRoll(s:Student)
			s{name=name}.
		->
			s{name=[[name]]}.
]] run get-type to String()

test (Spoofax/937) Type of attr ref [[
	enRoll(s:Student)
			s{[[name]]=name}.
		->
			s.
]] run get-type to String() //http://yellowgrass.org/issue/Spoofax/937
