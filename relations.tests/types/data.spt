module types-data

language Relations

setup Common [[
	module test
]]


test error on omitting required attribute [[
	model
	entity X{
		i : Int
	}
	data
	X [[x]]{}
]] 1 error

test error on omitting required attribute multiple [[
	model
	entity X{
		i : Int
		j : String
	}
	data
	X [[x]]{}
]] 1 errors

test no error on omitting optional attribute[[
	model
	entity X{
		i : Int ?
	}
	data
	X x{}
]] 0 errors

test error on omitting only on required attribute[[
	model
	entity X{
		i : Int ?
		j : String
	}
	data
	X [[x]]{}
]] 1 error

test no error on not omitting role in relation[[
	model
	entity Node{}
	relation Edge{
		Node 1 in <- x
		Node * out
	}
	data
	Node n{}
	Edge e{
		in:n
		out:n
	}
]] 0 errors

test error on omitting role in relation[[
	model
	entity Node{}
	relation Edge{
		Node 1 in <- x
		Node * out
	}
	data
	Node n{}
	Edge [[e]]{
		in:n
	}
]] 1 error

test error on omitting roles in relation[[
	model
	entity Node{}
	relation Edge{
		Node 1 in <- x
		Node * out
	}
	data
	Node n{}
	Edge [[e]]{}
]] 1 error

//TODO: add testcases for required relations (need syntax for specifying relations inside entities)
