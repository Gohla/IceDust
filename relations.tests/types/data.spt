module types-data

language Relations

setup Common [[
	module test
]]


test error on omitting required attribute [[
	model
	entity X{
		i : Int
	}
	data
	[[x]] : X {}
]] 1 error

test error on omitting required attribute multiple [[
	model
	entity X{
		i : Int
		j : String
	}
	data
	[[x]] : X {}
]] 1 errors

test no error on omitting optional attribute[[
	model
	entity X{
		i : Int ?
	}
	data
	x : X {}
]] 0 errors

test error on omitting only on required attribute[[
	model
	entity X{
		i : Int ?
		j : String
	}
	data
	[[x]] : X {}
]] 1 error

//test no error on not omitting role in relation[[
//	model
//	entity Node{}
//	relation Edge{
//		Node 1 in <- x
//		Node * out
//	}
//	data
//	n : Node {}
//	e : Edge {
//		in:n
//		out:n
//	}
//]] 0 errors

//test error on omitting role in relation[[
//	model
//	entity Node{}
//	relation Edge{
//		Node 1 in <- x
//		Node * out
//	}
//	data
//	n : Node {}
//	[[e]] : Edge {
//		in:n
//	}
//]] 1 error

//test error on omitting roles in relation[[
//	model
//	entity Node{}
//	relation Edge{
//		Node 1 in <- x
//		Node * out
//	}
//	data
//  n : Node {}
//  [[e]] : Edge {}
//]] 1 error

//TODO: add testcases for required relations (need syntax for specifying relations inside entities)
