module types-references-roles-inverses

language Relations

setup Common [[
	module test
	model
	entity Node{}
	relation Node.maybe ? <-> 1 Node.one {}
	relation Node.star * <-> + Node.plus {}
//	relation Edge{
//		Node ? maybe <- maybe
//		Node 1 one   <- one
//		Node * star  <- star
//		Node + (ordered) plus  <- plus
//		
//		maybe.a <-> one.b
//		maybe.c <-> star.d
//		maybe.e <-> plus.f
//		one.g <-> star.h
//		one.i <-> plus.j
//		star.k <-> plus.l
//		
//	}
	data
	n : Node {}
//	e : Edge {
//		maybe:n
//		one:n
//		star:n
//		plus:n
//	}
	execute
]]

test type of inverse							[[ [[n.maybe]] ]] 					run get-type to "Node"{_}
test type of inverse role 				[[ [[n.maybe.one]] ]] 			run get-type to "Node"{_}
test type of inverse role inverse	[[ [[n.maybe.one.star]] ]]	run get-type to "Node"{_}

//test multiplicity of role ZeroOrOne		[[ [[e.maybe]] ]] run get-multiplicity to One
//test multiplicity of role One					[[ [[e.one]] ]] 	run get-multiplicity to One
//test multiplicity of role ZeroOrMore	[[ [[e.star]] ]]	run get-multiplicity to One
//test multiplicity of role OneOrMore		[[ [[e.plus]] ]]	run get-multiplicity to One

test multiplicity of inverse ZeroOrOne	[[ [[n.maybe]] ]] run get-multiplicity to ZeroOrOne
test multiplicity of inverse One				[[ [[n.one]] ]] 	run get-multiplicity to One
test multiplicity of inverse ZeroOrMore	[[ [[n.star]] ]]	run get-multiplicity to ZeroOrMore
test multiplicity of inverse OneOrMore	[[ [[n.plus]] ]]	run get-multiplicity to OneOrMore

test multiplicity of inverse role ZeroOrOne 	[[ [[n.maybe.maybe]] ]] run get-multiplicity to ZeroOrOne
test multiplicity of inverse role ZeroOrOne 2	[[ [[n.maybe.one]]  ]] run get-multiplicity to ZeroOrOne

test ordering of shortcut Unordered		[[ [[n.maybe]] ]] run get-ordering to Unordered
test ordering of shortcut Ordered	  	[[ [[n.plus]] ]]	run get-ordering to Unordered

//test ordering of inverse Unordered	[[ [[n.maybe]] ]] run get-ordering to Unordered
//test ordering of inverse Ordered  	[[ [[n.plus]] ]]	run get-ordering to Ordered
