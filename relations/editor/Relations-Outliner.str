module editor/Relations-Outliner

imports // constructors
	
  src-gen/signatures/Modules-sig
  src-gen/signatures/Types-sig
	trans/desugaring/constructors

imports // functions
	
	trans/api/_runtime
	trans/api/data-api
	trans/api/model-api
	trans/lib/origin
	trans/desugaring/desugar

rules
  
  outline-expand-to-level = !5

	//TODO: call this on desugared, or even analyzed AST @see http://yellowgrass.org/issue/Spoofax/837
  outline: (selected, position, ast, path, project-path) -> result
  	with
  		result := <desugar-before-analysis;simple-label-outline-multiple(to-outline-label);flatten-list> ast
  
	// to-outline-label : ModuleDesugared(n,_,_,_,_) -> n{"icons/module.png"}
	
	to-outline-label = ?ModelDef(_)   ;keyword-outline-label(|"Model"  {"icons/model.png"})
	to-outline-label = ?DataDef(_)    ;keyword-outline-label(|"Data"   {"icons/data.png"})
	to-outline-label = ?Executable(_) ;keyword-outline-label(|"Execute"{"icons/execute.png"})
  
	to-outline-label = where(is-entity;entity-is-entitytype);      ?e; !$[[<entity-get-name;pp-o>e] : [<entity-get-type;pp-o>e]]                    {"icons/square-red.png"}     ;custom-origin(|<entity-get-name>e)
	to-outline-label = where(is-entity;not(entity-is-entitytype)); ?e; !$[[<entity-get-name;pp-o>e] : [<entity-get-type;pp-o>e]]                    {"icons/diamond-yellow.png"} ;custom-origin(|<entity-get-name>e)
	to-outline-label = where(is-attr);                             ?e; !$[[<attr-get-name;pp-o>e] : [<attr-get-type;pp-o>e] [<attr-get-mult;pp-o>e]]{"icons/circle-green.png"}   ;custom-origin(|<attr-get-name>e)
	to-outline-label = where(is-entityinstance);                   ?e; !$[[<entityinstance-get-name;pp-o>e] : [<entityinstance-get-type;pp-o>e]]    {"icons/square-gray.png"}    ;custom-origin(|<entityinstance-get-name>e)

	to-outline-label = where(is-role);?e;
		![
			<!$[[<role-get-name;pp-o>e] : [<role-get-type;pp-o>e] [<pp-o>One()]]         {"icons/arrowright-red.gif"};custom-origin(|<role-get-name>e)>,
			<!$[[<role-get-type;pp-o>e].[<role-get-inv;pp-o>e] : [<role-get-mult;pp-o>e]]{"icons/arrowleft-red.gif"};custom-origin(|<role-get-inv>e)> 
		]
		
	to-outline-label = where(is-shortcut);?e;
		![
			<!$[[<shortcut-get-type1;pp-o>e].[<shortcut-get-shortcut1;pp-o>e]]{"icons/arrowleftright-red.gif"};custom-origin(|<shortcut-get-shortcut1>e)>,
			<!$[[<shortcut-get-type2;pp-o>e].[<shortcut-get-shortcut2;pp-o>e]]{"icons/arrowleftright-red.gif"};custom-origin(|<shortcut-get-shortcut2>e)>
		]

rules
	
	keyword-outline-label(|keyword) = ?term;!keyword;custom-origin(|term);set-origin-length(|<strlen>keyword)

  simple-label-outline-multiple(s1) = collect-om(to-outline-nodes(s1), conc)
  
  to-outline-nodes(s1):
    term -> nodes
    where
      label := <s1> term;
      if <not(is-list)>label then
      	labels := [label]
      else
      	labels := label
      end;
      children := <get-arguments; simple-label-outline-multiple(s1); flatten-list> term;
      nodes := <map(\x -> Node(x, children)\)>labels

signature constructors
  
  Node: label * children -> Node

rules
	
  pp-o =
  is-string 
    <+
  pp-o-multiplicity
  	<+
  ?term{a}; _origin-text; ?label; !label{a}
    <+
  write-to-string // fallback
  
  pp-o-multiplicity : ZeroOrOne() -> "[0, 1]"
  pp-o-multiplicity : One() -> "[1, 1]"
  pp-o-multiplicity : ZeroOrMore() -> "[0, n)"
  pp-o-multiplicity : OneOrMore() -> "[1, n)"
