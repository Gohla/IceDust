module Common

lexical syntax // IDs

  ID = [a-zA-Z\_][0-9a-zA-Z\_]*
  ID = Keyword {reject}        
                
lexical restrictions
	
	ID -/- [a-zA-Z0-9\_]

lexical syntax // Keywords

	Keyword = "avg"
	Keyword = "concat"
	Keyword = "count"
	Keyword = "entity"
	Keyword = "false"
	Keyword = "Int"
	Keyword = "max"
	Keyword = "min"
	Keyword = "relationship"
	Keyword = "String"
	Keyword = "sum"
	Keyword = "this"
	Keyword = "true"

lexical restrictions

	Keyword -/- [a-zA-Z0-9\_]

lexical syntax // literals

	"-"? [0-9]+   -> INT
	StringChar*   -> STRING
	~[\"\n]       -> StringChar
	"\\\""        -> StringChar
	BackSlashChar -> StringChar
	"\\"          -> BackSlashChar
	
lexical syntax // layout
	
	[\ \t\n\r] -> LAYOUT
	
	[\*]                             -> CommentChar
	"/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
	"//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
	
	-> EOF

lexical restrictions

	// Ensure greedy matching for lexicals
	
	CommentChar   -/- [\/]
	INT           -/- [0-9]

	EOF           -/- ~[]
	
	BackSlashChar -/- [\"]

context-free restrictions

	// Ensure greedy matching for comments
	
	LAYOUT? -/- [\ \t\n\r]
	LAYOUT? -/- [\/].[\/]
	LAYOUT? -/- [\/].[\*]

