module Expressions

imports
	Common
	Data
	Model

templates //exp : PrimitiveType, 0-*

	MathExp 									= <(<MathExp>)> 					{bracket}
	MathExp.Multiplication		=	<<MathExp> * <MathExp>> {left}
	MathExp.Division					=	<<MathExp> / <MathExp>> {left}
	MathExp.Modulo						=	<<MathExp> % <MathExp>> {left}
	MathExp.Addition					=	<<MathExp> + <MathExp>> {left}
	MathExp.Subtraction				=	<<MathExp> - <MathExp>> {left}
	MathExp.Aggregation				= <<Aggr>( <MathExp> )>
	MathExp										= <<AttributeExp>>
	MathExp										= <<LitValExp>>

	Aggr.Max		= <max>
	Aggr.Min		= <min>
	Aggr.Avg		= <avg>
	Aggr.Concat	= <concat>

templates //exp : PrimitiveType, 0-*

	AttributeExp.AttributeName= <<NavExp>.<ID>>
	AttributeExp 							= <<AttributeNameThis>>
	
	AttributeNameThis.AttributeNameThis =<<ID>>

templates //exp : PrimitiveType, 1

	LitValExp.String 					= <"<STRING>">
	LitValExp.Integer 				= <<INT>>

templates //exp : EntityType, 0-*

	NavExp.NavigateInOut			= <<NavExp> <NavType> <RoleName>]<EntityType>[<RoleName>>
	NavExp.NavigateIn					= <<NavExp> <NavType> <RoleName>]<EntityType>>
	NavExp.NavigateOut				= <<NavExp> <NavType> <EntityType>[<RoleName>>
	NavExp 										= <<EntityNameExp>>
	NavExp 										= <<ThisExp>>
	
	NavType.NavOr							= <\>>
	NavType.NavAnd						= <\>\>>
	NavType.NavOrEx 					= <-\>>
	NavType.NavAndEx					= <-\>\>>

templates //exp : EntityType, 1

	EntityNameExp.EntityName	= <<ID>>
	ThisExp.This							= <this>


template options
context-free priorities
	{ left:
		MathExp.Multiplication
		MathExp.Division
		MathExp.Modulo
	} >
	{ left:
		MathExp.Addition
		MathExp.Subtraction
	}