module Expressions

imports
	Common
	Data
	Model

templates //exp (misc)

	Exp 									= <(<Exp>)> {bracket}

templates //exp (math) : PrimitiveType, [0-1]

	Exp.Multiplication		=	<<Exp> * <Exp>> {left}
	Exp.Division					=	<<Exp> / <Exp>> {left}
	Exp.Modulo						=	<<Exp> % <Exp>> {left}
	Exp.Addition					=	<<Exp> + <Exp>> {left}
	Exp.Subtraction				=	<<Exp> - <Exp>> {left}

templates //exp (aggregations)	

	Exp.Min								= <min ( <Exp> )>
	Exp.Max								= <max ( <Exp> )>
	Exp.Avg								= <avg ( <Exp> )>
	Exp.Sum								= <sum ( <Exp> )>
	Exp.Conj							= <conj ( <Exp> )>
	Exp.Disj							= <disj ( <Exp> )>
	Exp.Concat						= <concat ( <Exp> )>
	Exp.Count							= <count ( <Exp> )>

templates //exp (logic)

	Exp.Not								=	<!<Exp>> {right}
	Exp.LessThan					= <<Exp> \< <Exp>> {left}
	Exp.LessThanEqual			=	<<Exp> \<= <Exp>> {left}
	Exp.GreaterThan				= <<Exp> \> <Exp>> {left}
	Exp.GreaterThanEqual	=	<<Exp> \>= <Exp>> {left}
	Exp.Equal 						= <<Exp> == <Exp>> {left}
	Exp.Inequal 					= <<Exp> != <Exp>> {left}
	Exp.And								= <<Exp> && <Exp>> {left}
	Exp.Or								= <<Exp> || <Exp>> {left}
	Exp.TernaryConditional= <<Exp> ? <Exp> : <Exp>> {right}

templates //exp (multiplicities)

	Exp.Merge							=	<<Exp> :: <Exp>> {left}
	Exp.ChoiceLeft				=	<<Exp> \<+ <Exp>> {left}

templates //exp : PrimitiveType, 1

	Exp										= <<LitVal>>
	LitVal.String 				= <"<STRING>">
	LitVal.Int			 			= <<INT>>
	LitVal.True						= <true>
	LitVal.False					= <false>

templates //exp : EntityType, 0-*

	Exp.NavigateInOut			= <<Exp> \><Placeholder3> <RoleName>]<EntityType>[<RoleName>>
	Exp.NavigateIn				= <<Exp> \><Placeholder3> <RoleName>]<EntityType>>
	Exp.NavigateOut				= <<Exp> \><Placeholder3> <EntityType>[<RoleName>>
	
	Placeholder3.NavOr		= <>

templates //exp (references)

	Exp.This							= <this>
	Exp										= <<Identifier>>
	Identifier.Identifier	= <<ID>>
	Exp.AttributeName			= <<Exp> . <ID>> {left}


template options
context-free priorities
	{ left:
		Exp.NavigateInOut
		Exp.NavigateIn
		Exp.NavigateOut
	} >	
	{ left:
		Exp.AttributeName
	} >	
	{ right:
		Exp.Not
	} >
	{ left:
		Exp.Multiplication
		Exp.Division
		Exp.Modulo
	} >
	{ left:
		Exp.Addition
		Exp.Subtraction
	} >
	{ left:
		Exp.LessThan
		Exp.LessThanEqual
		Exp.GreaterThan
		Exp.GreaterThanEqual
	} >
	{ left:
		Exp.Equal
		Exp.Inequal
	} >
	{ left:
		Exp.And
	} >
	{ left:
		Exp.Or
	} >
	{ right:
		Exp.TernaryConditional
	} >
	{ left:
		Exp.Merge
	} >
	{ left:
		Exp.ChoiceLeft
	}