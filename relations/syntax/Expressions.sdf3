module Expressions

imports
	Common
	Data
	Model

templates //exp (misc)

	Exp 									= <(<Exp>)> 					{bracket}

templates //exp (math) : PrimitiveType, 0-*

	Exp.Multiplication		=	<<Exp> * <Exp>> {left}
	Exp.Division					=	<<Exp> / <Exp>> {left}
	Exp.Modulo						=	<<Exp> % <Exp>> {left}
	Exp.Addition					=	<<Exp> + <Exp>> {left}
	Exp.Subtraction				=	<<Exp> - <Exp>> {left}

templates //exp (aggregations)	

	Exp.Min								= <min ( <Exp> )>
	Exp.Max								= <max ( <Exp> )>
	Exp.Avg								= <avg ( <Exp> )>
	Exp.Concat						= <concat ( <Exp> )>
	
templates //exp (multiplicities)

	Exp.Merge							=	<<Exp> :: <Exp>> {left}
	Exp.ChoiceLeft				=	<<Exp> \<+ <Exp>> {left}

templates //exp : PrimitiveType, 1

	Exp										= <<LitVal>>
	LitVal.String 				= <"<STRING>">
	LitVal.Int			 			= <<INT>>

templates //exp : EntityType, 0-*

	Exp.NavigateInOut			= <<Exp> <NavType> <RoleName>]<EntityType>[<RoleName>>
	Exp.NavigateIn				= <<Exp> <NavType> <RoleName>]<EntityType>>
	Exp.NavigateOut				= <<Exp> <NavType> <EntityType>[<RoleName>>
	
	NavType.NavOr					= <\>>
	NavType.NavAnd				= <\>\>>
	NavType.NavOrEx 			= <-\>>
	NavType.NavAndEx			= <-\>\>>

templates //exp (references)

	Exp.This							= <this>
	Exp										= <<Identifier>>
	Identifier.Identifier	= <<ID>>
	Exp.AttributeName			= <<Exp>.<ID>>


template options
context-free priorities
	{ left:
		Exp.Multiplication
		Exp.Division
		Exp.Modulo
	} >
	{ left:
		Exp.Addition
		Exp.Subtraction
	} >
	{ left:
		Exp.Merge
	} >
	{ left:
		Exp.ChoiceLeft
	}