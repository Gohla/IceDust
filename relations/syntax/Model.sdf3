module Model

imports
	Common
	Expressions
	Types

context-free syntax // entities

	Model.Entity = <
		<EntityOrRelation> <ID> {
			<{Member "\n"}*>
		}
	>
	EntityOrRelation.EntityType = <entity>
	EntityOrRelation.RelationType = <relation>

context-free syntax // entity members

	Member											= <<Attribute>>
	Member											= <<Role>>
	Member											= <<Shortcut>>

	Attribute.Attribute 				= <<ID> : <PrimitiveType> <Multiplicity?> <Derivation?>>
	Derivation.Derivation 			= <= <Exp> <DerivationType>>
	DerivationType.DefaultValue	= <(default)>
	DerivationType.Derivation		= <>

	Role.Role										= <<ID> <Multiplicity> <ID?> <Inverse?>>
	Inverse											= <\<- <ID>>
	//TODO: test sdf2 version          ID Multiplicity ID? ("<-" ID)? -> Role {"Role"}

	Shortcut.Shortcut						= <<RoleRef>.<ID> \<-\> <RoleRef>.<ID>>

context-free syntax // specific references
	
	EntityRef.EntityRef 				= ID
	AttributeRef.AttributeRef   = ID
	RoleRef.RoleRef							= ID
