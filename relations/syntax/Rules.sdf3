module Rules

imports
	Common
	Expressions
	Types
	Model
	
context-free syntax

	Rule.Rule = <
		<ID> (<{Param ","}*>)
			<RuleBody>
	>

	Param.Param = <<ID>:<Type><Multiplicity?>>
	Type = PrimitiveType
	Type = EntityRef
	
	RuleBody.RuleBody = <
			<{LHS "\n"}*>
		-\>
			<{RHS "\n"}*>
		<{SubRule "\n"}*>
	>
	
	SubRule.SubRule = <
		<Multiplicity?>[
			<RuleBody>
		]
	>
	
	LHS = NodeLine
	LHS = EdgeLine
	LHS = SubMatch
	SubMatch.SubMatch = <
		<Multiplicity?>[
			<LHS>
		]
	>
	
	RHS = NodeLine
	RHS = EdgeLine
	
	NodeLine = <<Node>.>
	EdgeLine = <<Edge>.>
	
	Node.Node = <<ID><NodeType?><NodeAttr?>>
	NodeType = <:<EntityRef>>
	NodeAttr = <{<{Attr ","}*>}>
	
	Attr.Attr = <<AttrRef>=<Exp>>
	AttrRef.AttrRef = <<ID>>

	// Edge.Edge = <<NodeOrEdge> <ID> <Node>>
	Edge.Edge = <<TsHelp> <Node>>
	TsHelp.TsHelp = <<NodeOrEdge> <ID>>
	
	NodeOrEdge = Node
	NodeOrEdge = Edge	

