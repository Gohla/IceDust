module Rules

imports
	Common
	Expressions
	Types
	Model
	
context-free syntax

	Rule.Rule = <
		<ID> (<{Param ","}*>)
			<RuleBody>
	>

	Param.Param = <<ID>:<Type><Multiplicity?>>
	Type = PrimitiveType
	Type = EntityRef
	
	RuleBody.RuleBody = <
			<{LHSLine "\n"}*>
		<RHS?>
		<{SubRule "\n"}*>
	>
	RHS = <
	-\>
		<{RHSLine "\n"}*>
	>
	
	SubRule.SubRule = <
		<MultiplicityZ?>[
			<RuleBody>
		]
	>
	
	LHSLine = <<LHSNodeOrEdge>.>
	LHSNodeOrEdge = LHSNode
	LHSNodeOrEdge = LHSEdge	
	LHSNode.LHSNode = <<ID><NodeType?><NodeAttr?>>
	LHSEdge.LHSEdge = <<LHSTsHelp> <LHSNode>>
	LHSTsHelp.LHSTsHelp = <<LHSNodeOrEdge> <LHSEdgeName>>
	LHSEdgeName.LHSEdgeName = <<EdgeName?><ID>>
	
	RHSLine = <<RHSNodeOrEdge>.>
	RHSNodeOrEdge = RHSNode
	RHSNodeOrEdge = RHSEdge	
	RHSNode.RHSNode = <<ID><NodeType?><NodeAttr?>>
	RHSEdge.RHSEdge = <<RHSTsHelp> <RHSNode>>
	RHSTsHelp.RHSTsHelp = <<RHSNodeOrEdge> <RHSEdgeName>>
	RHSEdgeName.RHSEdgeName = <<EdgeName?><ID>>

	EdgeName = <<ID>:>
	NodeType = <:<EntityRef>>
	NodeAttr = <{<{Attr ","}*>}>
	Attr.Attr = <<AttrRef>=<Exp>>
	AttrRef.AttrRef = <<ID>>

	

