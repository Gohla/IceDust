module trans/_editor/generate

imports
	
	lib/editor-common.generated
	lib/index/-
	lib/task/-
	lib/analysis/single
	
	trans/generating/generate
	trans/lib/files
	
	include/Relations
	trans/desugaring/desugar

rules // Builders
	
	generate-java      = generate-java(error-handler-editor)
	generate-java-test = generate-java(error-handler-tests)
	generate-java(error-handler):
		(selected, position, ast, path, project-path) -> result
		with
			result := <build(error-handler)>(selected, path, project-path, 1)
	
	compile-java       = compile-java(error-handler-editor)
	compile-java-test  = compile-java(error-handler-tests)
	compile-java(error-handler):
		(selected, position, ast, path, project-path) -> None()
		with
			<build(error-handler)>(selected, path, project-path, 2)
	
	execute-java       = execute-java(error-handler-editor)
	execute-java-test  = execute-java(error-handler-tests)
	execute-java(error-handler):
		(selected, position, ast, path, project-path) -> None()
		with
			<build(error-handler)>(selected, path, project-path, 3)

rules // Error handlers (editor: report error, do not fail, tests: fail with error)

	error-handler-editor : msg -> None()
		with
			err-msg(|msg)

	error-handler-tests : msg -> None()
		with
			with(fail|msg)

rules // Build in steps
	
	build(error-handler):
		(ast, path, project-path, i) -> result
		with
			index-setup(|<language>, project-path);
			task-setup(|project-path);

			if Module(_,_,_,_) := ast then
				// log(|Info(),"Phase 0: Analyzing");
				(ast', error*) := <analyze-ast-step> (ast, path, project-path)
			else
				ast' := ast;
				error* := <task-get-messages(|$[[project-path]/[path]])>
			end;
			
			if not([] := error*) then
				<error-handler>"Fix errors before generating code. Exiting code generation.";
				result := None()
			else

			if <leq>(1, i) then
				// log(|Info(),"Phase 1: Generating Java Code");
				(javaFileName, javaCode) := <generate-java-step(error-handler)>(ast', path);
				result := (javaFileName, javaCode);
				//TODO: on error do not continue to next step (the error-handler for manual build doesn't fail, only the testing one does).
				
			if <leq>(2, i) then
				// log(|Info(),"Phase 2: Compiling Java Code");
				<write-file> (javaFileName, javaCode);
				(exitCode, classFileName) := <compile-java-step> javaFileName;

			if not(0 := exitCode) then
				<error-handler>"Java compilation failed. Exiting code execution."
			else
				
			if <leq>(3, i) then
				// log(|Info(),"Phase 3: Executing");
				<execute-java-step> classFileName
				
			end end end end end
	
	analyze-ast-step: (ast, path, project-path) -> (analyzedAst, error*)
	 with
  	desugaredAst := <desugar-all> ast;
  	(
    	analyzedAst
		, (error*, warning*, note*)
		, removed-entry*
		, added-entry*
		, removed-task*
		, added-task*
		, invalidated-task*
		, evaluated-task*
		, skipped-task*
		, unevaluated-task*
		) := <analyze-one(|<language>, path, project-path)> desugaredAst	//TODO: should I call analyze-one ?

	
	generate-java-step(error-handler) = generate-java-code(error-handler)
	
	compile-java-step:
		javaFileName -> (exitCode, classFileName)
		with
			exitCode:= <call-read-output> ("javac", [javaFileName]);
			classFileName := <guarantee-extension(|"class")> javaFileName;
			<refresh-workspace-file> classFileName

	execute-java-step:
		classFileName -> None()
		with
			classPath := <dirname>classFileName;
			className := <base-filename;remove-extension> classFileName;
			<call-read-output> ("java", ["-cp", classPath, className])

rules // call helper
	
	//TODO: now this returns the exitCode, but it should return (exitCode, stdoutString). And the stdout should not be in the console.
	call-read-output =
	  ?(program, args);
	
	  Stream(instream)  := <stdin-stream>;
	  Stream(outstream) := <stdout-stream>;
	  Stream(errstream) := <stderr-stream>;
	  
	  log(|Info(), ["Calling external tool ", program, " ", <try(separate-by(|" "); concat-strings)> args]);
	  prim("SSL_EXT_call", program, args, instream, outstream, errstream)

