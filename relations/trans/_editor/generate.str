module trans/_editor/generate

imports
	
	lib/editor-common.generated
	lib/index/-
	lib/task/-
	lib/analysis/single
	
	trans/generating/generate
	trans/lib/files
	
	include/Relations
	trans/desugaring/desugar

rules // Builders
	
	generate-java:
		(selected, position, ast, path, project-path) -> (fileName, result)
		with
			(fileName, result) := <build>(selected, path, project-path, 1)
			
	compile-java:
		(selected, position, ast, path, project-path) -> None()
		with
			<build>(selected, path, project-path, 2)
			
	execute-java:
		(selected, position, ast, path, project-path) -> None()
		with
			<build>(selected, path, project-path, 3)

rules // Build in steps
	
	build:
		(ast, path, project-path, i) -> (javaFileName, javaCode)
		with
			index-setup(|<language>, project-path);
			task-setup(|project-path);

			if Module(_,_,_,_) := ast then
				// log(|Info(),"Phase 0: Analyzing");
				ast' := <analyze-ast-step> (ast, path, project-path)
			else
				ast' := ast
			end;

			if <leq>(1, i) then
				// log(|Info(),"Phase 1: Generating Java Code");
				(javaFileName, javaCode) := <generate-java-step>(ast', path);
				
			if <leq>(2, i) then
				// log(|Info(),"Phase 2: Compiling Java Code");
				<write-file> (javaFileName, javaCode);
				classFileName := <compile-java-step> javaFileName;
				
			if <leq>(3, i) then
				// log(|Info(),"Phase 3: Executing");
				<execute-java-step> classFileName
				
			end end end
	
	analyze-ast-step: (ast, path, project-path) -> analyzedAst
	 with
  	desugaredAst := <desugar-all> ast;
  	(
    	analyzedAst
		, (error*, warning*, note*)
		, removed-entry*
		, added-entry*
		, removed-task*
		, added-task*
		, invalidated-task*
		, evaluated-task*
		, skipped-task*
		, unevaluated-task*
		) := <analyze-one(|<language>, path, project-path)> desugaredAst	//TODO: should I call analyze-one ?

	
	generate-java-step = generate-java-code
	
	compile-java-step:
		javaFileName -> classFileName
		with
			<try(call)> ("javac", [javaFileName]);
			classFileName := <guarantee-extension(|"class")> javaFileName;
			<refresh-workspace-file> classFileName

	execute-java-step:
		classFileName -> None()
		with
			classPath := <dirname>classFileName;
			className := <base-filename;remove-extension> classFileName;
			<try(call)> ("java", ["-cp", classPath, className])
