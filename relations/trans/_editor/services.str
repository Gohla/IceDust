module trans/_editor/services

imports
	libstratego-gpp
	
	lib/editor-common.generated
	lib/analysis/-
	lib/types/-
	lib/nabl/-
	lib/task/-
	lib/index/-
	
	editor/interop
	
	trans/prettyprinting/pp
	
rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) ->
			<map(\(a,b)->$[<b>[a]</b>: [b]]\);try(separate-by(|"<br/>\n");concat-strings)>
			<get-editor-properties>target

	editor-properties:
		e@_ -> <get-editor-properties>e
			with
				language := <language>;
				project-path := <project-path>;
	    	index-setup(|language, project-path);
	    	task-setup(|project-path)
			
	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast
	
	// Formats the program using a pretty printer		
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected
      
imports //TODO: remove this, property lookup should fail instead of throwing an exception
	
	include/Relations
	trans/desugaring/desugar		
	
rules	// Properties
	
	get-editor-properties:
		t ->
			[	
				("Target",			<target-prop>t),
				("Constructor",	<cons-prop>t),
			 	("Type",				<type-prop>t),
			 	("Defines",			<def-prop>t),
			 	("Refers to",		<ref-prop>t)
			]
	
	target-prop: t -> tar
		with
			tar := <topdown(try(rm-annotations));pp-Relations-string;box2text-string(|80)>t <+
			tar := <write-to-string>None()
	
	cons-prop: t -> constr
		with
			constr := $[[<get-constructor> t]/[<get-arguments;length> t]] <+
			constr := <write-to-string>None()
	
	type-prop: t -> <write-to-string>None()
		where <is-string>t
	type-prop: ModuleDesugared(_,_,_,_) -> <write-to-string>None()	//TODO: remove this, property lookup should fail instead of throwing an exception
	type-prop: EntityTypeDef(_,_,_) 		-> <write-to-string>None()	//TODO: remove this, property lookup should fail instead of throwing an exception
	type-prop: t -> type
		where <not(is-string)>t
		with
			// <debug(|"get-type: ")> t;
			type := <get-type;try(rm-annotations);write-to-string>t <+
			type := <write-to-string>None()

	def-prop: Def(uri) -> result
		with
			result := <reverse-uri;foreign-call(|"Analysis", "make-abstract");foreign-call(|"Analysis", "prettyprint-example");box2text-string(|80)> uri
	def-prop: _ -> <write-to-string>None()
	
	ref-prop: _ -> <write-to-string>None()
	
