module trans/_editor/services

imports
	libstratego-gpp
	
	lib/editor-common.generated
	lib/runtime/editor/properties
	lib/runtime/analysis/-
	lib/runtime/types/-
	lib/runtime/nabl/-
	lib/runtime/task/-
	lib/runtime/index/-
	lib/runtime/properties/-
	
	lib/runtime/editor/interop
	
	trans/desugaring/desugar
	trans/prettyprinting/pp
	trans/naming/names
	trans/lib/string
	
	include/Relations
	
rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			node' := <try(resolve-child)>node;
			definition := <analysis-resolve(|<language>, project-path)> node'
	
	resolve-child: NaBLHelp(name, _) -> name

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	// http://yellowgrass.org/issue/Spoofax/84
	editor-hover:
		(target, position, ast, path, project-path) -> $[[warning][hoverinfo]]
		with
			if Def(_) := target then
				warning := "<b>Warning showing hover info of Definition instead of Use</b><br/><br/>"
			else
				warning := ""
			end
		with
			if Some(a) := target then
				target' := a
			else
				target' := target
			end;
			if <hover-parent-for>target' then
				if [_] := position then // if first level child parent-at-position fails
					target'' := ast
				else
					target'' := <parent-at-position(|position)>ast
				end
			else
				target'' := target'
			end;
			hoverinfo := <get-editor-properties(pp-partial-Relations-string;truncate-string(|200) |<language>, project-path);properties-to-html>target''

	hover-parent-for: a -> a // for constructors with no children hover parent
		where
			[] := <get-arguments>a;
			<not(is-string)>a;
			<not(?False())>a;
			<not(?True())>a
	hover-parent-for: a -> a // for strings, hover parent if it is not a reference
		where
			<is-string>a;
			None() := <ref-prop>a
	hover-parent-for: NaBLHelp(_,_) -> <id>

	// FIXME: NaBL should have generated this	
  nabl-get-name : Entity(_, a, _) -> a

	// Gathers the properties for the properties view.
	editor-properties:
		(target, position, ast, path, project-path) ->
			<get-all-editor-properties(pp-partial-Relations-string |<language>, project-path)>target
			
	pp-property : ZeroOrOne() -> "[0, 1], zero or one, maybe/nullable"
	pp-property : One() 			-> "[1, 1], exactly one, required"
	pp-property : ZeroOrMore()-> "[0, n), zero or more, maybe/nullable"
	pp-property : OneOrMore()	-> "[1, n), one or more, required"
			
	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast
	
	// Formats the program using a pretty printer		
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected
   