module trans/_editor/services

imports
	
	lib/editor-common.generated
	lib/analysis/-
	lib/types/-
	lib/nabl/-
	
	editor/interop
	
	trans/prettyprinting/pp
	
rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) ->
			(	("Target",	target-pp),
			 	("Type",		type)
			)
		where
			if Def(_) := target then
				target-pp := "Def"
				// TODO: prettyprint (how to call the pretty printer of URIs?)
			else
				target-pp := <topdown(try(rm-annotations))>target
				// TODO: prettyprint (how to do all the boxes to a string?)
				// <topdown(try(rm-annotations));try(pp-Relations-string);debug> target;
			end;
			(
				type := <get-type>target <+
				type := None()
			)

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast
	
	// Formats the program using a pretty printer		
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected
      //result := selected