module trans/_editor/services

imports
	libstratego-gpp
	
	lib/editor-common.generated
	lib/analysis/-
	lib/types/-
	lib/nabl/-
	lib/task/-
	lib/index/-
	lib/properties/-
	
	editor/interop
	
	trans/prettyprinting/pp
	trans/naming/names
	
rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) ->
			<get-editor-properties;properties-to-html>target

	editor-properties:
		(target, position, ast, path, project-path) ->
		<get-editor-properties>target
			with
				language := <language>;
	    	index-setup(|language, project-path);
	    	task-setup(|project-path)
			
	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast
	
	// Formats the program using a pretty printer		
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected
      
rules	// Properties
	
	get-editor-properties:
		t ->
			<concat
			;filter(not-none)
			;map(\(a,b)->(a,<pp-property>b)\)>
			[
				[
					("Target",			<target-prop>t),
					("Constructor",	<cons-prop>t),
				 	("Type",				<type-prop>t),
				 	("Name",				<name-prop>t),
				 	("Defines",			<def-prop>t),
				 	("Refers to",		<ref-prop>t)
				]
			,	<nabl-props>t
			]
	
	target-prop: t -> tar
		with
			tar := <pp-ast>t <+
			tar := None()
	
	cons-prop: _ -> None()
		where is-string
	cons-prop: t -> constr
		where not(is-string)
		with
			constr := <pp-cons>t <+
			constr := None()
	
	type-prop: t -> type
		with
			type := <get-type>t <+
			type := None()

	name-prop: t -> name
		where
			name := <nabl-get-name>t <+
			name := None()

	def-prop: t -> uri
		with
			uri := <nabl-collect-def;nabl-uri;pp-uri>t <+
			uri := None()

	ref-prop: Def(uri) -> <pp-uri>uri	//TODO: remove this when we can use hover without resolving	
	ref-prop: t -> uri
		with
			uri := <nabl-collect-use;nabl-uri;pp-uri>t <+
			uri := None()
	
	nabl-props: t -> <nabl-custom-properties(id);map(nabl-prop(|t))>
	nabl-prop(|t): p -> <nabl-prop>(t, p)
	nabl-prop: (t, property) -> (name, prop)
		with
			name := <pp-nabl-prop-name>property
		with
			prop := <get-properties(|property);de-list>t <+
			prop := None()
	
rules // helper rules: filtering

	not-none: (a, b) -> (a, b)
		where
			<not(eq)>(b, None())
	
	de-list: [] -> None()
	de-list: [a] -> a
	de-list: [a|rest] -> [a|rest]
	
rules // helper rules: formatting
	
	pp-ast = topdown(try(rm-annotations));pp-Relations-string;box2text-string(|80)
	
	pp-cons: t -> $[[<get-constructor> t]/[<get-arguments;length> t]]
	
	pp-uri = reverse-uri;foreign-call(|"Analysis", "make-abstract");foreign-call(|"Analysis", "prettyprint-example");box2text-string(|80)
	
	pp-nabl-prop-name = write-to-string;string-replace(|"NablProp_","");string-replace(|"-"," ");upper-case-first
	
	upper-case-first: string -> <implode-string>[<to-upper>c|hars]
		with [c|hars] := <explode-string>string
	
	pp-property: a -> a
		where is-string
	pp-property: None() -> "-"
	pp-property: a -> <map(pp-property;\x->("",x)\)>a
		where is-list
	pp-property: Def(uri) -> <pp-uri>uri
	pp-property = try(rm-annotations);write-to-string
	
	properties-to-html = map(property-to-html);separate-by(|"<br/>\n");concat-strings
	property-to-html: ("", prop) -> $[[<property-to-html>prop]]
	property-to-html: (name, prop) -> $[<b>[name]</b>: [<property-to-html>prop]]
	property-to-html: list -> $[<div>[<properties-to-html>list]</div>]
		where is-list
	property-to-html: prop -> prop
		