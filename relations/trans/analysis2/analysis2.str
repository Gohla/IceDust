module trans/analysis2/analysis2

imports // constructors
	
	src-gen/signatures/Expressions-sig
	trans/api/_runtime-constructors
	trans/analysis2/constructors

imports // functions

	trans/analysis2/path
	trans/api/_runtime
	trans/api/model-api
	trans/api/model-names-api
	trans/lib/nabl-ext
	trans/lib/graph
	trans/lib/index
	trans/lib/lists-tuples

rules
	
	analysis2 =
		analysis2-clear-index;
		collect-attr-depends-on

	analysis2-clear-index: a -> a
		with
			<_index-clear-source>"analysis2"

rules
	
	collect-attr-depends-on: ast -> ast
		with
			attrs      := <collect(is-attr)>ast;
			paths      := <map(attr-depends-on);concat>attrs;
			<map(path-store-on-origin(|DependsOn()))>paths;
			invPaths   := <map(path-reverse;path-all-tails);concat>paths;
			<map(path-store-on-origin(|FlowsTo()))>invPaths;
			invOrigin* := <map(path-get-origin-name-r);make-set>invPaths;
			attrName*  := <map(attr-get-name)>attrs;
			nodes      := [attrName*, invOrigin*];
			toposort   := <graph-topological-sort(index-get-prop(|FlowsTo());map(path-get-last))>nodes;
			numbers    := <add-indices;map(zip-repeat-1);concat;map(tuple-reverse)>toposort;
			<map(index-store-prop(|TopoSort()))>numbers

	attr-depends-on: attr -> []
		where
			not(attr-get-derivation)

	attr-depends-on: attr -> paths
		where
			derivation := <attr-get-derivation>attr
		with
			attrName   := <attr-get-name>attr;
			pathExprs  := <collect(?MemberAccess(_,_)<+?Ref(_))>derivation;
			paths      := <map(expr-to-path(|attrName));give-all-tasks-results-anno;replace-use-with-defs-anno>pathExprs

rules
