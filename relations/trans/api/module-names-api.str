module api/module-names-api

imports // constructors

	signatures/Model-sig
	api/_runtime-constructors
	desugaring/constructors
  analysis2/constructors
  names/naming/names

imports // functions

	api/_runtime
	api/model-names-api
	lib/index
	lib/origin
	lib/search
	lib/string
	lib/lists-tuples
	
rules // module
	
	modulename-get-entitynames = _nabl-get-child-definitions(|NablNsEntity()) ;make-set-ordered ;map(def-to-name); string-sort-anno
	
	modulename-get-entityinstancenames = _nabl-get-child-definitions(|NablNsEntityInstance()) ;map(def-to-name); string-sort-anno
	
	// string -> [string]
	modulename-get-attributenames = modulename-get-entitynames;map(entityname-get-attributenames);flatten-list
	
	// string -> [[string]]
	modulename-get-attributenames-topo = index-get-prop(|TopoSort());Hd;map(filter(where(is-attributename)));filter(list-not-empty)

	is-modulename = where(is-string;_nabl-uri;_nabl-uri-namespace;?NablNsModule())

  modulename-get-entityinstancenames = _nabl-get-child-definitions(|NablNsEntityInstance()) ;make-set-ordered ;map(def-to-name); string-sort-anno

  modulename-get-exprs = index-get-prop(|AST());flatten-list

  modulename-get-implstr = get-property(|ImplStrategy())
  
  modulename-is-calconread           = where(modulename-get-implstr;?CalcOnRead())
  modulename-is-calconwrite          = where(modulename-get-implstr;?CalcOnWrite())
  modulename-is-eventuallyconsistent = where(modulename-get-implstr;?EventuallyConsistent())

rules // helper

	def-to-name: d@Def(uri) -> name{d} with	name := <_nabl-uri-name>uri

rules
	