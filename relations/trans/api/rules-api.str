module trans/api/rules-api

imports // constructors

	src-gen/signatures/Expressions-sig
	src-gen/signatures/Model-sig
	src-gen/signatures/Rules-sig
	trans/api/constructors
	trans/desugaring/constructors

imports // functions

	trans/lib/origin

rules // query (in all stages of desugaring)

	rule-get-name   = ?Rule(<id>, _, _)
	rule-get-params = ?Rule(_, <id>, _)
	rule-get-body   = ?Rule(_, _, <id>)
	
	param-get-name = ?Param(<id>, _, _)
	param-get-type = ?Param(_, <id>, _)
	param-get-mult = ?Param(_, _, <id>)
	
	rulebody-get-lhs = ?RuleBody(<id>, _, _, _)
	rulebody-get-nhs = ?RuleBody(_, <id>, _, _)
	rulebody-get-rhs = ?RuleBody(_, _, <id>, _)
	
	get-hs = is-lhs;!LHS()
	get-hs = is-nhs;!NHS()
	get-hs = is-rhs;!RHS()

	node-get-varname = ?LHSNode(NaBLHelp(<id>, _), _, _)
	node-get-varname = ?NHSNode(NaBLHelp(<id>, _), _, _)
	node-get-varname = ?RHSNode(NaBLHelp(<id>, _), _, _)

	node-get-varname = ?LHSNode(<id>, _, _)
	node-get-varname = ?NHSNode(<id>, _, _)
	node-get-varname = ?RHSNode(<id>, _, _)
	
	node-get-varname: edge -> node2-var
		where
			(node1-var, edge-var, node2-var) := <edge-get-varnames>edge

	edge-get-varname = ?LHSEdge(LHSTsHelp(_, LHSEdgeName(<id>, _)), _)
	edge-get-varname = ?NHSEdge(NHSTsHelp(_, NHSEdgeName(<id>, _)), _)
	edge-get-varname = ?RHSEdge(RHSTsHelp(_, RHSEdgeName(<id>, _)), _)

	edge-get-varnames: LHSEdge(LHSTsHelp(node1, LHSEdgeName(edge-var, _)), node2) -> (<node-get-varname>node1,edge-var,<node-get-varname>node2)
	edge-get-varnames: NHSEdge(NHSTsHelp(node1, NHSEdgeName(edge-var, _)), node2) -> (<node-get-varname>node1,edge-var,<node-get-varname>node2)
	edge-get-varnames: RHSEdge(RHSTsHelp(node1, RHSEdgeName(edge-var, _)), node2) -> (<node-get-varname>node1,edge-var,<node-get-varname>node2)

	node-get-type = ?LHSNode(_, EntityRef(<id>), _)
	node-get-type = ?NHSNode(_, EntityRef(<id>), _)
	node-get-type = ?RHSNode(_, EntityRef(<id>), _)
	
	node-get-params = ?LHSNode(_, _, <id>)
	node-get-params = ?NHSNode(_, _, <id>)
	node-get-params = ?RHSNode(_, _, <id>)

	edge-get-edgemodel = ?LHSEdge(LHSTsHelp(_, LHSEdgeName(_, <id>)), _)
	edge-get-edgemodel = ?NHSEdge(NHSTsHelp(_, NHSEdgeName(_, <id>)), _)
	edge-get-edgemodel = ?RHSEdge(RHSTsHelp(_, RHSEdgeName(_, <id>)), _)
	
	edge-get-node2 = ?LHSEdge(_, <id>)
	edge-get-node2 = ?NHSEdge(_, <id>)
	edge-get-node2 = ?RHSEdge(_, <id>)
	
	attr-get-name = ?Attr(AttrRef(<id>), _)
	attr-get-expr = ?Attr(_, <id>)
	
	attr-get-expr-ref-name = attr-get-expr;?Ref(<id>)

rules // properties
	
	is-rule = ?Rule(_, _, _)
	
	param-has-no-mult = param-has-mult(|None())
	
	param-has-mult(|mult) = ?Param(_, _, mult) 
	
	is-subrule = ?SubRule(_,_)
	
	subrule-has-no-mult = ?SubRule(None(), _)
	
	is-node = ?LHSNode(_, _, _)
	is-node = ?NHSNode(_, _, _)
	is-node = ?RHSNode(_, _, _)
	
	is-lhs = ?LHSNode(_, _, _)
	is-nhs = ?NHSNode(_, _, _)
	is-rhs = ?RHSNode(_, _, _)
	
	node-has-varname = not(node-has-no-varname)
	
	node-has-no-varname = ?LHSNode(None(), _, _)
	node-has-no-varname = ?NHSNode(None(), _, _)
	node-has-no-varname = ?RHSNode(None(), _, _)
	
	node-has-type = not(node-has-no-type)
	
	node-has-no-type = ?LHSNode(_, None(), _)
	node-has-no-type = ?NHSNode(_, None(), _)
	node-has-no-type = ?RHSNode(_, None(), _)
	node-has-no-type = ?LHSNodeDefByType(_, None(), _)
	node-has-no-type = ?NHSNodeDefByType(_, None(), _)
	node-has-no-type = ?RHSNodeDefByType(_, None(), _)
	node-has-no-type = ?LHSNodeDefByRel(_, None(), _)
	node-has-no-type = ?NHSNodeDefByRel(_, None(), _)
	node-has-no-type = ?RHSNodeDefByRel(_, None(), _)
	
	node-is-def = ?LHSNodeDefByType(_, _, _)
	node-is-def = ?NHSNodeDefByType(_, _, _)
	node-is-def = ?RHSNodeDefByType(_, _, _)
	node-is-def = ?LHSNodeDefByRel(_, _, _)
	node-is-def = ?NHSNodeDefByRel(_, _, _)
	node-is-def = ?RHSNodeDefByRel(_, _, _)
	
	is-edge = ?LHSEdge(_,_)
	is-edge = ?NHSEdge(_,_)
	is-edge = ?RHSEdge(_,_)
	
	is-lhs = ?LHSEdge(_, _)
	is-nhs = ?NHSEdge(_, _)
	is-rhs = ?RHSEdge(_, _)
	
	edge-has-varname = not(edge-has-no-varname)
	
	edge-has-no-varname = ?LHSEdge(LHSTsHelp(_, LHSEdgeName(None(), _)), _)
	edge-has-no-varname = ?NHSEdge(LHSTsHelp(_, NHSEdgeName(None(), _)), _)
	edge-has-no-varname = ?RHSEdge(LHSTsHelp(_, RHSEdgeName(None(), _)), _)
	
	is-attr = ?Attr(_, _)
	
	attr-is-ref = attr-get-expr;?Ref(_)
	attr-is-ref = attr-get-expr;is-string

rules // manipulation
	
	rule-set-body(|body') = rule-set-body(!body')
	
	rule-set-body(body') = Rule(id, id, body')
	
	param-set-mult(|mult) = Param(id, id, !mult)
	
	rulebody-set-lhs(lhs) = RuleBody(lhs, id, id, id)
	rulebody-set-nhs(nhs) = RuleBody(id, nhs, id, id)
	rulebody-set-rhs(rhs) = RuleBody(id, id, rhs, id)
	
	subrule-set-mult(|mult) = SubRule(!mult, id)

	node-set-varname(|node-var') = LHSNode(!node-var', id, id)
	node-set-varname(|node-var') = NHSNode(!node-var', id, id)
	node-set-varname(|node-var') = RHSNode(!node-var', id, id)
	
	node-set-type(|node-type') = LHSNode(id, !EntityRef(node-type');custom-origin(|node-type'), id)
	node-set-type(|node-type') = NHSNode(id, !EntityRef(node-type');custom-origin(|node-type'), id)
	node-set-type(|node-type') = RHSNode(id, !EntityRef(node-type');custom-origin(|node-type'), id)
	
	node-set-params(ps) = LHSNode(id, id, ps)
	node-set-params(ps) = NHSNode(id, id, ps)
	node-set-params(ps) = RHSNode(id, id, ps)
	
	node-set-defuse(|d) = LHSNode(set-nablhelp(|d), id, id)
	node-set-defuse(|d) = NHSNode(set-nablhelp(|d), id, id)
	node-set-defuse(|d) = RHSNode(set-nablhelp(|d), id, id)
	
	node-to-defbytype: LHSNode(a,b,c) -> LHSNodeDefByType(a,b,c)
	node-to-defbytype: NHSNode(a,b,c) -> NHSNodeDefByType(a,b,c)
	node-to-defbytype: RHSNode(a,b,c) -> RHSNodeDefByType(a,b,c)
	node-to-defbytype: LHSNodeDefByRel(a,b,c) -> LHSNodeDefByType(a,b,c)
	node-to-defbytype: NHSNodeDefByRel(a,b,c) -> NHSNodeDefByType(a,b,c)
	node-to-defbytype: RHSNodeDefByRel(a,b,c) -> RHSNodeDefByType(a,b,c)
	
	node-to-defbyrel: LHSNode(a,b,c) -> LHSNodeDefByRel(a,b,c)
	node-to-defbyrel: NHSNode(a,b,c) -> NHSNodeDefByRel(a,b,c)
	node-to-defbyrel: RHSNode(a,b,c) -> RHSNodeDefByRel(a,b,c)
	node-to-defbyrel: LHSNodeDefByType(a,b,c) -> LHSNodeDefByRel(a,b,c)
	node-to-defbyrel: NHSNodeDefByType(a,b,c) -> NHSNodeDefByRel(a,b,c)
	node-to-defbyrel: RHSNodeDefByType(a,b,c) -> RHSNodeDefByRel(a,b,c)
	
	node-to-not-def: LHSNodeDefByType(a,b,c) -> LHSNode(a,b,c)
	node-to-not-def: NHSNodeDefByType(a,b,c) -> NHSNode(a,b,c)
	node-to-not-def: RHSNodeDefByType(a,b,c) -> RHSNode(a,b,c)
	node-to-not-def: LHSNodeDefByRel(a,b,c) -> LHSNode(a,b,c)
	node-to-not-def: NHSNodeDefByRel(a,b,c) -> NHSNode(a,b,c)
	node-to-not-def: RHSNodeDefByRel(a,b,c) -> RHSNode(a,b,c)
	
	edge-set-varname(|v) = LHSEdge(keep-origin(LHSTsHelp(id, keep-origin(LHSEdgeName(!v, id)))), id)	
	edge-set-varname(|v) = NHSEdge(keep-origin(NHSTsHelp(id, keep-origin(NHSEdgeName(!v, id)))), id)	
	edge-set-varname(|v) = RHSEdge(keep-origin(RHSTsHelp(id, keep-origin(RHSEdgeName(!v, id)))), id)

	set-nablhelp(|x) = NaBLHelp(id, keep-origin(!x))
	set-nablhelp(|x) = where(not(?NaBLHelp(_,_)));?a;!NaBLHelp(a, <custom-origin(|a)>x)
	
	edge-set-node2(|n) = LHSEdge(id, !n)
	edge-set-node2(|n) = NHSEdge(id, !n)
	edge-set-node2(|n) = RHSEdge(id, !n)
	
	edge-to-def = LHSEdge(keep-origin(LHSTsHelp(id, edgename-to-def)), id)
	edge-to-def = NHSEdge(keep-origin(NHSTsHelp(id, edgename-to-def)), id)
	edge-to-def = RHSEdge(keep-origin(RHSTsHelp(id, edgename-to-def)), id)
	
	edge-to-not-def = LHSEdge(keep-origin(LHSTsHelp(id, edgename-to-not-def)), id)
	edge-to-not-def = NHSEdge(keep-origin(NHSTsHelp(id, edgename-to-not-def)), id)
	edge-to-not-def = RHSEdge(keep-origin(RHSTsHelp(id, edgename-to-not-def)), id)
	
	edgename-to-def: LHSEdgeName(a, b) -> LHSEdgeNameDef(a, b)
	edgename-to-def: NHSEdgeName(a, b) -> NHSEdgeNameDef(a, b)
	edgename-to-def: RHSEdgeName(a, b) -> RHSEdgeNameDef(a, b)
	
	edgename-to-not-def: LHSEdgeNameDef(a, b) -> LHSEdgeName(a, b)
	edgename-to-not-def: NHSEdgeNameDef(a, b) -> NHSEdgeName(a, b)
	edgename-to-not-def: RHSEdgeNameDef(a, b) -> RHSEdgeName(a, b)
	
	attr-set-name(n) = Attr(keep-origin(AttrRef(n)), id)
	attr-set-expr(|e) = Attr(id, !e)
	
	attr-to-bindvar: Attr(attrRef, Ref(name)) -> AttrBindVar(attrRef, name)
	attr-to-not-bindvar: AttrBindVar(attrRef, name) -> Attr(attrRef, <custom-origin(|name)>Ref(name))

rules // creation
	
	create-node-lhs(|name) = create-node-lhs(|name,None(),None())
	create-node-lhs(|name,type,params) = !LHSNode(name, <custom-origin(|name)>None(), <custom-origin(|name)>None());custom-origin(|name)
