module check

imports

	include/Relations
	lib/editor-common.generated
	desugar
	lib/nabl/-
	lib/task/-
	lib/types/-
	lib/properties/-
	names

rules
	
	constraint-warning:
		EntityTypeDef(x, _) -> (x, $[Entity type names must start with a capital])
		where
			not(<string-starts-with-capital> x)

	constraint-note:	e@Navigator(_, _)	-> (e, $[This is not translated to java yet.])
	// constraint-note:	e@Role(_, _, _)		-> (e, $[This is not translated to java yet.])
	// constraint-note:	e@RoleValue(_, _)	-> (e, $[This is not translated to java yet.])


rules // Check derivation types of attributes
	
	// Non-task-engine version
	// constraint-error:
	// 	x@AttributeValue(AttributeName(name), _) -> (x, $[Derivations cannot be assigned custom values.])
	// 		where
	// 			Derivation() := <get-derivation-type>name
				
	// Task-engine version	
	nabl-constraint(|ctx):
		x@AttributeValue(AttributeName(name), _) -> <fail>
		with
			prop-task := <prop-create-lookup(|ctx, NablProp_derivation-type())> name;
			match     := <derivation-type-match(|ctx, Derivation())> prop-task;
			<task-create-error-on-success(|ctx, match, "Derivations cannot be assigned custom values.")> x


rules // Random experimenting with the task engine
 
	// task engine based (name binding) constraints.
	nabl-constraint(|ctx):
		e@AttributeName(name) -> <fail>
    	where
				<has-annotation(?Use(task))> name;																	//annotation use means that a task should be resolved
    		msg  := "Unresolved reference (from nabl-constraint task based)";
				<task-create-error-on-failure(|ctx, task, msg)> name								//if this task fails: then create the error message


