module trans/checking/check

imports

	lib/editor-common.generated
	lib/nabl/-
	lib/properties/-
	lib/task/-
	lib/types/-

	include/Relations
	
	trans/desugaring/desugar
	trans/naming/-

rules // naming/ ? conventions.str
	
	constraint-warning:
		EntityTypeDef(_, x, _) -> (x, $[Entity type names must start with a capital])
		where
			not(<string-starts-with-capital> x)

rules // naming/data.str

	constraint-error: EntityTypeDef(EntityType(), _, attributesAndRoles) -> <map(no-role);concat> attributesAndRoles
	no-role: x@Role(_,_,_) -> [(x, $[An entity cannot have roles.])]
	no-role: Attribute(_,_,_,_) -> []

rules // naming/data.str check if entities have all the required attributes assigned

	nabl-constraint(|ctx):
		EntityOrRelation(EntityType(e-ty), e, _, as) -> <fail>
		with
			ty-def 		 := <nabl-create-collectdefs(|ctx)> e-ty;
			[ty-attrs] := <nabl-resolve-all-tasks(|ctx, NablNsAttribute(), [])> [ty-def];
			as-defs    := <map(?AttributeValue(Identifier(<nabl-create-collectdefs(|ctx)>), _))> as;	
			as-attrs   := <task-create-combine(|ctx)> as-defs ;
			diff       := <task-create-diff(|ctx)> (ty-attrs, as-attrs);
			diff'      := <nabl-create-propconstraint(|ctx, NablProp_derivation-type(), diff)> Normal();
			diff''     := <nabl-create-propconstraint(|ctx, NablProp_multiplicity(), diff')> One();
			<task-create-error-on-success(|ctx, diff'', ["Provide all required attributes: ", diff''])> e
			
	nabl-constraint(|ctx):
		EntityOrRelation(EntityType(e-ty), e, roles, _) -> <fail>
		with
			ty-def 		 := <nabl-create-collectdefs(|ctx)> e-ty;
			[ty-roles] := <nabl-resolve-all-tasks(|ctx, NablNsRole(), [])> [ty-def];
			as-defs    := <map(?RoleValue(RoleName(<nabl-create-collectdefs(|ctx)>), _))> roles;
			as-roles   := <task-create-combine(|ctx)> as-defs ;
			diff       := <task-create-diff(|ctx)> (ty-roles, as-roles);
			<task-create-error-on-success(|ctx, diff, ["Provide all required roles: ", diff])> e
