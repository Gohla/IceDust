module trans/desugaring/desugar

imports
	include/Relations
	trans/lib/new-name
	
rules

	desugar-all = bottomup(try(desugar);try(flatten-list));generate-entity-names

signature constructors
	
	ModuleDesugared	: ID * ModelDef * DataDef * Executable -> ModuleDesugared

rules // general

	desugar: Some(a) -> a

	desugar: Module(moduleName, model, data, execute) -> ModuleDesugared(moduleName, model, data, execute)

rules // generate omitted multiplicities

	desugar: Attribute(a,b,None(),c) -> Attribute(a,b,One(),c)

rules // generate omitted names

	desugar: Role(EntityType(e), multiplicity, None()) -> Role(EntityType(e), multiplicity, e)

rules // combined navigators into single steps

	desugar: NavigateInOut(prevNav, navType, inRole, relation, outRole) ->
		NavigateOut(
	    NavigateIn(prevNav, NavOr(), inRole, relation)
	  , NavOr(), relation, outRole
	  )	

rules	// custom traversal desugarings

	generate-entity-names: ModuleDesugared(a, b, None(), d)     -> ModuleDesugared(a, b, None(), d)
	generate-entity-names: ModuleDesugared(a, b, DataDef(c), d) -> ModuleDesugared(a, b, DataDef(<new-name-map(try(generate-entity-name))>c), d)
	
	generate-entity-name: (EntityOrRelation(EntityType(e-ty), None(), r, a), history) -> (EntityOrRelation(EntityType(e-ty), e, r, a), history')
		with
			(e, history') := <new-name>(<lcfirst>e-ty, history)
	