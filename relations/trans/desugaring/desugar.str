module trans/desugaring/desugar

imports
	include/Relations

rules


desugar-all = bottomup(try(desugar);try(flatten-list))


/**
 *	Default desugarings
 */
// remove all Some() constructs
desugar: Some(a) -> a

// make the top level construct indicate that it is desugared (we dont want any further processing if its not desugared)
desugar: Module(moduleName, model, data, execute) -> ModuleDesugared(moduleName, model, data, execute)


/**
 *	Expressions
 */
desugar: Addition(e1, e2)				-> 	BinExp(Plus(), e1, e2)
desugar: Subtraction(e1, e2)		-> 	BinExp(Minus(), e1, e2)
desugar: Division(e1, e2) 			-> 	BinExp(Div(), e1, e2)
desugar: Modulo(e1, e2) 				-> 	BinExp(Mod(), e1, e2)
desugar: Multiplication(e1, e2)	-> 	BinExp(Mul(), e1, e2)


/**
 *	Generate omitted names
 */
desugar = generate-role-name

generate-role-name: Role(EntityType(e), multiplicity, None()) -> Role(EntityType(e), multiplicity, e)


/**
 *	Navigators
 */
desugar: NavigateInOut(prevNav, navType, inRole, relation, outRole) ->
	NavigateOut(
    NavigateIn(prevNav, NavOr(), inRole, relation)
  , NavOr(), relation, outRole
  )

	
signature constructors
	ModuleDesugared	: ID * ModelDef * DataDef * Executable -> ModuleDesugared
	
	BinExp 					: Exp * BinOp * Exp -> Exp
	Plus						: BinOp
  Minus						: BinOp
	Div							:	BinOp	
  Mod							:	BinOp
  Mul			:	BinOp