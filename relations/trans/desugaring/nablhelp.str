module trans/desugaring/nablhelp

imports
	
	include/Relations
	trans/desugaring/desugar
	trans/lib/traverse
	trans/lib/origin
	src-gen/signatures/Rules-sig
	
rules
	
	nablhelp =
		nablhelp1;
		nablhelp2;
		nablhelp3;
		nablhelp4;
		nablhelp5
	
	nablhelp1 = try(sometd(entity-add-shortcut-types)) //requires the roles to be untouched
	nablhelp2 = try(sometd(role-duplicate-name))
	
	nablhelp3 = try(sometd(rule-node-variable-def-use))
	nablhelp4 = try(sometd(variable-def-defbyrel)) //requires variables to be def-use
	
	nablhelp5 = try(sometd(rule-attr-variable-def-use))


rules // add types to shortcuts (so we can define in those types the shortcuts)
	
	entity-add-shortcut-types: Entity(a,entityName,members) -> Entity(a,entityName,members')
		with
			role-types := <filter(role-name-and-type)>members;
			members' := <map(try(add-shortcut-types(|role-types)))> members
	
	role-name-and-type: Role(type, _, name, _) -> (name, type)
	
	add-shortcut-types(|role-types): Shortcut(rr1@RoleRef(role1), b, rr2@RoleRef(role2), f) ->
																	 Shortcut(NaBLHelp(rr1, type1), b, NaBLHelp(rr2, type2), f)
		with
			type1 := <role-type>(role1, role-types);
			type2 := <role-type>(role2, role-types)
		
	role-type : (role, role-types) -> type
		with
			(_, type) := <filter(role-type(|role));first>role-types
		<+
			type := ""
	
	role-type(|role): (role2, type) -> <id>
		where
			<eq>(role, role2)

	first: [a] -> a
	first: [a|_] -> a

rules // duplicate role types (so one can define and one can refer)

	role-duplicate-name: Role(a, b, c, d) -> Role(NaBLHelp(a, a), b, c, d)

rules
	
	rule-node-variable-def-use: Rule(n, p, b) -> Rule(n, p, b'')
		with
			params := <map(\Param(n,t,m)->n\)>p;
			(b', _) := <topdown-fold(try(node-variable-def-use))>(b, params);
			b'' := <custom-origin(|b)>b'

	node-variable-def-use: (n@Node(name, er, v), history) -> (<custom-origin(|n)>Node(n-name, er, v), history')
		with
			(n-name, history') := <node-def-use>(name, history)	

	node-def-use: (name, history) -> (name', history')
		with
			if <not(elem)>(name, history) then
				history' := <conc>(history, [name]);
				defuse := Def()
			else
				history' := history;
				defuse := Use()
			end;
			name' := NaBLHelp(name, <custom-origin(|name)>defuse)

rules
	
	variable-def-defbyrel: Edge(e, n@Node(nh@NaBLHelp(v, Def()), None(), a)) -> 
	                       Edge(e, <custom-origin(|n)>Node(<custom-origin(|nh)>NaBLHelp(v, DefByRel()), None(), a))

rules
	
	rule-attr-variable-def-use: Rule(n, p, b) -> Rule(n, p, b'')
		with
			params := <map(\Param(n,t,m)->n\)>p;
			(b', _) := <topdown-fold(try(attr-def-use))>(b, params);
			b'' := <custom-origin(|b)>b'
	
	attr-def-use: (at, history) -> (at'', history')
		where
			Attr(a, r@Ref(name)) := at
		with
			if <not(elem)>(name, history) then
				history' := <conc>(history, [name]);
				at' := Attr(NaBLHelp(a, <custom-origin(|a)>Bind()), name)
			else
				history' := history;
				at' := Attr(NaBLHelp(a, <custom-origin(|a)>Use()), r)
			end;
			at'' := <custom-origin(|at)>at'

