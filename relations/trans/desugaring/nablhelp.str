module trans/desugaring/nablhelp

imports // constructors
	
	trans/api/constructors

imports // functions

	trans/api/model-api
	trans/lib/traverse
	trans/lib/origin
	
rules
	
	nablhelp-before =
		nablhelp1;
		nablhelp2
	
	nablhelp1 = try(sometd(entity-add-shortcut-types)) //requires the roles to be untouched
	nablhelp2 = try(sometd(role-duplicate-type))
	
	nablhelp-after = 
		try(sometd(role-duplicate-type-reverse <+ shortcut-add-type-reverse))

rules // add types to shortcuts (so we can define in those types the shortcuts)
	
	entity-add-shortcut-types: e -> <entity-set-members(|members')>e
		where
			is-entity
		with
			members := <entity-get-members>e;
			role-types := <filter(role-name-and-type)>members;
			members' := <map(try(add-shortcut-types(|role-types)))> members
	
	role-name-and-type: r -> (<role-get-name>r, <role-get-type>r)
			
	add-shortcut-types(|role-types): s -> <create-shortcut(|role1, type1, shortcut1, role2, type2, shortcut2)>
		where
			is-shortcut
		with
			(role1, role2) := <shortcut-get-roles>s;
			type1 := <role-type>(role1, role-types);
			type2 := <role-type>(role2, role-types);
			(shortcut1, shortcut2) := <shortcut-get-shortcuts>s
		
	role-type : (role, role-types) -> type
		with
			(_, type) := <filter(role-type(|role));Hd>role-types
		<+
			type := ""
	
	role-type(|role): (role2, type) -> <id>
		where
			<eq>(role, role2)

rules // duplicate role types (so one can define and one can refer)
	
	role-duplicate-type = role-dup-type

rules
	
	role-duplicate-type-reverse = role-dedup-type
	
rules
	
	shortcut-add-type-reverse =
		where(is-shortcut);
		?s;
		create-shortcut(|<shortcut-get-role1>s, <shortcut-get-shortcut1>s, <shortcut-get-role1>s, <shortcut-get-shortcut2>s)
	
	
	
