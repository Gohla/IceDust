module desugaring/omitted

imports // constructors

	signatures/Types-sig

imports // functions
	
	api/model-api
	api/data-api
	lib/origin
	lib/new-name
	lib/string
  lib/traverse
  lib/lists-tuples

rules
	
	generate-omitted =
		bottomup(try(omitted1));
		bottomup(try(omitted2))
	
	omitted1 = attr-generate-mult
	omitted1 = role-generate-name
	omitted1 = entity-generate-inverse-names
	omitted1 = datadef-generate-entity-names
	omitted1 = shortcutrel-generate-mult
	
	omitted2 = role-generate-ord                // matches same as role-generate-name
	omitted2 = entity-generate-shortcuts        // requires role-generate-name
	omitted2 = shortcutrel-to-rel               // requires shortcutrel-generate-mult

rules // generate omitted multiplicities

	attr-generate-mult: attr -> attr'
		where	attr-has-no-mult
		with attr':= <attr-set-mult(|One())>attr

rules // generate omitted role names

	role-generate-name: role -> role'
		where role-has-no-name
		with role' := <role-set-name(|<role-get-type;keep-origin(lcfirst)>role)>role

rules // generate omitted role orderings

	role-generate-ord: role -> role'
		where role-has-no-ord
		with role' := <role-set-ord(|Unordered())>role
			
rules // generate omitted inverse names
	
	entity-generate-inverse-names:
		e -> <entity-set-members(map(try(generate-inverse-name(|<entity-get-name>e, <entity-duplicate-role-types>e))))>e
			where is-entity

	generate-inverse-name(|entityName, dupRoleTypes): role -> role'
		where role-has-no-inversename
		where <not(elem)>(<role-get-type>role, dupRoleTypes)
		with role' := <role-set-inversename(|<custom-origin(|<role-get-type>role)><lcfirst>entityName)>role
		
  generate-inverse-name(|entityName, dupRoleTypes): role -> role'
    where role-has-no-inversename
    where <elem>(<role-get-type>role, dupRoleTypes)
    with role' := <role-set-inversename(|<custom-origin(|<role-get-type>role)>$[[<lcfirst>entityName]As[<role-get-name;ucfirst>role]])>role
    
  entity-duplicate-role-types = entity-get-members;filter(is-role);map(role-get-type);list-duplicates;make-set

rules	// generate omitted entity names

	datadef-generate-entity-names: d -> <datadef-set-data(|c'')>d
		where
			is-datadef
		with
			c := <datadef-get-data>d;
			(c', _) := <map-fold(try(generate-entity-name))>(c, []);
			c'' := <custom-origin(|c)>c'

	generate-entity-name: (ei, history) -> (ei', history')
		where
			<entityinstance-has-no-name>ei
		with
			(e, history') := <new-name>(<entityinstance-get-type;lcfirst>ei, history);
			ei' := <entityinstance-set-name(|<custom-origin(|<entityinstance-get-type>ei)>e)>ei
	
rules // generate omitted shortcuts

	entity-generate-shortcuts: e -> <entity-set-members(|members'')>e
		where
			is-entity
		with
			members				:= <entity-get-members>e;
			roles 				:= <filter(role-get-name);keep-origin(string-sort)>members;
			shortcuts			:= <filter(shortcut-get-roles-ordered)>members;
			shortcuts-all := <join-half>roles;
			shortcuts-add := <diff>(shortcuts-all, shortcuts);
			members-new		:= <map(create-shortcut-with-same-name)>shortcuts-add;
			members'			:= <conc>(members,members-new);
			members''			:= <custom-origin(|members)>members'
	
	join-half: [] -> []
	
	join-half: [h|t] -> <conc>(r,r2)
		with
			r := <join-half> t;
			r2:= <map(pair-with(|h))>t
			
	pair-with(|h): t -> (h,t)

	create-shortcut-with-same-name: (role1,role2) -> <create-shortcut(|role1, role2, role2, role1)>

rules

  shortcutrel-generate-mult: ShortcutRelation(e1, s1, None(), o1, None(), o2, e2, s2, attrs) -> ShortcutRelation(e1, s1, ZeroOrMore(), o1, ZeroOrMore(), o2, e2, s2, attrs)
  shortcutrel-generate-mult: ShortcutRelation(e1, s1, None(), o1, m2    , o2, e2, s2, attrs) -> ShortcutRelation(e1, s1, ZeroOrMore(), o1, m2,           o2, e2, s2, attrs)
  shortcutrel-generate-mult: ShortcutRelation(e1, s1, m1,     o1, None(), o2, e2, s2, attrs) -> ShortcutRelation(e1, s1, m1,           o1, ZeroOrMore(), o2, e2, s2, attrs)

rules

  shortcutrel-to-rel:
    scr@ShortcutRelation(EntityRef(e1), s1, m1, o1, m2, o2, EntityRef(e2), s2, attrs) ->
    <custom-origin(|scr)>Entity(
      <custom-origin(|e1)>RelationType()
    , relname
    , [ <custom-origin(|e2)>Role(e1, m1, o1, s2, invname2)
      , <custom-origin(|e1)>Role(e2, m2, o2, s1, invname1)
      , <custom-origin(|e1)>Shortcut(<custom-origin(|s1)>RoleRef(s1), s2, <custom-origin(|s2)>RoleRef(s2), s1)
      | attrs
      ]
    )
      with
        relname := <custom-origin(|e1)>$[[e1][<ucfirst>s1]];
        invname1 := <custom-origin(|e1)>$[[<lcfirst>e1][<ucfirst>s1]];
        invname2 := <custom-origin(|e2)>$[[<lcfirst>e2][<ucfirst>s2]]

  
	