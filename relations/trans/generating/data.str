module trans/generating/data

imports

	lib/java/Java
	include/Relations

rules
	
  to-java(error-handler): DataDef(defs) -> <map(to-java(error-handler));concat> defs
  
  to-java(error-handler): EntityOrRelation(
        EntityType(entityType)
      , entityName
      , roleValues
      , attributeValues
      )
      ->
      <concat>[[
      LocalVarDecStm(
          LocalVarDec(
            []
          , ClassOrInterfaceType(TypeName(Id(entityType)), None())
          , [ VarDec(
                Id(entityName)
              , NewInstance(
                  None()
                , ClassOrInterfaceType(TypeName(Id(entityType)), None())
                , []
                , None()
                )
              )
            ]
          )
        )],
        attributeValuesJava,
        roleValuesJava
        ]
	with
		attributeValuesJava := <map(to-java(error-handler|entityName))> attributeValues;
		roleValuesJava			:= <map(to-java(error-handler|entityName, entityType));concat> roleValues

  to-java(error-handler|entityName) : AttributeValue(Identifier(attributeName), attributeValue) ->
	  	ExprStm(
        Invoke(
          Method(MethodName(AmbName(Id(entityName)), Id($[set_[attributeName]])))
        , [attributeValueJava]
        )
	    )
    where
    	attributeValueJava := <to-java(error-handler)>attributeValue
    	
  to-java(error-handler|entityName, entityType) :
  	RoleValue(RoleName(roleName), Identifier(otherEntityName)) ->
  	[	
  		ExprStm(
		      Assign(
		        ExprName(AmbName(Id(entityName)), Id(roleName))
		      , ExprName(Id(otherEntityName))
		      )
		    )
		  , ExprStm(
		      Invoke(
		        Method(
		          MethodName(
		            AmbName(AmbName(Id(otherEntityName)), Id($[[entityType]_[roleName]]))
		          , Id("add")
		          )
		        )
		      , [ExprName(Id(entityName))]
		      )
		    )
		 ]
  

  to-java(error-handler): String(value) -> Lit(String([Chars(value)]))
  to-java(error-handler): Int(value) -> Lit(Deci(value))