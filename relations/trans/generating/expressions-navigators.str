module trans/generating/expressions-navigators

imports
	
	lib/nabl/interface
	lib/nabl/uri
	lib/types/query
	
	include/Relations
	lib/java/Java
	
	trans/naming/names
	trans/generating/expressions
	trans/generating/types

rules 
    
	exp-to-java-stm(err|i): e@NavigateIn(prevNav, _, RoleName(roleInName), EntityType(x_relationName)) -> (stms, exp)
		with
			x_call := $[[roleInName]_in];
			(stms*, prevJava) := <exp-to-java-stm(err|i)>prevNav;
			refty := <java-type>e;
			j := <add>(i, <length>stms*);
			x_var := $[var[<inc>j]]
		with
			stms := bstm* |[
				~stms*
				refty x_var = x_relationName.x_call(~prevJava);
			]|;
			exp := expr |[x_var]|
  
  exp-to-java-stm(err|i): e@NavigateOut(prevNav, _, EntityType(x_relationName), RoleName(roleOutName)) -> (stms, exp)
		with
			x_call := $[[roleOutName]_out];
			(stms*, prevJava) := <exp-to-java-stm(err|i)>prevNav;
			refty := <java-type>e;
			j := <add>(i, <length>stms*);
			x_var := $[var[<inc>j]]
		with
			stms := bstm* |[
				~stms*
				refty x_var = x_relationName.x_call(~prevJava);
			]|;
			exp := expr |[x_var]|

rules // member access

	exp-to-java-stm(err|i): e@MemberAccess(e1, name) -> (stms, exp)
		where
			NablNsRole() := <nabl-uri;nabl-uri-namespace>name
		// with
		// 	x_expType := <get-type>e1;
		// 	x_getter := $[get_[name]];
		// 	(stms*, e1exp) := <exp-to-java-stm(err|i)>e1;
		// 	refty := <java-type>e;
		// 	j := <add>(i, <length>stms*);
		// 	x_var := $[var[<inc>j]]
		// with
		// 	stms := bstm* |[
		// 		~stms*
		// 		refty x_var = x_expType.x_getter(~e1exp);
		// 	]|;
		// 	exp := expr |[x_var]|
		with
			x_call := $[[name]_out];
			(stms*, prevJava) := <exp-to-java-stm(err|i)>e1;
			refty := <java-type>e;
			j := <add>(i, <length>stms*);
			x_var := $[var[<inc>j]];
			x_relationName := <nabl-uri;nabl-uri-parent;nabl-uri-name> name
		with
			stms := bstm* |[
				~stms*
				refty x_var = x_relationName.x_call(~prevJava);
			]|;
			exp := expr |[x_var]|
	
	exp-to-java-stm(err|i): e@MemberAccess(e1, name) -> (stms, exp)
		where
			NablNsInverse() := <nabl-uri;nabl-uri-namespace>name
		with
			<debug> "Inverse";
			<debug> name
		with
			x_expType := <get-type>e1;
			x_getter := $[get_[name]];
			(stms*, e1exp) := <exp-to-java-stm(err|i)>e1;
			refty := <java-type>e;
			j := <add>(i, <length>stms*);
			x_var := $[var[<inc>j]]
		with
			stms := bstm* |[
				~stms*
				refty x_var = x_expType.x_getter(~e1exp);
			]|;
			exp := expr |[x_var]|