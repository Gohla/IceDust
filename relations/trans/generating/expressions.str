module trans/generating/expressions

imports

	include/Relations
	lib/java/Java

	trans/generating/expressions-navigators
	trans/generating/expressions-references
	trans/generating/types

rules // math

	lib-call: Addition(_, _)				->"plus"
	lib-call: Subtraction(_, _)			->"minus"
	lib-call: Division(_, _) 				->"div"
	lib-call: Modulo(_, _) 					->"mod"
	lib-call: Multiplication(_, _)	->"mul"

rules // logic
	
	lib-call: Not(_)								->"not"
	lib-call: LessThan(_, _)				->"lt"
	lib-call: LessThanEqual(_, _)		->"lte"
	lib-call: GreaterThan(_, _)			->"gt"
	lib-call: GreaterThanEqual(_,_)	->"gte"
	lib-call: Equal(_, _)						->"eq"
	lib-call: Inequal(_, _)					->"neq"
	lib-call: And(_, _)							->"and"
	lib-call: Or(_, _)							->"or"
	lib-call: TernaryConditional(_,_,_)->"conditional"

rules // aggregations
	
	lib-call: Max(_)								->"max"
	lib-call: Min(_)								->"min"
	lib-call: Avg(_)								->"avg"
	lib-call: Sum(_)								->"sum"
	lib-call: Concat(_)							->"concat"
	lib-call: Count(_)							->"count"

rules // multiplicities
	
	lib-call: Merge(_, _)						->"merge"
	lib-call: ChoiceLeft(_, _)			->"choice"

rules // lib expression calls
	
	exp-to-java-stm(err): e -> (stms, exp)
		where
			x_method := <lib-call>e;
			[e1] := <get-arguments>e
		with
			(exp1s*, exp1j) := <exp-to-java-stm(err)>e1;
			refty := <java-type>e;
			x_var := <newname>"var"
		with
			stms := bstm*|[
				~exp1s*
				refty x_var = Expressions.x_method(~exp1j);
			]|;
			exp := expr |[x_var]|
		
	exp-to-java-stm(err): e -> (stms, exp)
		where
			x_method := <lib-call>e;
			[e1, e2] := <get-arguments>e
		with
			(exp1s*, exp1j) := <exp-to-java-stm(err)>e1;
			(exp2s*, exp2j) := <exp-to-java-stm(err)>e2;
			refty := <java-type>e;
			x_var := <newname>"var"
		with
			stms := bstm*|[
				~exp1s*
				~exp2s*
				refty x_var = Expressions.x_method(~exp1j, ~exp2j);
			]|;
			exp := expr |[x_var]|
	
	exp-to-java-stm(err): e -> (stms, exp)
		where
			x_method := <lib-call>e;
			[e1, e2, e3] := <get-arguments>e
		with
			(exp1s*, exp1j) := <exp-to-java-stm(err)>e1;
			(exp2s*, exp2j) := <exp-to-java-stm(err)>e2;
			(exp3s*, exp3j) := <exp-to-java-stm(err)>e3;
			refty := <java-type>e;
			x_var := <newname>"var"
		with
			stms := bstm*|[
				~exp1s*
				~exp2s*
				~exp3s*
				refty x_var = Expressions.x_method(~exp1j, ~exp2j, ~exp3j);
			]|;
			exp := expr |[x_var]|

rules // literals
	
  exp-to-java-stm(err): String(value) 				-> ([], Lit(String([Chars(value)])))
  exp-to-java-stm(err): Int(value) 						-> ([], Lit(Deci(value)))
  exp-to-java-stm(err): True() 								-> ([], Lit(True()))
  exp-to-java-stm(err): False() 							-> ([], Lit(False()))

rules

  exp-to-java-stm(err): a -> (a', a')
	where
	  a' := <err>$[No exp-to-java-stm defined for [<get-constructor> a]/[<get-arguments;length> a].]

