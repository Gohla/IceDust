module trans/generating/java/data

imports // constructors

	lib/java/Java
	src-gen/signatures/data-sig
	src-gen/signatures/expressions-sig
	src-gen/signatures/model-sig
	src-gen/signatures/modules-sig

imports // functions

	trans/generating/java/expressions
	trans/naming/names
	trans/naming/_notNaBL // TODO move code

rules
	
  to-java(err): DataDef(defs) -> <map(to-java(err));concat> defs

	to-java(err): EntityInstance(
									EntityRef(x_type)
								, x_name
								, roleValues
								, attributeValues
								)
  -> 
 	|[
    x_type x_name = new x_type();
    ~attributeValuesJava*
    ~roleValuesJava*
 	]|
	with
		attributeValuesJava* := <map(to-java(err|x_name))> attributeValues;
		roleValuesJava*			:= <map(to-java(err|x_name, x_type));concat> roleValues

  to-java(err|x_name) : AttributeValue(AttributeRef(attributeName), attributeValue) ->
		stm |[
			x_name.x_setter(~attributeValueJava);
		]|
	  with
	  	x_setter := $[set_[attributeName]];
	  	(_, attributeValueJava) := <exp-to-java-stm(err|0)>attributeValue

  to-java(err|x_entityName, entityType) :	RoleValue(RoleRef(x_roleName), EntityInstanceRef(x_otherName)) -> [result1, result2]
		with
			x_roleNameOther := $[[entityType]_[x_roleName]];
			multiplicity := <get-multiplicity-inverse>x_roleName
		with
			result1 := stm |[ x_entityName.x_roleName = x_otherName; ]|;
			if <upper-many>multiplicity then
				result2 := stm |[ x_otherName.x_roleNameOther.add(x_entityName);]|
			else
				result2 := stm |[ x_otherName.x_roleNameOther = x_entityName;]|
			end
			  
