module generating/java/model

imports // constructors

	api/constructors
	java/Java
	signatures/Model-sig
	signatures/Modules-sig
	desugaring/constructors

imports // functions

	api/_runtime
  api/model-names-api
  names/naming/names
	naming/_notNaBL
	generating/_ir/model
	generating/java/expressions
	generating/java/types

rules

  model-entityname-to-java-typedec(err): x_name -> result
    where
      is-entityname
    with
      attributesJava*   := <entityname-get-attributenames;map(model-attributename-to-java-classbodydecs(err));flatten-list>x_name;
      rolesJava*        := <entityname-get-rolenames     ;map(model-rolename-to-java-classbodydecs(err)     );flatten-list>x_name;
      inversesJava*     := <entityname-get-inversenames  ;map(model-inversename-to-java-classbodydecs(err)  );flatten-list>x_name;
      shortcutsJava*    := <entityname-get-shortcutnames ;map(model-shortcutname-to-java-classbodydecs(err) );flatten-list>x_name;
      initInversesJava* := <entityname-get-inversenames  ;map(model-init-inversename-to-java-stm(err)       )             >x_name
    with
      result := type-dec |[
        class x_name
        {
          public x_name()
          {
            ~initInversesJava*
          }
          ~attributesJava*
          ~rolesJava*
          ~shortcutsJava*
          ~inversesJava*
        }
      ]|

rules

  model-attributename-to-java-classbodydecs(err): x_attributeName -> [result1*,result-calculate*,result-cache*,result-get*,result3*]
    where
      is-attributename
    with
      x_entityName                := <attributename-get-entityname>x_attributeName;
      x_attributeType             := <_get-type;type-to-java(err)>x_attributeName;
      x_getAttribute              := <name-get>x_attributeName;
      x_setAttribute              := <name-set>x_attributeName;
      x_calculateAttribute        := <name-calculate>x_attributeName;
      x_attributeCache            := <name-cache>x_attributeName;
      x_updateAttributeCache      := <name-update-cache>x_attributeName;
      x_dirtyAttribute            := <name-dirty>x_attributeName;
      x_getAndEmptyDirtyAttribute := <name-getandemptydirty>x_attributeName;
      x_updateAllAttributeCache   := <name-updateallcache>x_attributeName;
      x_moduleName                := <entityname-get-modulename>x_entityName
    with
      if attributename-is-default <+ attributename-is-derivation then
        (stms*, exp) := <attributename-get-expr;exp-to-java-stm(err|0)>x_attributeName
      end
    with
      if attributename-is-normal <+ attributename-is-default then
        result1* := class-body-dec* |[
          private x_attributeType x_attributeName;
          
          public void x_setAttribute(x_attributeType x_attributeName)
          { 
            this.x_attributeName = x_attributeName;
          }
        ]|
      else
        result1* := []
      end
    with
      if attributename-is-default <+ attributename-is-derivation then
        result-calculate* := class-body-dec* |[
          public x_attributeType x_calculateAttribute()
          { 
            ~stms*
            return ~exp;
          }
        ]|
      else
        result-calculate* := []
      end
    with
      if (attributename-is-default <+ attributename-is-derivation); attributename-is-calconwrite then
        result-cache* := class-body-dec* |[
          private x_attributeType x_attributeCache;
          
          public void x_updateAttributeCache()
          {
            this.x_attributeCache = x_calculateAttribute();
          }
          
          private static Collection<x_entityName> x_dirtyAttribute = Expressions.emptyCollection();
          
          public static Collection<x_entityName> x_getAndEmptyDirtyAttribute()
          {
            Collection<x_entityName> values = x_dirtyAttribute;
            x_dirtyAttribute = Expressions.emptyCollection();
            return values;
          }
          
          private static void x_updateAllAttributeCache(){
            for(x_entityName en : x_getAndEmptyDirtyAttribute()){
              en.x_updateAttributeCache();
            }
          }
        ]|
      else
        result-cache* := []
      end
    with
      if attributename-is-normal then
        result-get* := class-body-dec* |[
          public x_attributeType x_getAttribute()
          { 
            return x_attributeName;
          }
        ]|
      else if attributename-is-default; attributename-is-calconread then
        result-get* := class-body-dec* |[
          public x_attributeType x_getAttribute()
          { 
            if(x_attributeName != null)
              return x_attributeName;
            return x_calculateAttribute();
          }
        ]|
      else if attributename-is-default; attributename-is-calconwrite then
        result-get* := class-body-dec* |[
          public x_attributeType x_getAttribute()
          { 
            if(x_attributeName != null)
              return x_attributeName;
            return x_attributeCache;
          }
        ]|
      else if attributename-is-derivation; attributename-is-calconread then
        result-get* := class-body-dec* |[
          public x_attributeType x_getAttribute()
          { 
            return x_calculateAttribute();
          }
        ]|
      else
        result-get* := class-body-dec* |[
          public x_attributeType x_getAttribute()
          { 
            return x_attributeCache;
          }
        ]|
      end end end end
    with
      result3* := class-body-dec* |[
        public static x_attributeType x_getAttribute(x_entityName c)
        { 
          return c == null ? null : c.x_getAttribute();
        }
        
        public static Collection<x_attributeType> x_getAttribute(Collection<x_entityName> c)
        { 
          Collection<x_attributeType> result = Expressions.emptyCollection();
          for(x_entityName n : c)
          { 
            x_attributeType v = n.x_getAttribute();
            if(v != null)
              result.add(v);
          }
          return result;
        }
      ]|

rules

  model-rolename-to-java-classbodydecs(err): x_roleName -> [result1*,result2*]
    where
      is-rolename
    with
      x_inverseName          := <rolename-get-inversename>x_roleName;
      x_entityName           := <attributename-get-entityname>x_inverseName;
      x_relationName         := <attributename-get-entityname>x_roleName;
      x_setInversePrivate    := <name-set-private>x_inverseName;
      x_getRole              := <name-get>x_roleName;
      x_setRole              := <name-set>x_roleName;
      x_addInversePrivate    := <name-add-private>x_inverseName;
      x_removeInversePrivate := <name-remove-private>x_inverseName
    with
      result1* := class-body-dec* |[
        private x_entityName x_roleName;
      
        public x_entityName x_getRole()
        { 
          return this.x_roleName;
        }
      
        public static x_entityName x_getRole(x_relationName en)
        { 
          return en == null ? null : en.x_roleName;
        }
      
        public static Collection<x_entityName> x_getRole(Collection<x_relationName> ens)
        { 
          Collection<x_entityName> result = Expressions.emptyCollection();
          for(x_relationName en : ens)
          { 
            result.add(en.x_roleName);
          }
          return result;
        }
      ]|
    with
      if get-multiplicity-inverse;upper-one then
        result2* := class-body-dec* |[
          public void x_setRole(x_entityName en)
          { 
            if(x_roleName != null){
              x_roleName.x_setInversePrivate(null);
            }
            if(en != null){
              en.x_setInversePrivate(this);
            }
            this.x_roleName = en;
          }
        ]|
      else
        result2* := class-body-dec* |[
          public void x_setRole(x_entityName en)
          { 
            if(x_roleName != null){
              x_roleName.x_removeInversePrivate(this);
            }
            if(en != null){
              en.x_addInversePrivate(this);
            }
            this.x_roleName = en;
          }
        ]|
      end

rules

  model-inversename-to-java-classbodydecs(err): x_inverseName -> result
    where
      is-inversename
    with
      x_roleName             := <inversename-get-rolename>x_inverseName;
      x_entityName           := <attributename-get-entityname>x_inverseName;
      x_relationName         := <attributename-get-entityname>x_roleName;
      x_getInverse           := <name-get>x_inverseName;
      x_setInverse           := <name-set>x_inverseName;
      x_setInversePrivate    := <name-set-private>x_inverseName;
      x_setRole              := <name-set>x_roleName;
      x_addInverse           := <name-add>x_inverseName;
      x_addInversePrivate    := <name-add-private>x_inverseName;
      x_removeInverse        := <name-remove>x_inverseName;
      x_removeInversePrivate := <name-remove-private>x_inverseName
    with
      if get-multiplicity;upper-one then
        result := class-body-dec* |[
          public x_relationName x_inverseName;
          
          public void x_setInverse(x_relationName en)
          { 
            if(en != null){
              en.x_setRole(this);
            }
            if(x_inverseName != null){
              x_inverseName.x_setRole(null);
            }
          }
          
          protected void x_setInversePrivate(x_relationName en)
          { 
            this.x_inverseName = en;
          }
          
          public x_relationName x_getInverse()
          { 
            return this.x_inverseName;
          }
        
          public static x_relationName x_getInverse(x_entityName en)
          { 
            return en == null ? null : en.x_inverseName;
          }
        
          public static Collection<x_relationName> x_getInverse(Collection<x_entityName> ens)
          { 
            Collection<x_relationName> result = Expressions.emptyCollection();
            for(x_entityName en : ens)
            { 
              result.add(en.x_inverseName);
            }
            return result;
          }
        ]|
      else
        result := class-body-dec* |[
          private Collection<x_relationName> x_inverseName;
          
          protected void x_addInverse(x_relationName en)
          { 
            en.x_setRole(this);
          }
          
          protected void x_removeInverse(x_relationName en)
          { 
            en.x_setRole(null);
          }
          
          protected void x_addInversePrivate(x_relationName en)
          { 
            this.x_inverseName.add(en);
          }
          
          protected void x_removeInversePrivate(x_relationName en)
          { 
            this.x_inverseName.remove(en);
          }
          
          public Collection<x_relationName> x_getInverse()
          { 
            return this.x_inverseName;
          }
        
          public static Collection<x_relationName> x_getInverse(x_entityName en)
          {
            Collection<x_relationName> empty = Expressions.emptyCollection();
            return en == null ? empty : en.x_inverseName;
          }
        
          public static Collection<x_relationName> x_getInverse(Collection<x_entityName> ens)
          { 
            Collection<x_relationName> result = Expressions.emptyCollection();
            for(x_entityName en : ens)
            { 
              result.addAll(en.x_inverseName);
            }
            return result;
          }
        ]|
      end

rules

  model-shortcutname-to-java-classbodydecs(err): x_shortcutName -> result
    where
      is-shortcutname
    with
      x_sourceEntityName := <attributename-get-entityname>x_shortcutName;
      x_targetEntityName := <_get-type>x_shortcutName;
      x_inverseName      := <shortcutname-get-inversename>x_shortcutName;
      x_roleName         := <shortcutname-get-rolename>x_shortcutName;
      x_relationName     := <attributename-get-entityname>x_roleName;
      x_getShortcut      := <name-get>x_shortcutName;
      x_getInverse       := <name-get>x_inverseName;
      x_getRole          := <name-get>x_roleName
    with
      if get-multiplicity;upper-one then
        result := class-body-dec* |[
          public x_targetEntityName x_getShortcut()
          { 
            return x_relationName.x_getRole(this.x_getInverse());
          }
        
          public static x_targetEntityName x_getShortcut(x_sourceEntityName en)
          { 
            return en == null ? null : x_relationName.x_getRole(en.x_getInverse());
          }
        
          public static Collection<x_targetEntityName> x_getShortcut(Collection<x_sourceEntityName> ens)
          { 
            Collection<x_targetEntityName> result = Expressions.emptyCollection();
            for(x_sourceEntityName en : ens)
            { 
              result.add(x_relationName.x_getRole(en.x_getInverse()));
            }
            return result;
          }
        ]|
      else
        result := class-body-dec* |[
          public Collection<x_targetEntityName> x_getShortcut()
          { 
            return x_relationName.x_getRole(this.x_getInverse());
          }
        
          public static Collection<x_targetEntityName> x_getShortcut(x_sourceEntityName en)
          { 
            return en == null ? null : x_relationName.x_getRole(en.x_getInverse());
          }
        
          public static Collection<x_targetEntityName> x_getShortcut(Collection<x_sourceEntityName> ens)
          { 
            Collection<x_targetEntityName> result = Expressions.emptyCollection();
            for(x_sourceEntityName en : ens)
            { 
              result.addAll(x_relationName.x_getRole(en.x_getInverse()));
            }
            return result;
          }
        ]|
      end

rules

  model-init-inversename-to-java-stm(err): x_inverseName -> result
    with
      if <get-multiplicity;upper-one> x_inverseName then
        result := java:block-stm |[
          x_inverseName = null;
        ]|
      else
        result := java:block-stm |[
          x_inverseName = Expressions.emptyCollection();
        ]|
      end
