module generating/java/model

imports // constructors

	api/constructors
	java/Java
	signatures/Model-sig
	signatures/Modules-sig
	desugaring/constructors

imports // functions

	api/_runtime
  api/model-names-api
  names/naming/names
	naming/_notNaBL
	generating/_ir/model
	generating/java/expressions
	generating/java/types

rules

  model-entityname-to-java-typedec(err): x_name -> result
    where
      is-entityname
    with
      attributesJava*   := <entityname-get-attributenames;map(model-attributename-to-java-classbodydecs(err));flatten-list>x_name;
      rolesJava*        := <entityname-get-rolenames     ;map(model-rolename-to-java-classbodydecs(err)     );flatten-list>x_name;
      inversesJava*     := <entityname-get-inversenames  ;map(model-inversename-to-java-classbodydecs(err)  );flatten-list>x_name;
      shortcutsJava*    := <entityname-get-shortcutnames ;map(model-shortcutname-to-java-classbodydecs(err) );flatten-list>x_name;
      initInversesJava* := <entityname-get-inversenames  ;map(model-init-inversename-to-java-stm(err)       )             >x_name
    with
      result := type-dec |[
        class x_name
        {
          public x_name()
          {
            ~initInversesJava*
          }
          ~attributesJava*
          ~rolesJava*
          ~shortcutsJava*
          ~inversesJava*
        }
      ]|

rules

  model-attributename-to-java-classbodydecs(err): x_name -> [result1*,result2*,result3*]
    where
      is-attributename
    with
      x_entity := <attributename-get-entityname>x_name;
      x_type   := <_get-type;type-to-java(err)>x_name;
      x_getter := <name-get>x_name;
      x_setter := <name-set>x_name
    with
      if attributename-is-default <+ attributename-is-derivation then
        (stms*, exp) := <attributename-get-expr;exp-to-java-stm(err|0)>x_name
      end
    with
      if attributename-is-normal <+ attributename-is-default then
        result1* := class-body-dec* |[
          private x_type x_name;
          
          public void x_setter(x_type x_name)
          { 
            this.x_name = x_name;
          }
        ]|
      else
        result1* := []
      end
    with
      if attributename-is-normal then
        result2* := class-body-dec* |[
          public x_type x_getter()
          { 
            return x_name;
          }
        ]|
      else if attributename-is-default then
        result2* := class-body-dec* |[
          public x_type x_getter()
          { 
            if(x_name != null)
              return x_name;
            ~stms*
            return ~exp;
          }
        ]|
      else
        result2* := class-body-dec* |[
          public x_type x_getter()
          { 
            ~stms*
            return ~exp;
          }
        ]|
      end end
    with
      result3* := class-body-dec* |[
        public static x_type x_getter(x_entity c)
        { 
          return c == null ? null : c.x_getter();
        }
        
        public static Collection<x_type> x_getter(Collection<x_entity> c)
        { 
          Collection<x_type> result = Expressions.emptyCollection();
          for(x_entity n : c)
          { 
            x_type v = n.x_getter();
            if(v != null)
              result.add(v);
          }
          return result;
        }
      ]|

rules

  model-rolename-to-java-classbodydecs(err): x_roleName -> [result1*,result2*]
    where
      is-rolename
    with
      x_inverseName := <rolename-get-inversename>x_roleName;
      x_entityType  := <attributename-get-entityname>x_inverseName;
      x_relType     := <attributename-get-entityname>x_roleName;
      x_setinv      := <name-set-private>x_inverseName;
      x_getter      := <name-get>x_roleName;
      x_setter      := <name-set>x_roleName;
      x_relRole     := <rolename-entitynamerolename>x_roleName;
      x_invadd      := <name-add-private>x_inverseName;
      x_invremove   := <name-remove-private>x_inverseName
    with
      result1* := class-body-dec* |[
        private x_entityType x_roleName;
      
        public x_entityType x_getter()
        { 
          return this.x_roleName;
        }
      
        public static x_entityType x_getter(x_relType en)
        { 
          return en == null ? null : en.x_roleName;
        }
      
        public static Collection<x_entityType> x_getter(Collection<x_relType> ens)
        { 
          Collection<x_entityType> result = Expressions.emptyCollection();
          for(x_relType en : ens)
          { 
            result.add(en.x_roleName);
          }
          return result;
        }
      ]|
    with
      if get-multiplicity-inverse;upper-one then
        result2* := class-body-dec* |[
          public void x_setter(x_entityType en)
          { 
            if(x_roleName != null){
              x_roleName.x_setinv(null);
            }
            if(en != null){
              en.x_setinv(this);
            }
            this.x_roleName = en;
          }
        ]|
      else
        result2* := class-body-dec* |[
          public void x_setter(x_entityType en)
          { 
            if(x_roleName != null){
              x_roleName.x_invremove(this);
            }
            if(en != null){
              en.x_invadd(this);
            }
            this.x_roleName = en;
          }
        ]|
      end

rules

  model-inversename-to-java-classbodydecs(err): x_inverseName -> result
    where
      is-inversename
    with
      roleName     := <inversename-get-rolename>x_inverseName;
      x_entityType := <attributename-get-entityname>x_inverseName;
      x_relType    := <attributename-get-entityname>roleName;
      x_setter     := <name-set>x_inverseName;
      x_setpriv    := <name-set-private>x_inverseName;
      x_setrole    := <name-set>roleName;
      x_getter     := <name-get>x_inverseName;
      x_add        := <name-add>x_inverseName;
      x_remove     := <name-remove>x_inverseName;
      x_addpriv    := <name-add-private>x_inverseName;
      x_removepriv := <name-remove-private>x_inverseName
    with
      if get-multiplicity;upper-one then
        result := class-body-dec* |[
          public x_relType x_inverseName;
          
          public void x_setter(x_relType en)
          { 
            if(en != null){
              en.x_setrole(this);
            }
            if(x_inverseName != null){
              x_inverseName.x_setrole(null);
            }
          }
          
          protected void x_setpriv(x_relType en)
          { 
            this.x_inverseName = en;
          }
          
          public x_relType x_getter()
          { 
            return this.x_inverseName;
          }
        
          public static x_relType x_getter(x_entityType en)
          { 
            return en == null ? null : en.x_inverseName;
          }
        
          public static Collection<x_relType> x_getter(Collection<x_entityType> ens)
          { 
            Collection<x_relType> result = Expressions.emptyCollection();
            for(x_entityType en : ens)
            { 
              result.add(en.x_inverseName);
            }
            return result;
          }
        ]|
      else
        result := class-body-dec* |[
          private Collection<x_relType> x_inverseName;
          
          protected void x_add(x_relType en)
          { 
            en.x_setrole(this);
          }
          
          protected void x_remove(x_relType en)
          { 
            en.x_setrole(null);
          }
          
          protected void x_addpriv(x_relType en)
          { 
            this.x_inverseName.add(en);
          }
          
          protected void x_removepriv(x_relType en)
          { 
            this.x_inverseName.remove(en);
          }
          
          public Collection<x_relType> x_getter()
          { 
            return this.x_inverseName;
          }
        
          public static Collection<x_relType> x_getter(x_entityType en)
          {
            Collection<x_relType> empty = Expressions.emptyCollection();
            return en == null ? empty : en.x_inverseName;
          }
        
          public static Collection<x_relType> x_getter(Collection<x_entityType> ens)
          { 
            Collection<x_relType> result = Expressions.emptyCollection();
            for(x_entityType en : ens)
            { 
              result.addAll(en.x_inverseName);
            }
            return result;
          }
        ]|
      end

rules

  model-shortcutname-to-java-classbodydecs(err): x_shortcutName -> result
    where
      is-shortcutname
    with
      x_entityType   := <attributename-get-entityname>x_shortcutName;
      x_type         := <_get-type>x_shortcutName;
      x_inverseName  := <shortcutname-get-inversename>x_shortcutName;
      x_roleName     := <shortcutname-get-rolename>x_shortcutName;
      x_relationType := <attributename-get-entityname>x_roleName;
      x_getter       := <name-get>x_shortcutName;
      x_invgetter    := <name-get>x_inverseName;
      x_rolegetter   := <name-get>x_roleName
    with
      if get-multiplicity;upper-one then
        result := class-body-dec* |[
          public x_type x_getter()
          { 
            return x_relationType.x_rolegetter(this.x_invgetter());
          }
        
          public static x_type x_getter(x_entityType en)
          { 
            return en == null ? null : x_relationType.x_rolegetter(en.x_invgetter());
          }
        
          public static Collection<x_type> x_getter(Collection<x_entityType> ens)
          { 
            Collection<x_type> result = Expressions.emptyCollection();
            for(x_entityType en : ens)
            { 
              result.add(x_relationType.x_rolegetter(en.x_invgetter()));
            }
            return result;
          }
        ]|
      else
        result := class-body-dec* |[
          public Collection<x_type> x_getter()
          { 
            return x_relationType.x_rolegetter(this.x_invgetter());
          }
        
          public static Collection<x_type> x_getter(x_entityType en)
          { 
            return en == null ? null : x_relationType.x_rolegetter(en.x_invgetter());
          }
        
          public static Collection<x_type> x_getter(Collection<x_entityType> ens)
          { 
            Collection<x_type> result = Expressions.emptyCollection();
            for(x_entityType en : ens)
            { 
              result.addAll(x_relationType.x_rolegetter(en.x_invgetter()));
            }
            return result;
          }
        ]|
      end

rules

  model-init-inversename-to-java-stm(err): x_inverseName -> result
    with
      if <get-multiplicity;upper-one> x_inverseName then
        result := java:block-stm |[
          x_inverseName = null;
        ]|
      else
        result := java:block-stm |[
          x_inverseName = Expressions.emptyCollection();
        ]|
      end
