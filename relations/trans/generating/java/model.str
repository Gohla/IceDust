module generating/java/model

imports // constructors

	api/constructors
	java/Java
	signatures/Model-sig
	signatures/Modules-sig
	desugaring/constructors

imports // functions

  analysis2/path
	api/_runtime
  api/model-names-api
  names/naming/names
	naming/_notNaBL
	generating/_ir/model
	generating/java/expressions
	generating/java/types

rules

  model-entityname-to-java-typedec(err): x_entityName -> result
    where
      is-entityname
    with
      attributesJava*   := <entityname-get-attributenames;map(model-attributename-to-java-classbodydecs(err)    );flatten-list>x_entityName;
      rolesJava*        := <entityname-get-rolenames     ;map(model-roleOrInversename-to-java-classbodydecs(err));flatten-list>x_entityName;
      inversesJava*     := <entityname-get-inversenames  ;map(model-roleOrInversename-to-java-classbodydecs(err));flatten-list>x_entityName;
      shortcutsJava*    := <entityname-get-shortcutnames ;map(model-shortcutname-to-java-classbodydecs(err)     );flatten-list>x_entityName;
      initCachesJava*   := <entityname-get-attributenames;map(model-init-attributename-to-java-stms(err)        );flatten-list>x_entityName
    with
      result := type-dec |[
        class x_entityName
        {
          public x_entityName()
          {
            ~initCachesJava*
          }
          ~attributesJava*
          ~rolesJava*
          ~shortcutsJava*
          ~inversesJava*
        }
      ]|

rules

  model-attributename-to-java-classbodydecs(err): x_attributeName -> [result-field*,result-setter*,result-calculate*,result-cache*,result-flow*,result-get*,result3*]
    where
      is-attributename
    with
      x_entityName                := <attributename-get-entityname>x_attributeName;
      x_attributeType             := <_get-type;type-to-java(err)>x_attributeName;
      x_getAttribute              := <name-get>x_attributeName;
      x_setAttribute              := <name-set>x_attributeName;
      x_calculateAttribute        := <name-calculate>x_attributeName;
      x_attributeCache            := <name-cache>x_attributeName;
      x_updateAttributeCache      := <name-update-cache>x_attributeName;
      x_dirtyAttribute            := <name-dirty>x_attributeName;
      x_getAndEmptyDirtyAttribute := <name-getandemptydirty>x_attributeName;
      x_updateAllAttributeCache   := <name-updateallcache>x_attributeName;
      x_hasDirty                  := <name-hasdirty>x_attributeName;
      x_flagDirty                 := <name-flagdirty>x_attributeName;
      x_dirtyFlagFlowsto          := <name-dirtyflagflowsto>x_attributeName;
      x_moduleName                := <entityname-get-modulename>x_entityName
    with
      if attributename-is-default <+ attributename-is-derivation then
        (calculate-stms*, calculate-exp) := <attributename-get-expr;exp-to-java-stm(err|0)>x_attributeName
      end
    with
      if attributename-is-calconwrite; name-get-flowsto-paths;?flowsto-paths then
        flowsto-stms* := <map(ttuple(path-get-last, path-remove-end;path-to-expr;exp-to-java-stm(err|0));model-path-to-java-stm(err))>flowsto-paths
      end
    with
      if attributename-is-normal <+ attributename-is-default then
        result-field* := class-body-dec* |[
          private x_attributeType x_attributeName;
        ]|
      else
        result-field* := []
      end
    with
      if (attributename-is-normal <+ attributename-is-default); attributename-is-calconread then
        result-setter* := class-body-dec* |[
          public void x_setAttribute(x_attributeType x_attributeName)
          { 
            this.x_attributeName = x_attributeName;
          }
        ]|
      else if (attributename-is-normal <+ attributename-is-default); attributename-is-calconwrite then
        result-setter* := class-body-dec* |[
          public void x_setAttribute(x_attributeType newValue)
          { 
            if(this.x_getAttribute() != newValue){ // compare with getAttribute to compare to default-value behavior
              x_dirtyFlagFlowsto();
            }
            this.x_attributeName = newValue; // assign always, because we might have compared to default-value
          }
        ]|
      else
        result-setter* := []
      end end
    with
      if attributename-is-default <+ attributename-is-derivation then
        result-calculate* := class-body-dec* |[
          public x_attributeType x_calculateAttribute()
          { 
            ~calculate-stms*
            return ~calculate-exp;
          }
        ]|
      else
        result-calculate* := []
      end
    with
      if attributename-is-calconwrite then
        result-flow* := class-body-dec* |[
          public void x_dirtyFlagFlowsto()
          {
            ~flowsto-stms*
          }
        ]|
      else
        result-flow* := []
      end
    with
      if (attributename-is-default <+ attributename-is-derivation); attributename-is-calconwrite then
        result-cache* := class-body-dec* |[
          private x_attributeType x_attributeCache;
          
          public void x_updateAttributeCache()
          {
            x_attributeType oldValue = x_getAttribute(); // use getter to get default-value behavior
            this.x_attributeCache = x_calculateAttribute(); // update the cache (which might be an unused default)
            if(oldValue != x_getAttribute()){
              x_dirtyFlagFlowsto();
            }
          }
          
          protected static void x_updateAllAttributeCache(){
            Collection<x_entityName> ens = x_getAndEmptyDirtyAttribute();
            for(x_entityName en : ens){
              en.x_updateAttributeCache();
            }
          }
          
          private static Collection<x_entityName> x_dirtyAttribute = new HashSet<x_entityName>();
          
          public static void x_flagDirty(x_entityName en)
          {
            if(en != null)
              x_dirtyAttribute.add(en);
          }
          
          public static void x_flagDirty(Collection<x_entityName> ens)
          {
            x_dirtyAttribute.addAll(ens);
          }
          
          public static boolean x_hasDirty()
          {
            return !x_dirtyAttribute.isEmpty();
          }
          
          public static Collection<x_entityName> x_getAndEmptyDirtyAttribute()
          {
            Collection<x_entityName> values = x_dirtyAttribute;
            x_dirtyAttribute = new HashSet<x_entityName>();
            return values;
          }
        ]|
      else
        result-cache* := []
      end
    with
      if attributename-is-normal then
        result-get* := class-body-dec* |[
          public x_attributeType x_getAttribute()
          { 
            return x_attributeName;
          }
        ]|
      else if attributename-is-default; attributename-is-calconread then
        result-get* := class-body-dec* |[
          public x_attributeType x_getAttribute()
          { 
            if(x_attributeName != null)
              return x_attributeName;
            return x_calculateAttribute();
          }
        ]|
      else if attributename-is-default; attributename-is-calconwrite then
        result-get* := class-body-dec* |[
          public x_attributeType x_getAttribute()
          { 
            if(x_attributeName != null)
              return x_attributeName;
            return x_attributeCache;
          }
        ]|
      else if attributename-is-derivation; attributename-is-calconread then
        result-get* := class-body-dec* |[
          public x_attributeType x_getAttribute()
          { 
            return x_calculateAttribute();
          }
        ]|
      else
        result-get* := class-body-dec* |[
          public x_attributeType x_getAttribute()
          { 
            return x_attributeCache;
          }
        ]|
      end end end end
    with
      result3* := class-body-dec* |[
        public static x_attributeType x_getAttribute(x_entityName c)
        { 
          return c == null ? null : c.x_getAttribute();
        }
        
        public static Collection<x_attributeType> x_getAttribute(Collection<x_entityName> c)
        { 
          Collection<x_attributeType> result = Expressions.emptyCollection();
          for(x_entityName n : c)
          { 
            x_attributeType v = n.x_getAttribute();
            if(v != null)
              result.add(v);
          }
          return result;
        }
      ]|

rules

  model-path-to-java-stm(err): (x_attributeName, (stms*, expr)) -> result
    with
      x_entityName := <attributename-get-entityname>x_attributeName;
      x_flagDirty  := <name-flagdirty>x_attributeName
    with
      result := bstm |[
        {
          ~stms*
          x_entityName.x_flagDirty(~expr);
        }
      ]|

rules

  model-roleOrInversename-to-java-classbodydecs(err): x_roleName -> [result1*,result-set*,result2*,result-flow*]
    where
      is-rolename <+ is-inversename
    with
      x_inverseName          := <name-get-inversename>x_roleName;
      x_inverseEntityName    := <attributename-get-entityname>x_inverseName;
      x_roleEntityName       := <attributename-get-entityname>x_roleName;
      x_getRole              := <name-get>x_roleName;
      x_setRole              := <name-set>x_roleName;
      x_addRole              := <name-add>x_roleName;
      x_removeRole           := <name-remove>x_roleName;
      x_setRolePrivate       := <name-set-private>x_roleName;
      x_addRolePrivate       := <name-add-private>x_roleName;
      x_removeRolePrivate    := <name-remove-private>x_roleName;
      x_getInverse           := <name-get>x_inverseName;
      x_setInversePrivate    := <name-set-private>x_inverseName;
      x_addInversePrivate    := <name-add-private>x_inverseName;
      x_removeInversePrivate := <name-remove-private>x_inverseName;
      x_dirtyFlagFlowstoRole := <name-dirtyflagflowsto>x_roleName
    with
      if attributename-is-calconwrite then
        if is-attributename; name-get-flowsto-paths;?flowsto-paths then
          flowsto-stms* := <filter(path-origin-is-inverse);map(ttuple(path-get-last, path-remove-end;path-to-expr;exp-to-java-stm(err|0));model-path-to-java-stm(err))>flowsto-paths
        else
          name-get-inversename; name-get-flowsto-paths;?flowsto-paths;
          flowsto-stms* := <filter(path-origin-is-role);map(ttuple(path-get-last, path-remove-end;path-to-expr;exp-to-java-stm(err|0));model-path-to-java-stm(err))>flowsto-paths
        end
      end
    with
      if get-multiplicity;upper-one then
        result1* := class-body-dec* |[
          private x_inverseEntityName x_roleName;
        
          public x_inverseEntityName x_getRole()
          { 
            return this.x_roleName;
          }
        
          public static x_inverseEntityName x_getRole(x_roleEntityName en)
          { 
            return en == null ? null : en.x_roleName;
          }
        
          public static Collection<x_inverseEntityName> x_getRole(Collection<x_roleEntityName> ens)
          { 
            Collection<x_inverseEntityName> result = Expressions.emptyCollection();
            for(x_roleEntityName en : ens)
            { 
              if(en.x_roleName != null)
                result.add(en.x_roleName);
            }
            return result;
          }
        ]|
      else
        result1* := class-body-dec* |[
          private Collection<x_inverseEntityName> x_roleName = Expressions.emptyCollection();
        
          public Collection<x_inverseEntityName> x_getRole()
          { 
            return this.x_roleName;
          }
        
          public static Collection<x_inverseEntityName> x_getRole(x_roleEntityName en)
          { 
            Collection<x_inverseEntityName> empty = Expressions.emptyCollection();
            return en == null ? empty : en.x_roleName;
          }
        
          public static Collection<x_inverseEntityName> x_getRole(Collection<x_roleEntityName> ens)
          { 
            Collection<x_inverseEntityName> result = Expressions.emptyCollection();
            for(x_roleEntityName en : ens)
            { 
              result.addAll(en.x_roleName);
            }
            return result;
          }
        ]|
      end
    with
      if attributename-is-calconread; get-multiplicity;upper-one then
        result-set* := class-body-dec* |[
          protected void x_setRolePrivate(x_inverseEntityName en)
          { 
            if(this.x_roleName != en){
              this.x_roleName = en;
            }
          }
        ]|
      else if attributename-is-calconwrite; get-multiplicity;upper-one then
        result-set* := class-body-dec* |[
          protected void x_setRolePrivate(x_inverseEntityName en)
          { 
            if(this.x_roleName != en){
              this.x_roleName = en;
              x_dirtyFlagFlowstoRole();
            }
          }
        ]|
      else if attributename-is-calconread; get-multiplicity;upper-many then
        result-set* := class-body-dec* |[
          protected void x_addRolePrivate(x_inverseEntityName en)
          { 
            if(en != null){
              this.x_roleName.add(en);
            }
          }
          
          protected void x_removeRolePrivate(x_inverseEntityName en)
          { 
            if(en != null){
              this.x_roleName.remove(en);
            }
          }
        ]|
      else // calconwrite many
        result-set* := class-body-dec* |[
          protected void x_addRolePrivate(x_inverseEntityName en)
          { 
            if(en != null){
              this.x_roleName.add(en);
              x_dirtyFlagFlowstoRole();
            }
          }
          
          protected void x_removeRolePrivate(x_inverseEntityName en)
          { 
            if(en != null){
              this.x_roleName.remove(en);
              x_dirtyFlagFlowstoRole();
            }
          }
        ]|
      end end end
    with
      if get-multiplicity;upper-one; !x_roleName;get-multiplicity-inverse;upper-one then
        result2* := class-body-dec* |[
          public void x_setRole(x_inverseEntityName en)
          { 
            if(x_roleName != null){
              x_roleName.x_setInversePrivate(null);
            }
            if(en != null){
              x_roleEntityName v = en.x_getInverse();
              if(v != null){
                v.x_setRolePrivate(null);
              }
              en.x_setInversePrivate(this);
            }
            this.x_setRolePrivate(en);
          }
        ]|
      else if get-multiplicity;upper-one; !x_roleName;get-multiplicity-inverse;upper-many then
        result2* := class-body-dec* |[
          public void x_setRole(x_inverseEntityName en)
          { 
            if(x_roleName != null){
              x_roleName.x_removeInversePrivate(this);
            }
            if(en != null){
              en.x_addInversePrivate(this);
            }
            this.x_setRolePrivate(en);
          }
        ]|
      else if get-multiplicity;upper-many; !x_roleName;get-multiplicity-inverse;upper-one then
        result2* := class-body-dec* |[
          public void x_addRole(x_inverseEntityName en)
          { 
            if(en != null){
              x_roleEntityName v = en.x_getInverse();
              if(v != null){
                v.x_removeRolePrivate(null);
              }
              en.x_setInversePrivate(this);
              this.x_addRolePrivate(en);
            }
          }
        ]|
      else // many-many
        result2* := class-body-dec* |[
          public void x_setRole(x_inverseEntityName en)
          { 
            if(en != null){
              en.x_addInversePrivate(this);
              this.x_addRolePrivate(en);
            }
          }
        ]|
      end end end
    with
      if attributename-is-calconwrite then
        result-flow* := class-body-dec* |[
          public void x_dirtyFlagFlowstoRole()
          {
            ~flowsto-stms*
          }
        ]|
      else
        result-flow* := []
      end

rules

  model-shortcutname-to-java-classbodydecs(err): x_shortcutName -> result
    where
      is-shortcutname
    with
      x_sourceEntityName := <attributename-get-entityname>x_shortcutName;
      x_targetEntityName := <_get-type>x_shortcutName;
      x_inverseName      := <shortcutname-get-inversename>x_shortcutName;
      x_roleName         := <shortcutname-get-rolename>x_shortcutName;
      x_relationName     := <attributename-get-entityname>x_roleName;
      x_getShortcut      := <name-get>x_shortcutName;
      x_getInverse       := <name-get>x_inverseName;
      x_getRole          := <name-get>x_roleName
    with
      if get-multiplicity;upper-one then
        result := class-body-dec* |[
          public x_targetEntityName x_getShortcut()
          { 
            return x_relationName.x_getRole(this.x_getInverse());
          }
        
          public static x_targetEntityName x_getShortcut(x_sourceEntityName en)
          { 
            return en == null ? null : x_relationName.x_getRole(en.x_getInverse());
          }
        
          public static Collection<x_targetEntityName> x_getShortcut(Collection<x_sourceEntityName> ens)
          { 
            Collection<x_targetEntityName> result = Expressions.emptyCollection();
            for(x_sourceEntityName en : ens)
            { 
              x_targetEntityName v = x_relationName.x_getRole(en.x_getInverse());
              if(v != null)
                result.add(v);
            }
            return result;
          }
        ]|
      else
        result := class-body-dec* |[
          public Collection<x_targetEntityName> x_getShortcut()
          { 
            return x_relationName.x_getRole(this.x_getInverse());
          }
        
          public static Collection<x_targetEntityName> x_getShortcut(x_sourceEntityName en)
          { 
            return en == null ? null : x_relationName.x_getRole(en.x_getInverse());
          }
        
          public static Collection<x_targetEntityName> x_getShortcut(Collection<x_sourceEntityName> ens)
          { 
            Collection<x_targetEntityName> result = Expressions.emptyCollection();
            for(x_sourceEntityName en : ens)
            { 
              result.addAll(x_relationName.x_getRole(en.x_getInverse()));
            }
            return result;
          }
        ]|
      end

rules

  model-init-attributename-to-java-stms(err): x_attributeName -> result
    with
      x_entityName                := <attributename-get-entityname>x_attributeName;
      x_flagDirty                 := <name-flagdirty>x_attributeName
    with
      if (attributename-is-default <+ attributename-is-derivation); attributename-is-calconwrite then
        result := bstm* |[
          x_entityName.x_flagDirty(this);
        ]|
      else
        result := []
      end
