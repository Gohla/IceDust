module trans/generating/model

imports

	lib/java/Java
	lib/nabl/-
	include/Relations
	trans/naming/names
	trans/naming/_notNaBL
	
	trans/generating/expressions
	trans/generating/types

rules
	
  to-java(err): ModelDef(model) -> <map(try(to-java(err)))>model

  to-java(err): EntityTypeDef(_, name, attributesAndRoles) -> 
		type-dec |[
			class x_class
			{
				public x_class()
				{
					~fulfillRolesJavaInit*
				}
				~attributesAndRolesJava*
				~fulfillRolesJava*
			}
		]|
	with
		x_class := name;
		attributesAndRolesJava* := <map(to-java(err|name));concat>attributesAndRoles;
		fulfillRoles := <get-fulfill-role-multiple>name;
		fulfillRolesJava* := <map(to-java-fullfil-role(err))> fulfillRoles;
		fulfillRolesJavaInit* := <map(to-java-fulfill-role-init(err))> fulfillRoles
	
	to-java-fullfil-role(err): fulfillRole -> result
		with
			relationName := <de-def;nabl-uri-parent;nabl-uri-name>fulfillRole;
			roleName := <de-def;nabl-uri-name>fulfillRole;
			x_field := $[[relationName]_[roleName]];
			x_type := relationName;
			multiplicity := <get-multiplicity2>fulfillRole
		with
			if <upper-one> multiplicity then
				result := |[ public x_type x_field; ]|
			else
				result := |[ public Collection<x_type> x_field; ]|
			end

	to-java-fulfill-role-init(err): fulfillRole -> result
		with
			relationName := <de-def;nabl-uri-parent;nabl-uri-name>fulfillRole;
			roleName := <de-def;nabl-uri-name>fulfillRole;
			x_field := $[[relationName]_[roleName]];
			x_type := relationName;
			multiplicity := <get-multiplicity2>fulfillRole
		with
			if <upper-one> multiplicity then
				result := |[ x_field = null; ]|
			else
				result := |[ x_field = Expressions.emptyCollection(); ]|
			end

	de-def: Def(x) -> x

	to-java(err|x_entity): Attribute(x_name, type, multiplicity, derivation) -> result
		where
			Normal() := <get-derivation-type>x_name
		with
			x_type := <type-to-java(err)>type;
			x_getter := $[get_[x_name]];
			x_setter := $[set_[x_name]]
		with
			result :=
				|[
					private x_type x_name;
					
					public void x_setter(x_type x_name)
					{ 
						this.x_name = x_name;
					}
					
				  public x_type x_getter()
				  { 
				    return x_name;
				  }
				  
					public static x_type x_getter(x_entity c)
					{ 
						return c == null ? null : c.x_getter();
					}
				  
					public static Collection<x_type> x_getter(Collection<x_entity> c)
					{ 
						Collection<x_type> result = Expressions.emptyCollection();
						for(x_entity n : c)
						{ 
							x_type v = n.x_getter();
							if(v != null)
								result.add(v);
						}
						return result;
					}
				]|

	to-java(err|x_entity): Attribute(x_name, type, _, Derivation(derivationExpr, _)) -> result
		where
			DefaultValue() := <get-derivation-type>x_name
		with
			x_type := <type-to-java(err)>type;
			x_getter := $[get_[x_name]];
			x_setter := $[set_[x_name]];
			(stms*, exp) := <exp-to-java-stm(err|0)>derivationExpr
		with
			result :=
				|[
					private x_type x_name;
					
					public void x_setter(x_type x_name)
					{ 
						this.x_name = x_name;
					}
					
				  public x_type x_getter()
				  { 
				  	if(x_name != null)
				  		return x_name;
				  	~stms*
		  			return ~exp;
				  }
				  
					public static x_type x_getter(x_entity c)
					{ 
						return c == null ? null : c.x_getter();
					}
				  
					public static Collection<x_type> x_getter(Collection<x_entity> c)
					{ 
						Collection<x_type> result = Expressions.emptyCollection();
						for(x_entity n : c)
						{ 
							x_type v = n.x_getter();
							if(v != null)
								result.add(v);
						}
						return result;
					}
				]|
				
	to-java(err|x_entity): Attribute(x_name, type, _, Derivation(derivationExpr, _)) -> result
		where
			Derivation() := <get-derivation-type>x_name
		with
			x_type := <type-to-java(err)>type;
			x_getter := $[get_[x_name]];
			x_setter := $[set_[x_name]];
			(stms*, exp) := <exp-to-java-stm(err|0)>derivationExpr
		with
			result :=
				|[
				  public x_type x_getter()
				  { 
				  	~stms*
		  			return ~exp;
				  }
				  
					public static x_type x_getter(x_entity c)
					{ 
						return c == null ? null : c.x_getter();
					}
				  
					public static Collection<x_type> x_getter(Collection<x_entity> c)
					{ 
						Collection<x_type> result = Expressions.emptyCollection();
						for(x_entity n : c)
						{ 
							x_type v = n.x_getter();
							if(v != null)
								result.add(v);
						}
						return result;
					}
				]|

	to-java(err|x_relType): Role(x_entityType, multiplicity, x_roleName, inverse) -> result
		where
			<upper-many>multiplicity
		with
			x_in := $[[x_roleName]_in];
			x_out := $[[x_roleName]_out];
			x_relRole := $[[x_relType]_[x_roleName]]
		with
			result :=
				|[
				  public x_entityType x_roleName;
		
				  public static Collection<x_relType> x_in(x_entityType in)
				  { 
				    return in == null ? null : in.x_relRole;
				  }
		
				  public static Collection<x_relType> x_in(Collection<x_entityType> in)
				  { 
				    Collection<x_relType> result = Expressions.emptyCollection();
				    for(x_entityType elem : in)
				    { 
				      result.addAll(elem.x_relRole);
				    }
				    return result;
				  }
				
				  public static x_entityType x_out(x_relType out)
				  { 
				    return out == null ? null : out.x_roleName;
				  }
				
				  public static Collection<x_entityType> x_out(Collection<x_relType> out)
				  { 
				    Collection<x_entityType> result = Expressions.emptyCollection();
				    for(x_relType u : out)
				    { 
				      result.add(u.x_roleName);
				    }
				    return result;
				  }
				]|

	to-java(err|x_relType): Role(x_entityType, multiplicity, x_roleName, inverse) -> result
		where
			<upper-one>multiplicity
		with
			x_in := $[[x_roleName]_in];
			x_out := $[[x_roleName]_out];
			x_relRole := $[[x_relType]_[x_roleName]]
		with
			result :=
				|[
				  public x_entityType x_roleName;
		
				  public static x_relType x_in(x_entityType in)
				  { 
				    return in.x_relRole;
				  }
		
				  public static Collection<x_relType> x_in(Collection<x_entityType> in)
				  { 
				    Collection<x_relType> result = Expressions.emptyCollection();
				    for(x_entityType elem : in)
				    { 
				      result.add(elem.x_relRole);
				    }
				    return result;
				  }
				
				  public static x_entityType x_out(x_relType out)
				  { 
				    return out == null ? null : out.x_roleName;
				  }
				
				  public static Collection<x_entityType> x_out(Collection<x_relType> out)
				  { 
				    Collection<x_entityType> result = Expressions.emptyCollection();
				    for(x_relType u : out)
				    { 
				      result.add(u.x_roleName);
				    }
				    return result;
				  }
				]|


