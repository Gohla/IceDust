module trans/generating/model

imports

	lib/java/Java
	lib/nabl/-
	include/Relations
	trans/naming/names
	trans/naming/_notNaBL
	
	trans/generating/expressions
	trans/generating/types

rules
	
  to-java(err): ModelDef(model) -> <map(try(to-java(err)))>model

  to-java(err): EntityTypeDef(_, name, attributesAndRoles) -> 
		type-dec |[
			class x_class
			{
				public x_class()
				{
					~fulfillRolesJavaInit*
				}
				~attributesAndRolesJava*
				~fulfillRolesJava*
			}
		]|
	with
		x_class := name;
		attributesAndRolesJava* := <map(to-java(err|name));concat>attributesAndRoles;
		fulfillRoles := <get-fulfill-role-multiple>name;
		fulfillRolesJava* := <map(to-java-fullfil-role(err)) <+ empty-list> fulfillRoles;
		fulfillRolesJavaInit* := <map(to-java-fulfill-role-init(err)) <+ empty-list> fulfillRoles
	
	empty-list: _ -> []
	
	to-java-fullfil-role(err): fulfillRole ->
			|[
  			public Collection<x_type> x_field;
			]|
		where
			relationName := <de-def;nabl-uri-parent;nabl-uri-name>fulfillRole;
			roleName := <de-def;nabl-uri-name>fulfillRole;
			x_field := $[[relationName]_[roleName]];
			x_type := relationName

	to-java-fulfill-role-init(err): fulfillRole@_ ->
			|[
				x_field = new HashSet<x_type>();
			]|
		where
			relationName := <de-def;nabl-uri-parent;nabl-uri-name>fulfillRole;
			roleName := <de-def;nabl-uri-name>fulfillRole;
			x_field := $[[relationName]_[roleName]];
			x_type := relationName

	de-def: Def(x) -> x

  to-java(err|entityName): Attribute(name, type, multiplicity, derivation) ->
		[ field
	    , setter
	    , MethodDec(
	        MethodDecHead(
	          [Public()]
	        , None()
	        , ClassOrInterfaceType(TypeName(Id(javaType)), None())
	        , Id($[get_[name]])
	        , []
	        , None()
	        )
	      , Block(
	        	[Return(Some(getterExpr))]
	        )
	      )
	    , getter-multi 
	     ]
		where
			javaType := <type-to-java(err)>type;
			derivationType := <get-derivation-type <+ err-msg(|$[Could not get derivation type of Attribute.])>name;
			if Normal() := derivationType then
				field := <field>(name, javaType);
				setter := <setter>(name, javaType);
				getterExpr := ExprName(Id(name))
			else if DefaultValue() := derivationType then
				field := <field>(name, javaType);
				setter := <setter>(name, javaType);
				Derivation(derivationExpr, _) := derivation;
				getterExpr := Cond(
	                      NotEq(ExprName(Id(name)), <null-value>type)
	                    , ExprName(Id(name))
	                    , <exp-to-java(err)>derivationExpr
	                    )
			else if Derivation() := derivationType then
				field := [];
				setter := [];
				Derivation(derivationExpr, _) := derivation;
				getterExpr := <exp-to-java(err)>derivationExpr
			end end end;
			getter-multi := <getter-multi>(name, javaType, entityName)
	
	field: (x_name, x_type) -> |[private x_type x_name;]|
	
	setter: (x_name, x_type) ->
		|[
			public void x_setter(x_type x_name)
			{ 
				this.x_name = x_name;
			}
		]|
	with
		x_setter := $[set_[x_name]]

	getter-no-derivation: (x_name, x_type) ->
		|[
		  public x_type x_getter()
		  { 
		    return x_name;
		  }
	  ]|
	 with
	 	x_getter := $[get_[x_name]]
	 	
	//TODO: getter-default-value
	//TODO: getter-derivation

	getter-multi: (x_name, x_type, x_entity) ->
		|[
			public static Collection<x_type> x_getter(Collection<x_entity> c)
			{ 
				Collection<x_type> result = Expressions.emptyCollection();
				for(x_entity n : c)
				{ 
					x_type v = n.x_getter();
					if(v != null)
						result.add(v);
				}
				return result;
			}
		]|
	with
		x_getter := $[get_[x_name]]

  to-java(err|relationName): Role(EntityType(type), multiplicity, roleName) ->
		[	FieldDec(
	      [Public()]
	    , ClassOrInterfaceType(TypeName(Id(type)), None())
	    , [VarDec(Id(roleName))]
	    )
    , MethodDec(
        MethodDecHead(
          [Public(), Static()]
        , None()
        , ClassOrInterfaceType(
            TypeName(Id("Collection"))
          , Some(TypeArgs([ClassOrInterfaceType(TypeName(Id(relationName)), None())]))
          )
        , Id($[[roleName]_in])
        , [ Param(
              []
            , ClassOrInterfaceType(
                TypeName(Id("Collection"))
              , Some(TypeArgs([ClassOrInterfaceType(TypeName(Id(type)), None())]))
              )
            , Id("in")
            )
          ]
        , None()
        )
      , Block(
          [ LocalVarDecStm(
              LocalVarDec(
                []
              , ClassOrInterfaceType(
                  TypeName(Id("Collection"))
                , Some(TypeArgs([ClassOrInterfaceType(TypeName(Id(relationName)), None())]))
                )
              , [ VarDec(
                    Id("result")
                  , NewInstance(
                      None()
                    , ClassOrInterfaceType(
                        TypeName(Id("HashSet"))
                      , Some(TypeArgs([ClassOrInterfaceType(TypeName(Id(relationName)), None())]))
                      )
                    , []
                    , None()
                    )
                  )
                ]
              )
            )
          , ForEach(
              Param(
                []
              , ClassOrInterfaceType(TypeName(Id(type)), None())
              , Id("elem")
              )
            , ExprName(Id("in"))
            , Block(
                [ ExprStm(
                    Invoke(
                      Method(MethodName(AmbName(Id("result")), Id("addAll")))
                    , [ExprName(AmbName(Id("elem")), Id($[[relationName]_[roleName]]))]
                    )
                  )
                ]
              )
            )
          , Return(Some(ExprName(Id("result"))))
          ]
        )
      )
    , MethodDec(
        MethodDecHead(
          [Public(), Static()]
        , None()
        , ClassOrInterfaceType(
            TypeName(Id("Collection"))
          , Some(TypeArgs([ClassOrInterfaceType(TypeName(Id(type)), None())]))
          )
        , Id($[[roleName]_out])
        , [ Param(
              []
            , ClassOrInterfaceType(
                TypeName(Id("Collection"))
              , Some(TypeArgs([ClassOrInterfaceType(TypeName(Id(relationName)), None())]))
              )
            , Id("out")
            )
          ]
        , None()
        )
      , Block(
          [ LocalVarDecStm(
              LocalVarDec(
                []
              , ClassOrInterfaceType(
                  TypeName(Id("Collection"))
                , Some(TypeArgs([ClassOrInterfaceType(TypeName(Id(type)), None())]))
                )
              , [ VarDec(
                    Id("result")
                  , NewInstance(
                      None()
                    , ClassOrInterfaceType(
                        TypeName(Id("HashSet"))
                      , Some(TypeArgs([ClassOrInterfaceType(TypeName(Id(type)), None())]))
                      )
                    , []
                    , None()
                    )
                  )
                ]
              )
            )
          , ForEach(
              Param(
                []
              , ClassOrInterfaceType(TypeName(Id(relationName)), None())
              , Id("u")
              )
            , ExprName(Id("out"))
            , Block(
                [ ExprStm(
                    Invoke(
                      Method(MethodName(AmbName(Id("result")), Id("add")))
                    , [ExprName(AmbName(Id("u")), Id(roleName))]
                    )
                  )
                ]
              )
            )
          , Return(Some(ExprName(Id("result"))))
          ]
        )
      )
		]
	
	null-value: String() -> Lit(Null())
	null-value: Int() -> Lit(Null())
	null-value: Boolean() -> Lit(Null())
	