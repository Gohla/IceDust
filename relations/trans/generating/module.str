module trans/generating/module

imports

	lib/java/Java
	include/Relations
	trans/desugaring/desugar
	trans/generating/runtime

rules

  to-java(error-handler):
    ModuleDesugared(moduleName, model, data, execute) ->
			CompilationUnit(
			  None()
			, [ TypeImportOnDemandDec(PackageName([Id("lib"), Id("relations")]))
			  ,	TypeImportDec(
			      TypeName(
			        PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
			      , Id("Collection")
			      )
			    )
			  , TypeImportDec(
			      TypeName(
			        PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
			      , Id("HashSet")
			      )
			    )
			  ]
			, <concat>[[ mainClass ], modelJava]
			)
	where
		mainClass := <main-class-to-java(error-handler)>ModuleDesugared(moduleName, model, data, execute);
		modelJava := <to-java(error-handler)>model
		
  main-class-to-java(error-handler): ModuleDesugared(moduleName, model, data, execute) ->
	  ClassDec(
	      ClassDecHead([], Id(moduleName), None(), None(), None())
	    , ClassBody(
	        [ MethodDec(
	            MethodDecHead(
	              [Public(), Static()]
	            , None()
	            , Void()
	            , Id("main")
	            , [ Param(
	                  []
	                , ArrayType(ClassOrInterfaceType(TypeName(Id("String")), None()))
	                , Id("args")
	                )
	              ]
	            , None()
	            )
	          , Block(
	           	<concat>[
	              dataJava,
	              executeJava
	              ]
	            )
	          )
	        ]
	      )
	    )
	where
		dataJava := <to-java(error-handler)>data;
		if Executable(_) := execute then
			executeJava := <to-java(error-handler)>execute
		else
			executeJava := []
		end