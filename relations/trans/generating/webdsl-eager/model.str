module trans/generating/webdsl-eager/model

imports // constructors

	trans/api/_runtime-constructors
	trans/api/constructors
	lib/webdsl/WebDSL
	src-gen/signatures/Expressions-sig
	src-gen/signatures/Model-sig
	src-gen/signatures/Modules-sig
	trans/desugaring/constructors

imports // functions

	trans/analysis2/path
	trans/api/_runtime
	trans/api/model-api
	trans/api/model-names-api
	trans/lib/search
	trans/lib/string
	trans/lib/lists-tuples
	trans/naming/names
	trans/naming/_notNaBL
	trans/generating/webdsl/expressions
	trans/generating/webdsl/expressions-references
	trans/generating/webdsl/model

rules // entities
	
  to-webdsl-eager(err|ast): x_name -> 
		webdsl |[
			entity x_name {
				ebd1*
				ebd2*
				ebd3*
				ebd4*
				ebd5*
			}
		]|
	where
		is-entityname
	with
		ebd1* := <entityname-get-attributenames;map(to-webdsl(err|ast))>x_name;
		ebd2* := <entityname-get-rolenames;     map(to-webdsl(err))>x_name;
		ebd3* := <entityname-get-inversenames;  map(to-webdsl(err))>x_name;
		ebd4* := <entityname-get-attributenames;filter(to-webdsl-eager-trigger-dirty(err|ast))>x_name;
		ebd5* := <entityname-get-rolenames;     filter(to-webdsl-eager-trigger-dirty(err|ast))>x_name

rules // attributes - trigger dirty
			
	to-webdsl-eager-trigger-dirty(err|ast): x_name -> webdsl |[
    extend function x_set(newValue:srt1){
    	if(x_name != newValue){
    		stat1*
    	}
    }
	]|
		where
			is-attributename
		where
			flowsToPaths := <name-get-flowsto-paths;list-not-empty>x_name
		with
			srt1   := <_get-type;to-webdsl(err)>x_name;
			x_set  := $[set[<ucfirst>x_name]];
			stat1* := <map(ttuple(path-get-last, path-remove-end;path-to-expr);flagdirty-webdslstat(err))>flowsToPaths

rules // roles - trigger dirty

	to-webdsl-eager-trigger-dirty(err|ast): x_name -> webdsl |[
    extend function x_set(newValue:srt1){
    	if(x_name != newValue){
	    	stat1*
	    	stat2*
	    	stat3*
    	}
    }
	]|
		where
			is-rolename
		where
			flowsToPaths := <name-get-flowsto-paths;list-not-empty>x_name
		with
			newValueExpr := Ref("newValue"){(NablProp_multiplicity(), <get-multiplicity>x_name), (Type(), <_get-type>x_name)};
			srt1   := <_get-type;to-webdsl(err)>x_name;
			x_set  := $[set[<ucfirst>x_name]];
			stat1* := <filter(path-origin-is-inverse);map(                   ttuple(path-get-last, path-remove-end;path-to-expr               );flagdirty-webdslstat(err))>flowsToPaths;
			stat2* := <filter(path-origin-is-role)   ;map(path-prependorigin;ttuple(path-get-last, path-remove-end;path-to-expr               );flagdirty-webdslstat(err))>flowsToPaths;
			stat3* := <filter(path-origin-is-role)   ;map(                   ttuple(path-get-last, path-remove-end;path-to-expr(|newValueExpr));flagdirty-webdslstat(err))>flowsToPaths

rules // helper
	
	flagdirty-webdslstat(err): (attrName, expr) -> webdsl |[log("Attribute " + e2 + " is dirty of " + e1);]|
		with
			e1 := <to-webdsl(err)>expr;
			e2 := String(attrName)
