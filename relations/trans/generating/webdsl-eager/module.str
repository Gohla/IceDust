module trans/generating/webdsl-eager/module

imports // constructors

	lib/webdsl/constructors
	lib/webdsl/WebDSL
	trans/desugaring/constructors

imports // functions
	
	trans/generating/webdsl-eager/model
	trans/generating/webdsl/data
	trans/api/module-names-api
	trans/api/model-names-api
	trans/lib/debug
	trans/lib/lists-tuples
	trans/lib/string

rules // module

	to-webdsl-eager(err):
		ast@ModuleDesugared(x_name, _, _, _) -> 
			webdsl |[
				application x_name
				
				imports lib/relations/Expressions
			
				section model
				
					def1*
				
				section derivations
				
					def3*
					
				  init
				  {
				    initDirtyCollections();
				  }
				  
				  function initDirtyCollections(){

				  }
				
					function updateDerivations(){
						log("called updateDervations()");
						var notEmpty : Bool;
						stat4*
					}
				
				section data
					
					init{
						stat1*
						stat2*
						stat3*
						updateDerivations();
					}
				
				section CRUD
				
				  page root ( )
				  {
					  main()
					  define body() {
					    "Hello world!"
					  }
				  }
				  
					define override main() {
						init{
							initDirtyCollections();
						}
					  <div id="pagewrapper">
					    <div id="navbar">
					      applicationmenu()
					    </div>
					    <div id="content">
					      body()
					    </div>
					    <div id="clear"></div>
					    <div id="push"></div>
					  </div>
					  <div id="footer">
					    <span id="footercontent">"powered by " <a href="http://webdsl.org">"WebDSL"</a></span>
					  </div>
					}
					
					define override body(){
					  "default body"
					}
					
					define mainheader() {
					  navigate(root()){
					    image("/images/logosmall.png")
					  }
					}
					
					define applicationmenu() {
						elem1*
					}
					
					define navbaritem(){
					  <span class="navbaritem">
					    elements()
					  </span>
					}
					 
					define override errorTemplateInput(messages : List<String>){
					  elements()
					  for(ve: String in messages){
					    <tr style = "color: #FF0000;border: 1px solid #FF0000;">
					      <td></td>
					      <td> 
					        output(ve)
					      </td>
					    </tr>
					  }
					}
					
					def2*
				
			]|
		with
			def1*  := <modulename-get-entitynames;map(to-webdsl-eager(err|ast))>x_name;
			def2*  := <modulename-get-entitynames;map(webdsl-crud)>x_name;
			elem1* := <modulename-get-entitynames;map(webdsl-crud-nav)>x_name;
			stat1* := <modulename-get-entityinstancenames;map(to-webdsl-1(err|ast))>x_name;
			stat2* := <modulename-get-entityinstancenames;map(to-webdsl-2(err|ast))>x_name;
			stat3* := <modulename-get-entityinstancenames;map(to-webdsl-3(err|ast))>x_name;
			def3*  := <modulename-get-entitynames;map(entityname-get-attributenames);flatten-list;filter(where(not(attributename-is-normal)));map(attribute-dirty-collection)>x_name;
			stat4* := <index-get-prop(|TopoSort());Hd;webdsl-toposort>x_name

rules //crud
	
	webdsl-crud: x_name -> webdsl* |[
		define page x_create(){
      //derive createPage from temp
      main()
      define body() {
        var temp := x_name{}
        header{"Create " output(temp.name) } 
        form { 
          <fieldset>
            <legend>
              output("Details")
            </legend>
            <table>
              derive editRows from temp
            </table>
          </fieldset>      
          action("Save", save())
        }
        action save() { 
          temp.save();
          updateDerivations();
          return x_manage();
        }
      }
    }
    define page x_view(arg : x_name){
      derive viewPage from arg
    }
		define page x_edit(arg : x_name){
		  //derive editPage from arg
		  main()
		  define body() {
		    header{"Edit " output(arg.name) } 
		    form { 
		      <fieldset>
		        <legend>
		          output("Details")
		        </legend>
		        <table>
		          derive editRows from arg
		        </table>
		      </fieldset>  
		      action("Save", save())
		    }
		    action save() { 
		      arg.save();
		      updateDerivations();
		      return x_manage();
		    }
		  }
		}
		define page x_manage(){
		  main()
		  define body(){
		    navigate(x_create()){ "create" }
		    <list>
		      for(elem : x_name){
		        <li> 
		          output(elem)
		          " "
		          navigate(x_edit(elem)){ "edit" }
		          " "
		          form{action("remove",remove(elem))}
		        </li>
		      }
		    </list>
		    action remove(arg : x_name){
		      arg.delete();
		    }
		  }
		}
	]|
		with
			x_manage := $[manage[x_name]];
			x_create := $[create[x_name]];
			x_edit   := $[edit[x_name]];
			x_view   := <lcfirst>x_name
			
	
	webdsl-crud-nav: x_name -> webdsl |[navbaritem{navigate x_manageName(){$text}}]|
		with
			x_manageName := $[manage[x_name]];
			$text := Text(x_name)
	
rules // derivations
	
	attribute-dirty-collection: x_name -> def* |[
		request var x_dirty := Set<x_entity>()
		
	  extend function initDirtyCollections(){
	  	x_dirty := Set<x_entity>();
	  }
	]|
		with
			x_entity := <attributename-get-entityname>x_name;
			x_dirty  := $[[x_entity]_[x_name]_dirty]

rules // List(List(String)) -> Webdsl-stat*

	webdsl-toposort : namess -> result
		with
			namess' := <map(filter(where(is-attributename;not(attributename-is-normal))));filter(list-not-empty)>namess;
			result  := <map(webdsl-update-group)>namess'
	
	webdsl-update-group : names -> webdsl |[
		notEmpty := true;
		while(notEmpty){
			stat1*
			notEmpty := false;
			stat2*
		}
	]|
		with
			stat1* := <map(webdsl-update-dirty)>names;
			stat2* := <map(webdsl-has-dirty)>names
	
	webdsl-update-dirty : x_name -> |[x_entity.x_update();]|
		with
			x_entity := <attributename-get-entityname>x_name;
			x_update := $[[x_name]_update_clean]
			
	webdsl-has-dirty : x_name -> |[notEmpty := notEmpty || x_entity.x_dirtyb();]|
		with
			x_entity := <attributename-get-entityname>x_name;
			x_dirtyb := $[[x_name]_has_dirty]
	
