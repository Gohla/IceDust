module trans/generating/webdsl-eventual-no-ui/module

imports // constructors

	lib/webdsl/constructors
	lib/webdsl/WebDSL
	trans/analysis2/constructors
	trans/desugaring/constructors

imports // functions
	
	trans/generating/webdsl-eventual-no-ui/model
	trans/generating/webdsl-eventual/model
	trans/generating/webdsl-eventual/module
	trans/generating/webdsl/data
	trans/api/module-api
	trans/api/module-names-api
	trans/api/model-names-api
	trans/lib/debug
	trans/lib/lists-tuples
	trans/lib/string
	trans/lib/index

rules // module

	to-webdsl-eventual-no-ui(err) = module-get-modulename;to-webdsl-eventual-no-ui(err)

	to-webdsl-eventual-no-ui(err): x_name -> 
			module |[
				module x_name
				
				imports lib/relations/Expressions
				imports lib/relations/derivations
			
				section model
				
					def1*
				
				section derivations
				
					native class derivations.x_dirty as Helper2 {
						native1*
					}
					
					native class java.util.Queue as Queue{
						offer(String) : Bool
						add(String) : Bool
						addAll(List<String>) : Bool
						poll() : String
						contains(String) : Bool
						isEmpty() : Bool
					}

				  function flagAllDirty(){
				  	stat5*
				  }
				
					function updateDerivations(){
						if(!getUpdatesEnabled()){
				  		return;
				  	}
						// log("called updateDervations()");
						var notEmpty : Bool;
						stat4*
					}
					
  				invoke updateDerivations() every 3 seconds
				
				section data
					
					init{
						stat1*
						stat2*
						stat3*
						// updateDerivations();
					}
				
			]|
		where
			is-modulename
		with
			def1*  := <modulename-get-entitynames;map(to-webdsl-eventual-no-ui(err))>x_name;
			stat1* := <modulename-get-entityinstancenames;map(to-webdsl-1(err))>x_name;
			stat2* := <modulename-get-entityinstancenames;map(to-webdsl-2(err))>x_name;
			stat3* := <modulename-get-entityinstancenames;map(to-webdsl-3(err))>x_name;
			stat4* := <index-get-prop(|TopoSort());Hd;webdsl-toposort>x_name;
			x_dirty:= $[[x_name]_Dirty];
			native1*:= <modulename-get-entitynames;map(entityname-get-attributenames);flatten-list;filter(where(not(attributename-is-normal)));map(attribute-dirty-queue)>x_name;
			stat5*  := <modulename-get-entitynames;map(entityname-get-attributenames);flatten-list;filter(where(not(attributename-is-normal)));map(attribute-flagalldirty)>x_name
			
rules
	
	attribute-flagalldirty: x_name -> |[Helper2.x_queue().addAll([a.id.toString() | a:x_entity in (from x_entity)]);]|
		with
			x_entity := <attributename-get-entityname>x_name;
			x_queue  := $[get_[x_entity]_[x_name]_queue]
			

