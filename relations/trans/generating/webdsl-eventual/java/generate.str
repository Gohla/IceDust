module generating/webdsl-eventual-java/java/generate

imports // constructors

	signatures/Modules-sig

imports // functions

	java/pretty-print
	generating/webdsl-eventual/java/module

rules // documentation
	
	/*
	 * Generate a native java java.util.concurrent.ConcurrentLinkedQueue<E> for each type.
	 * Each normal page request can flag items dirty in these queues.
	 * The central eventual consistent thread empties these queues and computes everything.
	 * Items may be added during computation, the algorithm will do those first in order to avoid unnecessary computation (note this might lead to starvation during heavy use).
	 */

rules // Builders
	
	generate-webdsl-eventual-java-code(err):
	    (selected, path) -> (fileName, result, errors)
	    with
			fileName := $[[<remove-extension>path]_Dirty.java];
			java-ast := <to-webdsl-eventual-java(err)> selected;
			errors   := <collect-om(\("ERROR_PLACEHOLDER", msg) -> msg\)>;
			java-ast':= <bottomup(try(\("ERROR_PLACEHOLDER", msg) -> []\))> java-ast;
			result   := <pp-java-string> java-ast'

rules	// General Java generation rules

	to-webdsl-eventual-java(err) = where(is-string);id

  to-webdsl-eventual-java(err):
    [_] -> <concat-strings> <map(to-webdsl-eventual-java(err))>
    
  to-webdsl-eventual-java(err):
    () -> ""
    
  to-webdsl-eventual-java(err):
  	None() -> ""

  to-webdsl-eventual-java(err): Module(_,_,_,_) -> None()
  	where
  		<err> "Desugar before generating code."
	
  to-webdsl-eventual-java(err): a -> a'
  	where
		  a' := <err>$[No to-webdsl-eventual-java defined for [<get-constructor> a]/[<get-arguments;length> a].]

