module generating/webdsl/data

imports // constructors

	api/constructors
	webdsl/WebDSL

imports // functions

	api/_runtime
	api/data-api
	api/data-names-api
	lib/search
	generating/webdsl/expressions

rules

  data-modulename-to-webdsl-stms(err): moduleName -> result
    with
      eiNames          := <modulename-get-entityinstancenames>moduleName;
      stat_objects*    := <map(entityinstancename-to-webdsl-stm(err))>eiNames;
      stat_membervals* := <map(entityinstancename-to-webdsl-stms2(err));flatten-list>eiNames;
      stat_saves*      := <map(entityinstancename-to-webdsl-stm3(err))>eiNames
    with
      result := stat* |[
        stat_objects*
        stat_membervals*
        stat_saves*
      ]|

rules // entity instances

	entityinstancename-to-webdsl-stm(err): x_eiName -> result
		with
			srt1 := <_get-type>x_eiName
		with
      result := stat |[
        var x_eiName := srt1 {};
      ]|
			
  entityinstancename-to-webdsl-stms2(err): eiName -> result
    with
      memberValues := <entityinstancename-get-membervalues>eiName;
      result := <map(membervalue-to-webdsl-stms(err|eiName));flatten-list>memberValues


	entityinstancename-to-webdsl-stm3(err): x_eiName -> result
		where
			is-entityinstancename
    with
      result := stat |[
        x_eiName.save();
      ]|
      
rules

  membervalue-to-webdsl-stms(err|x_eiName): MemberValue(MemberRef(x_memberName), valueAst) -> result
    where
      <is-attributename>x_memberName
    with
      e_value := <to-webdsl(err)>valueAst
    with
      result := stat |[
        x_eiName.x_memberName := e_value;
      ]|
          
  membervalue-to-webdsl-stms(err|x_eiName): MemberValue(MemberRef(relationname), valueAst) -> result
    where
      <is-relationname>relationname
    with
      valueNames := <collect-all(eiwrefnames)>valueAst;
      result := <map(data-relationname-to-webdsl-stm(err|x_eiName, relationname))>valueNames
          
  membervalue-to-webdsl-stms(err|x_eiName): MemberValue(MemberRef(shortcutName), valueAst) -> result
    where
      <is-shortcutname>shortcutName
    with
      valueNames := <collect-all(eiwrefnames)>valueAst;
      result := <map(data-shortcutname-to-webdsl-stms(err|x_eiName, shortcutName));flatten-list>valueNames

rules

  eirefname: EntityInstanceRef(name) -> name
  eiwrefnames: EntityInstanceWrapper(RelationInstance(EntityInstanceRef(relname)), EntityInstanceRef(name)) -> (relname,name)
  eiwrefnames: EntityInstanceWrapper(None(), EntityInstanceRef(name))                                       -> (None(),name)

rules

  data-relationname-to-webdsl-stm(err|x_eiName,x_relationName): (_, x_eiName2) -> result
    with
      if <get-multiplicity;upper-one>x_relationName then
        result := stat |[
          x_eiName.x_relationName := x_eiName2;
        ]|
      else
        result := stat |[
          x_eiName.x_relationName.add(x_eiName2);
        ]|
      end

  data-shortcutname-to-webdsl-stms(err|x_eiName,shortcutName): (relName, x_eiName2) -> [result0*,result1*]
    with
      x_roleName1    := <shortcutname-get-rolename1>shortcutName;
      x_roleName2    := <shortcutname-get-rolename2>shortcutName;
      x_relationType := <attributename-get-entityname>x_roleName1;
      if(None() := relName) then
        x_relationObject := $[[x_eiName]_[x_eiName2]_[x_relationType]]
      else
        x_relationObject := relName
      end;
      if(None() := relName) then
        result0* := stat* |[
          var x_relationObject := x_relationType{};
        ]|
      else
        result0* := []
      end;
      result1* := stat* |[
        x_relationObject.x_roleName1 := x_eiName;
        x_relationObject.x_roleName2 := x_eiName2;
      ]|

rules // entity instance attributes
	
	to-webdsl(err|x_instanceName): av ->
		stat |[
			x_instanceName.x_attrName := e1;
		]|
		where
			is-attributevalue
		with
			x_attrName := <attributevalue-get-attr>av;
			e1         := <attributevalue-get-value;to-webdsl(err)>av
	
rules // entity instance roles
	
	to-webdsl(err|x_instanceName): av ->
		stat |[
			x_instanceName.x_roleName := e1;
		]|
		where
			is-rolevalue
		with
			x_roleName := <rolevalue-get-role>av;
			e1         := <rolevalue-get-value;to-webdsl(err)>av
	
rules
	