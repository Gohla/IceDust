module trans/generating/webdsl/expressions

imports // constructors

	lib/webdsl/constructors
	lib/webdsl/WebDSL
	src-gen/signatures/Data-sig
	src-gen/signatures/Expressions-sig	
	trans/desugaring/constructors

imports // functions

	trans/api/_runtime	
	trans/api/module-names-api
	trans/generating/java/types
	trans/generating/webdsl/model
	trans/generating/webdsl/data
	trans/generating/webdsl/types

rules // math

	webdsl-lib-call: Addition(_, _)					->"plus"
	webdsl-lib-call: Subtraction(_, _)			->"minus"
	webdsl-lib-call: Division(_, _) 				->"div"
	webdsl-lib-call: Modulo(_, _) 					->"mod"
	webdsl-lib-call: Multiplication(_, _)		->"mul"

rules // logic
	
	webdsl-lib-call: Not(_)									->"not"
	webdsl-lib-call: LessThan(_, _)					->"lt"
	webdsl-lib-call: LessThanEqual(_, _)		->"lte"
	webdsl-lib-call: GreaterThan(_, _)			->"gt"
	webdsl-lib-call: GreaterThanEqual(_,_)	->"gte"
	webdsl-lib-call: Equal(_, _)						->"eq"
	webdsl-lib-call: Inequal(_, _)					->"neq"
	webdsl-lib-call: And(_, _)							->"and"
	webdsl-lib-call: Or(_, _)								->"or"
	webdsl-lib-call: TernaryConditional(_,_,_)->"conditional"
	
	webdsl-lib-call-cast = ?TernaryConditional(_,_,_)

rules // aggregations
	
	webdsl-lib-call-postfix-type: Max(_)		->"max"
	webdsl-lib-call-postfix-type: Min(_)		->"min"
	webdsl-lib-call-postfix-type: Avg(_)		->"avg"
	webdsl-lib-call-postfix-type: Sum(_)		->"sum"
	webdsl-lib-call: Conj(_)								->"conj"
	webdsl-lib-call: Disj(_)								->"disj"
	webdsl-lib-call: Concat(_)							->"concat"
	webdsl-lib-call: Count(_)								->"count"

rules // multiplicities
	
	webdsl-lib-call: Merge(_, _)						->"merge"
	webdsl-lib-call: ChoiceLeft(_, _)				->"choice"
	
	webdsl-lib-call-cast = ?Merge(_, _)
	webdsl-lib-call-cast = ?ChoiceLeft(_, _)

rules // lib expression calls
	
	to-webdsl(err): e -> |[ Expressions.x_method (e1) ]|
		where
			x_method := <webdsl-lib-call>e;
			[ex1] := <get-arguments>e
		with
			e1 := <to-webdsl(err)>ex1
	
	to-webdsl(err): e -> |[ Expressions.x_methodpostfix (e1) ]|
		where
			x_method := <webdsl-lib-call-postfix-type>e;
			[ex1] := <get-arguments>e
		with
			e1 := <to-webdsl(err)>ex1;
			x_methodpostfix := $[[x_method]_[<_get-type;java-id>e]]

	to-webdsl(err): e -> |[ Expressions.x_method (e1, e2) ]|
		where
			x_method := <webdsl-lib-call>e;
			[ex1, ex2] := <get-arguments>e;
			<not(webdsl-lib-call-cast)>e
		with
			e1 := <to-webdsl(err)>ex1;
			e2 := <to-webdsl(err)>ex2

	to-webdsl(err): e -> |[ Expressions.x_method(e1, e2) as srt1 ]|		
	// to-webdsl(err): e -> |[ x_cast(Expressions.x_method(e1, e2)) ]|
		where
			x_method := <webdsl-lib-call>e;
			[ex1, ex2] := <get-arguments>e;
			<webdsl-lib-call-cast>e
		with
			e1 := <to-webdsl(err)>ex1;
			e2 := <to-webdsl(err)>ex2;
			// x_cast := $[as[<_get-type;type-as-string>e]]
			srt1 := <webdsl-type(err)>e
			
	to-webdsl(err): e -> |[ Expressions.x_method(e1, e2, e3) as srt1 ]|
	// to-webdsl(err): e -> |[ x_cast(Expressions.x_method(e1, e2, e3)) ]|
		where
			x_method := <webdsl-lib-call>e;
			[ex1, ex2, ex3] := <get-arguments>e;
			<webdsl-lib-call-cast>e
		with
			e1 := <to-webdsl(err)>ex1;
			e2 := <to-webdsl(err)>ex2;
			e3 := <to-webdsl(err)>ex3;
			// x_cast := $[as[<_get-type;type-as-string>e]]
			srt1 := <webdsl-type(err)>e

rules // literals
	
  to-webdsl(err): String(str1) 		        			  -> String(str1)
  to-webdsl(err): Int(i_1)     		        			  -> webdsl:e |[ i_1 ]|
  to-webdsl(err): Float(f_1)     		        			-> Float(f_1)//webdsl:e |[ f_1 ]|
  to-webdsl(err): True()      		        			  -> webdsl:e |[ true ]|
	to-webdsl(err): False()    			        			  -> webdsl:e |[ false ]|
	to-webdsl(err): Datetime(str1)			            -> webdsl:e |[Expressions.parseDatetime(e1)]| with e1 := String(str1)

rules // casts
	
	to-webdsl(err): Cast(NoValue() , ex1-ty) -> |[ null as x ]| where x := <type-as-string>ex1-ty
	
	to-webdsl(err): Cast(ex1, ex1-ty) -> |[ Expressions.x_method(e1) ]|
		with
			e1 := <to-webdsl(err)>ex1;
			x_method := $[as[<java-id>ex1-ty]]

rules
	