module generating/webdsl/expressions

imports // constructors

  webdsl/constructors
  webdsl/WebDSL
  signatures/Data-sig
  signatures/Expressions-sig  
  desugaring/constructors

imports // functions

  api/_runtime  
  api/module-names-api
  generating/_ir/expressions
  generating/webdsl/model
  generating/webdsl/data
  generating/webdsl/types
   names/naming/names

rules // WebDSL specific: no generics, explicit casts
  
  webdsl-lib-call-cast = ?TernaryConditional(_,_,_)

  webdsl-lib-call-cast = ?Merge(_, _)
  webdsl-lib-call-cast = ?ChoiceLeft(_, _)

rules // lib expression calls
  
  to-webdsl(err): e -> Call(Var("Expressions"), x_methodpostfix, e1*) // |[ Expressions.x_methodpostfix(e1)]| //TODO: fix webdsl concrete syntax for expression list
    where
      lib-call
    where
      not(webdsl-lib-call-cast)
    with
      arg*            := <get-arguments>e;
      e1*             := <map(to-webdsl(err))>arg*;
      x_methodpostfix := <lib-method-name>e
      
  to-webdsl(err): e -> Cast(Call(Var("Expressions"), x_methodpostfix, e1*), srt1) //|[ Expressions.x_methodpostfix(e1) as srt1 ]| //TODO: fix webdsl concrete syntax for expression list
    where
      lib-call
    where
      webdsl-lib-call-cast
    with
      arg*            := <get-arguments>e;
      e1*             := <map(to-webdsl(err))>arg*;
      x_methodpostfix := <lib-method-name>e;
      srt1            := <webdsl-type(err)>e
  
rules // literals
  
  to-webdsl(err): String(str1)                    -> String(str1)
  to-webdsl(err): Int(i_1)                        -> webdsl:e |[ i_1 ]|
  to-webdsl(err): Float(f_1)                      -> Float(f_1)//webdsl:e |[ f_1 ]|
  to-webdsl(err): True()                          -> webdsl:e |[ true ]|
  to-webdsl(err): False()                         -> webdsl:e |[ false ]|
  to-webdsl(err): Datetime(str1)                  -> webdsl:e |[Expressions.parseDatetime(e1)]| with e1 := String(str1)
  to-webdsl(err): NoValue()                       -> webdsl:e |[ null ]|

rules // casts
  
  to-webdsl(err): Cast(NoValue() , ex1-ty) -> |[ null as x ]| where x := <type-as-string>ex1-ty
  
  to-webdsl(err): Cast(ex1, ex1-ty) -> |[ Expressions.x_method(e1) ]|
    with
      e1 := <to-webdsl(err)>ex1;
      x_method := $[as[<postfix-id>ex1-ty]]

rules
  