module generating/webdsl/model

imports // constructors

	api/constructors
	webdsl/WebDSL
	signatures/Model-sig
	signatures/Modules-sig
	desugaring/constructors

imports // functions

	api/_runtime
	api/model-api
	api/model-names-api
	lib/search
  names/naming/names
	naming/_notNaBL
	generating/webdsl/expressions
	generating/webdsl/expressions-references
	generating/webdsl/types

rules // entities
	
  to-webdsl(err): x_name -> 
		webdsl |[
			entity x_name {
				ebd1*
				ebd2*
				ebd3*
			}
		]|
	where
		is-entityname
	with
		ebd1* := <entityname-get-attributenames;map(to-webdsl(err))>x_name;
		ebd2* := <entityname-get-rolenames;     map(to-webdsl(err))>x_name;
		ebd3* := <entityname-get-inversenames;  map(to-webdsl(err))>x_name

rules // attributes: normal

	to-webdsl(err): x_name -> webdsl |[
		x_name : srt1 (default=null)
		
    static function x_getter(en: x_entity) : srt1 {
      return if(en == null) null as srt1 else en.x_name;
    }
    
    static function x_getter(entities : [x_entity]) : [srt1] {
      return [x_entity.x_getter(en) | en : x_entity in entities where x_entity.x_getter(en) != null];
    }
	]|
		where
			is-attributename
		where
			attributename-is-normal
		with
      x_entity           := <attributename-get-entityname>x_name;
      x_getter           := $[get_[x_name]];
      srt1               := <_get-type;type-to-webdsl(err)>x_name

rules // attributes: default

  to-webdsl(err): x_name -> webdsl |[
    x_name : srt1 (default=null)
    x_default : srt1 := x_calc()
    
    function x_calc() : srt1 {
      return e1;
    }
    
    static function x_getter(en : x_entity) : srt1 {
      return if(en == null) null as srt1 else if(en.x_name == null) en.x_default else en.x_name;
    }
    
    static function x_getter(entities : [x_entity]) : [srt1] {
      return [x_entity.x_getter(en) | en : x_entity in entities where x_entity.x_getter(en) != null];
    }
  ]|
    where
      is-attributename
    where
      attributename-is-default
    with
      x_entity           := <attributename-get-entityname>x_name;
      x_getter           := $[get_[x_name]];
      x_calc             := $[calculate_[x_name]];
      x_default          := $[[x_name]_Default];
      srt1               := <_get-type;type-to-webdsl(err)>x_name;
      e1                 := <attributename-get-expr;to-webdsl(err)>x_name

rules // attributes: derivation

	to-webdsl(err): x_name -> webdsl |[
		x_name : srt1 := x_calc()
    
    function x_calc() : srt1{
      return e1;
    }
		
    static function x_getter(en : x_entity) : srt1 {
    	return if(en == null) null as srt1 else en.x_name;
    }
    
    static function x_getter(entities : [x_entity]) : [srt1] {
      return [x_entity.x_getter(en) | en : x_entity in entities where x_entity.x_getter(en) != null];
    }
	]|
		where
			is-attributename
		where
			attributename-is-derivation
		with
      x_entity           := <attributename-get-entityname>x_name;
      x_getter           := $[get_[x_name]];
      x_calc             := $[calculate_[x_name]];
      srt1               := <_get-type;type-to-webdsl(err)>x_name;
      e1                 := <attributename-get-expr;to-webdsl(err)>x_name

rules // roles

	to-webdsl(err): x_name -> webdsl |[
		x_name : x_type (inverse=x_inversename)
		
    static function x_getter(en : x_entity) : x_type {
    	return if(en == null) null as x_type else en.x_name;
    }
    
    static function x_getter(entities:[x_entity]):[x_type]{
    	return [x_entity.x_getter(en) | en : x_entity in entities where x_entity.x_getter(en) != null];
    }
	]|
		where
			is-rolename
		with
			x_type   := <_get-type>x_name;
			x_getter := $[get_[x_name]];
			x_entity := <attributename-get-entityname>x_name;
			x_inversename := <rolename-get-inversename>x_name

rules // inverses
	
	to-webdsl(err): x_name -> webdsl |[
		x_name : x_type //(inverse=x_rolename)
		
    static function x_getter(en : x_entity) : x_type {
    	return if(en == null) null as x_type  else en.x_name;
    }
    
    static function x_getter(entities : [x_entity]) : [x_type] {
      return [x_entity.x_getter(en) | en : x_entity in entities where x_entity.x_getter(en) != null];
    }
	]|
		where
			is-inversename
		where
			get-multiplicity;upper-one
		with
			x_type     := <_get-type>x_name;
			// x_rolename := <inversename-get-rolename>x_name;
			x_getter   := $[get_[x_name]];
			x_entity   := <attributename-get-entityname>x_name
	
	to-webdsl(err): x_name -> webdsl |[
		x_name : [x_type] (inverse=x_rolename)
		
    static function x_getter(en : x_entity) : [x_type] {
    	var empty : [x_type];
    	return if ( en == null ) empty else en.x_name;
    }
    
    static function x_getter(entities : [x_entity]) : [x_type] {
      //return [en2 | en : x_entity in entities, en2 : x_type in x_entity.x_getter(en)];
    	var r : [x_type];
    	for(en in entities){
    		r.addAll(en.x_name);
    	}
    	return r;
    }
	]|
		where
			is-inversename
		where
			get-multiplicity;upper-many
		where
			get-ordering;ordered
		with
			x_type     := <_get-type>x_name;
			x_rolename := <inversename-get-rolename>x_name;
			x_getter   := $[get_[x_name]];
			x_entity   := <attributename-get-entityname>x_name
	
	to-webdsl(err): x_name -> webdsl |[
		x_name : {x_type} //(inverse=x_rolename)
		
    static function x_getter(en : x_entity) : [x_type] {
    	var r : [x_type];
    	if(en != null){
    		r.addAll(en.x_name);
    	}
    	return r;
    }
    
    static function x_getter(entities : [x_entity]) : [x_type] {
      //return [en2 | en : x_entity in entities, en2 : x_type in x_entity.x_getter(en)];
    	var r : [x_type];
    	for(en in entities){
    		r.addAll(en.x_name);
    	}
    	return r;
    }
	]|
		where
			is-inversename
		where
			get-multiplicity;upper-many
		where
			get-ordering;unordered
		with
			x_type     := <_get-type>x_name;
			// x_rolename := <inversename-get-rolename>x_name;
			x_getter   := $[get_[x_name]];
			x_entity   := <attributename-get-entityname>x_name

rules
