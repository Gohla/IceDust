module trans/generating/webdsl/model

imports // constructors

	trans/api/constructors
	lib/webdsl/WebDSL
	src-gen/signatures/model-sig
	src-gen/signatures/modules-sig
	src-gen/signatures/types-sig
	trans/desugaring/constructors

imports // functions

	trans/api/_runtime
	trans/api/model-names-api
	trans/naming/names
	trans/naming/_notNabl

rules // entities
	
  to-webdsl(err): x_name -> 
		webdsl |[
			entity x_name {
				ebd1*
				ebd2*
				ebd3*
			}
		]|
	where
		is-entityname
	with
		ebd1* := <entityname-get-attributenames;map(to-webdsl(err))>x_name;
		ebd2* := <entityname-get-rolenames;     map(to-webdsl(err))>x_name;
		ebd3* := <entityname-get-inversenames;  map(to-webdsl(err))>x_name

rules // attributes

	to-webdsl(err): x_name -> webdsl |[ x_name : srt1 ]|
		where
			is-attributename
		with
			srt1 := <to-webdsl(err)><_get-type>x_name

rules // roles

	to-webdsl(err): x_name -> webdsl |[ x_name : x_type ]|
		where
			is-rolename
		with
			x_type := <_get-type>x_name

rules // inverses
	
	to-webdsl(err): x_name -> webdsl |[ x_name : x_type (inverse=x_rolename) ]|
		where
			is-inversename
		where
			get-multiplicity;upper-one
		with
			x_type := <_get-type>x_name;
			x_rolename := <inversename-get-rolename>x_name
	
	to-webdsl(err): x_name -> webdsl |[ x_name : {x_type} (inverse=x_rolename) ]|
		where
			is-inversename
		where
			get-multiplicity;upper-many
		with
			x_type := <_get-type>x_name;
			x_rolename := <inversename-get-rolename>x_name

rules		
	
	to-webdsl(err): Boolean() -> webdsl |[ Bool ]|		
	to-webdsl(err): Int()     -> webdsl |[ Int ]|		
	to-webdsl(err): String()  -> webdsl |[ String ]|
		
rules
	