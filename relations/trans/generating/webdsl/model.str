module generating/webdsl/model

imports // constructors

	api/constructors
	webdsl/WebDSL
	signatures/Model-sig
	signatures/Modules-sig
	desugaring/constructors

imports // functions

  analysis2/path
	api/_runtime
	api/model-api
	api/model-names-api
	lib/search
  names/naming/names
	naming/_notNaBL
  generating/_ir/model
	generating/webdsl/expressions
	generating/webdsl/expressions-references
	generating/webdsl/types

rules // entities
	
  model-entityname-to-webdsl-def(err): x_entityName -> result
  	where
  		is-entityname
  	with
  		ebd1* := <entityname-get-attributenames;map(model-attributename-to-webdsl-ebds(err)    );flatten-list>x_entityName;
      ebd2* := <entityname-get-relationnames; map(model-roleOrInversename-to-webdsl-ebds(err));flatten-list>x_entityName;
      ebd3* := <entityname-get-rolenames;     map(model-roleOrInversename-to-webdsl-ebds(err));flatten-list>x_entityName;
  		ebd4* := <entityname-get-inversenames;  map(model-roleOrInversename-to-webdsl-ebds(err));flatten-list>x_entityName;
  		ebd5* := <entityname-get-shortcutnames; map(model-shortcutname-to-webdsl-ebds(err))     ;flatten-list>x_entityName
  	with
  	  if entityname-is-noui then
    	  result := def |[
          entity x_entityName {
            ebd1*
            ebd2*
            ebd3*
            ebd4*
            ebd5*
          }
        ]|
      else
        result := def |[
          extend entity x_entityName {
            ebd1*
            ebd2*
            ebd3*
            ebd4*
            ebd5*
          }
        ]|
      end

rules

  model-attributename-to-webdsl-ebds(err): x_attributeName -> [result-field,result-get,result-calculate*,result-get2*,result-cache*,result-flow*,result-trigger*,result-async*]
    where
      is-attributename
    with
      x_entityName                := <attributename-get-entityname>x_attributeName;
      srt_attributeType           := <_get-type;type-to-webdsl(err)>x_attributeName;
      x_getAttribute              := <name-get>x_attributeName;
      x_setAttribute              := <name-set>x_attributeName;
      x_calculateAttribute        := <name-calculate>x_attributeName;
      x_attributeCache            := <name-cache>x_attributeName;
      x_updateAttributeCache      := <name-update-cache>x_attributeName;
      x_dirtyAttribute            := <attributename-entityname-dirty>x_attributeName;
      x_getAndEmptyDirtyAttribute := <name-getandemptydirty>x_attributeName;
      x_updateAllAttributeCache   := <name-updateallcache>x_attributeName;
      x_hasDirty                  := <name-hasdirty>x_attributeName;
      x_flagAttributeDirty        := <name-flagdirty>x_attributeName;
      x_dirtyFlagFlowsto          := <name-dirtyflagflowsto>x_attributeName;
      x_attributeDefault          := <name-default>x_attributeName;
      x_setAttributeTrigger       := <name-set-trigger>x_attributeName;
      x_setAttributeCacheTrigger  := <name-set-cache-trigger>x_attributeName;
      x_flagAttributeDirtyAsync   := <name-flagdirtyasync>x_attributeName;
      x_receiveAttributeDirtyAsync:= <name-receivedirtyasync>x_attributeName;
      x_attributeGetQueue         := <attributename-entityname-getqueue>x_attributeName;
      x_moduleName                := <entityname-get-modulename>x_entityName;
      e_entityNameAttributeName   := String($[[x_entityName].[x_attributeName]]);
      e_entityName                := String(x_entityName)
    with
      if attributename-is-default <+ attributename-is-derivation then
        e_calculate := <attributename-get-expr;to-webdsl(err)>x_attributeName
      end
    with
      if (attributename-is-calconwrite<+attributename-is-eventuallyconsistent); name-get-flowsto-paths;?flowsto-paths then
        stat_flowsTo* := <map(ttuple(path-last, path-pathexpr;pathexpr-shorten-safe;to-webdsl(err));model-path-to-webdsl-stm(err))>flowsto-paths
      end
    with
      if attributename-is-normal <+ attributename-is-default then
        result-field := webdsl |[
          x_attributeName : srt_attributeType (default=null)
        ]|
      else
        result-field := webdsl |[
          x_attributeName : srt_attributeType := x_calculateAttribute()
        ]|
      end
    with
      if attributename-is-default; attributename-is-calconread then
        result-get := webdsl |[
          function x_getAttribute() : srt_attributeType {
            return if(this.x_attributeName != null) this.x_attributeName else this.x_calculateAttribute();
          }
        ]|
      else if attributename-is-default; (attributename-is-calconwrite<+attributename-is-eventuallyconsistent) then
        result-get := webdsl |[
          function x_getAttribute() : srt_attributeType {
            return if(this.x_attributeName != null) this.x_attributeName else this.x_attributeCache;
          }
        ]|
      else if attributename-is-normal <+ ( attributename-is-derivation; attributename-is-calconread ) then
        result-get := [webdsl |[
          function x_getAttribute() : srt_attributeType {
            return this.x_attributeName;
          }
        ]|]
      else // derivation; calconwrite
        result-get := [webdsl |[
          function x_getAttribute() : srt_attributeType {
            return this.x_attributeCache;
          }
        ]|]
      end end end
    with
      if attributename-is-default <+ attributename-is-derivation then
        result-calculate* := [webdsl |[
          function x_calculateAttribute() : srt_attributeType {
            return e_calculate;
          }
        ]|]
      else
        result-calculate* := []
      end
    with
      result-get2* := webdsl |[          
        static function x_getAttribute(en: x_entityName) : srt_attributeType {
          return if(en == null) null as srt_attributeType else en.x_getAttribute();
        }
        
        static function x_getAttribute(entities : [x_entityName]) : [srt_attributeType] {
          return [en.x_getAttribute() | en : x_entityName in entities where en.x_getAttribute() != null];
        }
      ]|
    with
      if (attributename-is-default <+ attributename-is-derivation); (attributename-is-calconwrite<+attributename-is-eventuallyconsistent) then
        result-cache* := webdsl |[
          x_attributeCache : srt_attributeType (default=x_calculateAttribute())
          
          function x_updateAttributeCache(){
            x_attributeCache := x_calculateAttribute();
          }
          
          static function x_updateAllAttributeCache () {
            var entities := x_entityName.x_getAndEmptyDirtyAttribute();
            if(entities.length != 0){
              log("Updating " + e_entityNameAttributeName + ": " + entities.length);
            }
            for(en in entities){
              en.x_updateAttributeCache();
            }
          }
          
          static function x_getAndEmptyDirtyAttribute() : Set<x_entityName> {
            var values := x_dirtyAttribute;
            x_dirtyAttribute := Set<x_entityName>();
            return values;
          }
    
          static function x_hasDirty () : Bool {
            return x_dirtyAttribute.length!=0;
          }
                
          static function x_flagAttributeDirty(en : x_entityName) {
            if(en != null){
              x_dirtyAttribute.add(en);
            }
          }
          
          static function x_flagAttributeDirty(ens : [x_entityName]) {
            x_dirtyAttribute.addAll(ens);
          }
        ]|
      else
        result-cache* := []
      end
    with
      if (attributename-is-calconwrite<+attributename-is-eventuallyconsistent) then
        result-flow* := [webdsl |[          
          function x_dirtyFlagFlowsto() {
            stat_flowsTo*
          }
        ]|]
      else
        result-flow* := []
      end
    with
      if attributename-is-normal; (attributename-is-calconwrite<+attributename-is-eventuallyconsistent) then
        result-trigger* := [webdsl |[
          extend function x_setAttributeTrigger(newValue : srt_attributeType){
            if(x_getAttribute() != newValue){
              x_dirtyFlagFlowsto();
            }
          }
        ]|]
      else if attributename-is-default; (attributename-is-calconwrite<+attributename-is-eventuallyconsistent) then
        result-trigger* := webdsl |[
          extend function x_setAttributeTrigger(newValue : srt_attributeType){
            if(x_getAttribute() != newValue){ // use getter to get default-value behavior
              x_dirtyFlagFlowsto();
            }
          }
          extend function x_setAttributeCacheTrigger(newValue : srt_attributeType){
            if(x_attributeName == null && x_getAttribute() != newValue){ // update is cached value changes and user value is null
              x_dirtyFlagFlowsto();
            }
          }
        ]|
      else if attributename-is-derivation; (attributename-is-calconwrite<+attributename-is-eventuallyconsistent) then
        result-trigger* := [webdsl |[
          extend function x_setAttributeCacheTrigger(newValue : srt_attributeType){
            if(x_getAttribute() != newValue){ // dirty flag if cached value changes
              x_dirtyFlagFlowsto();
            }
          }
        ]|]
      else
        result-trigger* := []
      end end end
    with
      if (attributename-is-default <+ attributename-is-derivation); attributename-is-eventuallyconsistent then
        result-async* := webdsl |[
          static function x_flagAttributeDirtyAsync() {
            var dirtyValues := x_entityName.x_getAndEmptyDirtyAttribute();
            DirtyCollections.x_attributeGetQueue().addAll([v.id.toString()|v : x_entityName in dirtyValues]);
          }

          static function x_receiveAttributeDirtyAsync() {
            var queue := DirtyCollections.x_attributeGetQueue();
            var dirtyValues : Set<x_entityName>;
            while(!queue.isEmpty()){
              var v : x_entityName := loadEntity(e_entityName, UUIDFromString(queue.poll() as String)) as x_entityName;
              if(v != null){
                dirtyValues.add(v);
              }
            }
            x_entityName.x_flagAttributeDirty(dirtyValues.list());
          }
        ]|
      else
        result-async* := []
      end

rules

  model-path-to-webdsl-stm(err): (x_attributeName, e_path) -> result
    with
      x_entityName := <attributename-get-entityname>x_attributeName;
      x_flagDirty  := <name-flagdirty>x_attributeName
    with
      result := stat |[
        x_entityName.x_flagDirty(e_path);
      ]|

rules

  model-roleOrInversename-to-webdsl-ebds(err): x_roleName -> [result-field,result-get*,result-flow*,result-trigger*]
    where
      is-rolename <+ is-inversename <+ is-relationname
    with
      x_inverseName          := <name-get-inversename>x_roleName;
      x_inverseEntityName    := <attributename-get-entityname>x_inverseName;
      x_roleEntityName       := <attributename-get-entityname>x_roleName;
      x_getRole              := <name-get>x_roleName;
      x_setRole              := <name-set>x_roleName;
      x_addRole              := <name-add>x_roleName;
      x_removeRole           := <name-remove>x_roleName;
      x_setRolePrivate       := <name-set-private>x_roleName;
      x_addRolePrivate       := <name-add-private>x_roleName;
      x_removeRolePrivate    := <name-remove-private>x_roleName;
      x_getInverse           := <name-get>x_inverseName;
      x_setInversePrivate    := <name-set-private>x_inverseName;
      x_addInversePrivate    := <name-add-private>x_inverseName;
      x_removeInversePrivate := <name-remove-private>x_inverseName;
      x_dirtyFlagFlowstoRole := <name-dirtyflagflowsto>x_roleName;
      x_setRoleTrigger       := <name-set-trigger>x_roleName;
      x_addRoleTrigger       := <name-add-trigger>x_setRoleTrigger;
      x_removeRoleTrigger    := <name-remove-trigger>x_setRoleTrigger
    with
      if (attributename-is-calconwrite<+attributename-is-eventuallyconsistent); name-get-flowsto-paths;?flowsto-paths then
        stat_flowsTo* := <map(ttuple(path-last, path-pathexpr;pathexpr-shorten-safe;to-webdsl(err));model-path-to-webdsl-stm(err))>flowsto-paths
      end
    with
      if (is-rolename <+ is-relationname;relationname-is-left); get-multiplicity;upper-one then
        result-field := webdsl |[
          x_roleName : x_inverseEntityName (inverse=x_inverseName)
        ]|
      else if (is-rolename <+ is-relationname;relationname-is-left); get-multiplicity;upper-many; !x_roleName;get-ordering;ordered then
        result-field := webdsl |[
          x_roleName : [x_inverseEntityName] (inverse=x_inverseName)
        ]|
      else if (is-rolename <+ is-relationname;relationname-is-left); get-multiplicity;upper-many; !x_roleName;get-ordering;unordered then
        result-field := webdsl |[
          x_roleName : [x_inverseEntityName] (inverse=x_inverseName)
        ]|
      else if is-inversename; get-multiplicity;upper-one then
        result-field := webdsl |[
          x_roleName : x_inverseEntityName
        ]|
      else if is-inversename; get-multiplicity;upper-many; !x_roleName;get-ordering;ordered then
        result-field := webdsl |[
          x_roleName : [x_inverseEntityName]
        ]|
      else // inverse unordered
        result-field := webdsl |[
          x_roleName : {x_inverseEntityName}
        ]|
      end end end end end
    with
      if get-multiplicity;upper-one then
        result-get* := webdsl |[
          function x_getRole() : x_inverseEntityName {
            return this.x_roleName;
          }
          
          static function x_getRole(en: x_roleEntityName) : x_inverseEntityName {
            return if(en == null) null as x_inverseEntityName else en.x_getRole();
          }
          
          static function x_getRole(ens : [x_roleEntityName]) : [x_inverseEntityName] {
            return [en.x_getRole() | en : x_roleEntityName in ens where en.x_getRole() != null];
          }
        ]|
      else
        result-get* := webdsl |[
          function x_getRole() : [x_inverseEntityName] {
            return [en | en : x_inverseEntityName in this.x_roleName]; // list comprehension to convert set or list to list
          }
          
          static function x_getRole(en: x_roleEntityName) : [x_inverseEntityName] {
            var empty : [x_inverseEntityName];
            return if(en == null) empty else en.x_getRole();
          }
          
          static function x_getRole(ens : [x_roleEntityName]) : [x_inverseEntityName] {
            var r : [x_inverseEntityName];
            for(en in ens){
              r.addAll(en.x_getRole());
            }
            return r;
          }
        ]|
      end
    with
      if (attributename-is-calconwrite<+attributename-is-eventuallyconsistent) then
        result-flow* := [webdsl |[
          function x_dirtyFlagFlowstoRole(){
            stat_flowsTo*
          }
        ]|]
      else
        result-flow* := []
      end
    with
      if (attributename-is-calconwrite<+attributename-is-eventuallyconsistent); get-multiplicity;upper-one then
        result-trigger* := [webdsl |[
          function x_setRoleTrigger(newValue : x_inverseEntityName){
            if(newValue != x_getRole()){
              x_dirtyFlagFlowstoRole();
            }
          }
        ]|]
      else if (attributename-is-calconwrite<+attributename-is-eventuallyconsistent); get-multiplicity;upper-many then
        result-trigger* := webdsl |[
          function x_addRoleTrigger(en : x_inverseEntityName){
            if(en != null){
              x_dirtyFlagFlowstoRole();
            }
          }
          
          function x_removeRoleTrigger(en : x_inverseEntityName){
            if(en != null){
              x_dirtyFlagFlowstoRole();
            }
          }
        ]|
      else
        result-trigger* := []
      end end

rules

  model-shortcutname-to-webdsl-ebds(err): x_shortcutName -> result*
    where
      is-shortcutname
    with
      x_sourceEntityName := <attributename-get-entityname>x_shortcutName;
      x_targetEntityName := <_get-type>x_shortcutName;
      x_inverseName      := <shortcutname-get-inversename>x_shortcutName;
      x_roleName         := <shortcutname-get-rolename>x_shortcutName;
      x_relationName     := <attributename-get-entityname>x_roleName;
      x_getShortcut      := <name-get>x_shortcutName;
      x_getInverse       := <name-get>x_inverseName;
      x_getRole          := <name-get>x_roleName
    with
      if get-multiplicity;upper-one then
        result* := webdsl |[
          function x_getShortcut() : x_targetEntityName {
            return x_relationName.x_getRole(this.x_getInverse());
          }
          
          static function x_getShortcut(en: x_sourceEntityName) : x_targetEntityName {
            return x_relationName.x_getRole(x_sourceEntityName.x_getInverse(en));
          }
          
          static function x_getShortcut(ens : [x_sourceEntityName]) : [x_targetEntityName] {
            return x_relationName.x_getRole(x_sourceEntityName.x_getInverse(ens));
          }
        ]|
      else
        result* := webdsl |[
          function x_getShortcut() : [x_targetEntityName] {
            return x_relationName.x_getRole(this.x_getInverse());
          }
          
          static function x_getShortcut(en: x_sourceEntityName) : [x_targetEntityName] {
            return x_relationName.x_getRole(x_sourceEntityName.x_getInverse(en));
          }
          
          static function x_getShortcut(ens : [x_sourceEntityName]) : [x_targetEntityName] {
            return x_relationName.x_getRole(x_sourceEntityName.x_getInverse(ens));
          }
        ]|
      end
