module generating/webdsl/module

imports // constructors

	webdsl/constructors
	webdsl/WebDSL
	desugaring/constructors

imports // functions
  
  generating/_ir/model 
  generating/webdsl/model
	generating/webdsl/data
  api/model-names-api
	api/module-api
  api/module-names-api
  lib/lists-tuples
  lib/string

rules // module

	modulename-to-webdsl-application(err): x_moduleName -> result
		where
			is-modulename
		with
			def1*          := <modulename-get-entitynames;map(model-entityname-to-webdsl-def(err))>x_moduleName;
			def2*          := <modulename-get-entitynames;map(entityname-to-webdsl-defs);flatten-list>x_moduleName;
			elem_menu*     := <modulename-get-entitynames;map(entityname-to-webdsl-elem)>x_moduleName;
			stat_initdata* := <data-modulename-to-webdsl-stms(err)>x_moduleName
		with
		  if (modulename-is-calconwrite<+modulename-is-eventuallyconsistent) then
		    def3*            := <modulename-get-attributenames;filter(where(not(attributename-is-normal)));map(attributename-to-webdsl-defs);flatten-list>x_moduleName;
		    stat_cach*       := <cache-modulename-to-webdsl-stms>x_moduleName;
		    stat_initdcoll*  := [webdsl |[initDirtyCollections();]|]
		  else
        stat_initdcoll*  := []
		  end
		with
		  if modulename-is-calconwrite then
		    stat_initupdate* := [webdsl |[updateDerivations();]|]
		  else if modulename-is-eventuallyconsistent then
		    stat_initupdate* := [webdsl |[flagDirtyAsync();]|]
		  else
        stat_initupdate* := []
		  end end
    with
      if modulename-is-eventuallyconsistent then
        stat_flagasync* := []
      end
    with
      if (modulename-is-calconwrite<+modulename-is-eventuallyconsistent) then  
        sec1* := [webdsl |[
          section caches and dirty flags
          
            def3*
            
            function initDirtyCollections(){
  
            }
            
            function updateDerivations(){
              stat_cach*
            }
        ]|]
      else
        sec1* := []
      end
    with
      if modulename-is-eventuallyconsistent then
        sec2* := [webdsl |[
          section async dirty flags
            
            function flagDirtyAsync(){
              stat_flagasync*
            }
        ]|]
      else
        sec2* := []
      end
	  with
      result := webdsl |[
        application x_moduleName
        
        imports lib/relations/crud-ui
        imports lib/relations/Expressions
      
        section model
        
          def1*
        
        sec1* // caches and dirty flags
        
        sec2* // async dirty flags
        
        section data
          
          init{
            stat_initdcoll*
            stat_initdata*
            stat_initupdate*
          }
        
        section ui
        
          define applicationmenu() {
            elem_menu*
          }
          
          def2*
      ]|

rules //crud
	
  entityname-to-webdsl-defs: x_entityName -> result
    with
      x_manageEntity := <name-manage>x_entityName;
      x_createEntity := <name-create>x_entityName;
      x_editEntity   := <name-edit>x_entityName;
      x_viewEntity   := <lcfirst>x_entityName;
      form-fields :=
        <concat(
          entityname-get-attributenames;filter(where(not(attributename-is-derivation))),
          entityname-get-rolenames,
          entityname-get-inversenames
        );map(attributename-to-webdsl)>x_entityName;
      elem_deriveEditRowsTemp := Derive("editRows", Var("temp"), form-fields);
      elem_deriveEditRowsArg  := Derive("editRows", Var("arg"),  form-fields)
    with
      if entityname-is-calconwrite then
        stat_updateDerivations* := [stat |[
          updateDerivations();
        ]|]
      else
        stat_updateDerivations* := []
      end
    with
      if entityname-is-calconread then
        result := [DeriveCrud(x_entityName)]
      else
        result := def* |[
          define page x_createEntity(){
            //derive createPage from temp
            main()
            define body() {
              var temp := x_entityName{}
              header{"Create " output(temp.name) } 
              form { 
                <fieldset>
                  <legend>
                    output("Details")
                  </legend>
                  <table>
                    elem_deriveEditRowsTemp
                    // derive editRows from temp
                  </table>
                </fieldset>      
                action("Save", save())
              }
              action save() { 
                temp.save();
                stat_updateDerivations*
                return x_manageEntity();
              }
            }
          }
          define page x_viewEntity(arg : x_entityName){
            derive viewPage from arg
          }
          define page x_editEntity(arg : x_entityName){
            //derive editPage from arg
            main()
            define body() {
              header{"Edit " output(arg.name) } 
              form { 
                <fieldset>
                  <legend>
                    output("Details")
                  </legend>
                  <table>
                    elem_deriveEditRowsArg
                    // derive editRows from arg
                  </table>
                </fieldset>  
                action("Save", save())
              }
              action save() { 
                arg.save();
                stat_updateDerivations*
                return x_manageEntity();
              }
            }
          }
          define page x_manageEntity(){
            main()
            define body(){
              navigate(x_createEntity()){ "create" }
              <list>
                for(elem : x_entityName){
                  <li> 
                    output(elem)
                    " "
                    navigate(x_editEntity(elem)){ "edit" }
                    " "
                    form{action("remove",remove(elem))}
                  </li>
                }
              </list>
              action remove(arg : x_entityName){
                arg.delete();
              }
            }
          }
        ]|
      end
	
  attributename-to-webdsl: x_name -> DeriveDefault(x_name)
	
	entityname-to-webdsl-elem: x_entityName -> result
		with
			x_manageName := $[manage[x_entityName]];
			$text := Text(x_entityName)
		with
		  result := elem |[
		    navbaritem{navigate x_manageName(){$text}}
		  ]|
	
rules // derivations
  
  attributename-to-webdsl-defs: x_attributeName -> result
    with
      x_entityName := <attributename-get-entityname>x_attributeName;
      x_dirty      := <attributename-entityname-dirty>x_attributeName
    with
      result := def* |[
        request var x_dirty := Set<x_entityName>()
        
        extend function initDirtyCollections(){
          x_dirty := Set<x_entityName>();
        }
      ]|

rules
  
  cache-modulename-to-webdsl-stms: x_moduleName -> result
    with
      namess := <modulename-get-attributenames-topo;map(filter(where(is-attributename;not(attributename-is-normal))));filter(list-not-empty)>x_moduleName;
      stat_updat* := <map(cache-attributenames-to-webdsl-stms);flatten-list>namess
    with
      if (modulename-is-calconwrite<+modulename-is-eventuallyconsistent) then
        result := webdsl |[
          var notEmpty : Bool;
          stat_updat*
        ]|
      else
        result := []
      end
      
  cache-attributenames-to-webdsl-stms: attributeNames -> result
    with
      stat_updat* := <map(cache-attributename-to-webdsl-stm-update)>attributeNames;
      stat_empty* := <map(cache-attributename-to-webdsl-stm-empty)>attributeNames
    with
      result := webdsl |[
        notEmpty := true;
        while(notEmpty){
          stat_updat*
          notEmpty := false;
          stat_empty*
        }
      ]|
      
  cache-attributename-to-webdsl-stm-update: x_attributeName -> result
    with
      x_entityName              := <attributename-get-entityname>x_attributeName;
      x_updateAllAttributeCache := <name-updateallcache>x_attributeName
    with
      result := webdsl |[
        x_entityName.x_updateAllAttributeCache();
      ]|
      
  cache-attributename-to-webdsl-stm-empty: x_attributeName -> result
    with
      x_entityName              := <attributename-get-entityname>x_attributeName;
      x_hasDirty                := <name-hasdirty>x_attributeName
    with
      result := webdsl |[
        notEmpty := notEmpty || x_entityName.x_hasDirty();
      ]|
