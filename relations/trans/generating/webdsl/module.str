module trans/generating/webdsl/module

imports // constructors

	lib/webdsl/constructors
	lib/webdsl/WebDSL
	trans/desugaring/constructors

imports // functions
	
	trans/generating/webdsl/model
	trans/generating/webdsl/data
	trans/api/module-names-api

rules // module

	to-webdsl(err):
		ast@ModuleDesugared(x_name, _, _, _) -> 
			webdsl |[
				application x_name
				
				imports lib/relations/Expressions
			
				section model
				
					def1*
				
				section data
					
					init{
						stat1*
						stat2*
						stat3*
					}
				
				section CRUD
				
				  page root ( )
				  {
					  main()
					  define body() {
					    "Hello world!"
					  }
				  }
				  
					define override main() {
					  <div id="pagewrapper">
					    <div id="navbar">
					      applicationmenu()
					    </div>
					    <div id="content">
					      body()
					    </div>
					    <div id="clear"></div>
					    <div id="push"></div>
					  </div>
					  <div id="footer">
					    <span id="footercontent">"powered by " <a href="http://webdsl.org">"WebDSL"</a></span>
					  </div>
					}
					
					define override body(){
					  "default body"
					}
					
					define mainheader() {
					  navigate(root()){
					    image("/images/logosmall.png")
					  }
					}
					
					define applicationmenu() {
						elem1*
					}
					
					define navbaritem(){
					  <span class="navbaritem">
					    elements()
					  </span>
					}
					 
					define override errorTemplateInput(messages : List<String>){
					  elements()
					  for(ve: String in messages){
					    <tr style = "color: #FF0000;border: 1px solid #FF0000;">
					      <td></td>
					      <td> 
					        output(ve)
					      </td>
					    </tr>
					  }
					}
					
					def2*
				
			]|
		with
			def1*  := <modulename-get-entitynames;map(to-webdsl(err))>x_name;
			def2*  := <modulename-get-entitynames;map(webdsl-crud)>x_name;
			elem1* := <modulename-get-entitynames;map(webdsl-crud-nav)>x_name;
			stat1* := <modulename-get-entityinstancenames;map(to-webdsl-1(err|ast))>x_name;
			stat2* := <modulename-get-entityinstancenames;map(to-webdsl-2(err|ast))>x_name;
			stat3* := <modulename-get-entityinstancenames;map(to-webdsl-3(err|ast))>x_name

rules //crud
	
	webdsl-crud: x_name -> DeriveCrud(x_name)
	
	webdsl-crud-nav: x_name -> webdsl |[navbaritem{navigate x_manageName(){$text}}]|
		with
			x_manageName := $[manage[x_name]];
			$text := Text(x_name)
	
rules
	
