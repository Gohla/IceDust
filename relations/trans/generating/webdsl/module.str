module generating/webdsl/module

imports // constructors

	webdsl/constructors
	webdsl/WebDSL
	desugaring/constructors

imports // functions
	
	generating/webdsl/model
	generating/webdsl/data
	api/module-api
	api/module-names-api

rules // module

	modulename-to-webdsl-application(err): x_moduleName -> 
			webdsl |[
				application x_moduleName
				
        imports lib/relations/crud-ui
        imports lib/relations/Expressions
			
				section model
				
					def1*
				
				section data
					
					init{
//						stat1*
//						stat2*
//						stat3*
					}
				
				section ui
				
					define applicationmenu() {
						elem1*
					}
					
					def2*
				
			]|
		where
			is-modulename
		with
			def1*  := <modulename-get-entitynames;map(model-entityname-to-webdsl-def(err))>x_moduleName;
			def2*  := <modulename-get-entitynames;map(entityname-to-webdsl-def)>x_moduleName;
			elem1* := <modulename-get-entitynames;map(entityname-to-webdsl-elem)>x_moduleName
//			stat1* := <modulename-get-entityinstancenames;map(to-webdsl-1(err))>x_moduleName;
//			stat2* := <modulename-get-entityinstancenames;map(to-webdsl-2(err))>x_moduleName;
//			stat3* := <modulename-get-entityinstancenames;map(to-webdsl-3(err))>x_moduleName

rules //crud
	
	entityname-to-webdsl-def: x_entityName -> DeriveCrud(x_entityName)
	
	entityname-to-webdsl-elem: x_entityName -> result
		with
			x_manageName := $[manage[x_entityName]];
			$text := Text(x_entityName)
		with
		  result := elem |[
		    navbaritem{navigate x_manageName(){$text}}
		  ]|
	
rules
	
