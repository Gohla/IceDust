module lib/index

imports // constructors
	
	api/_runtime-constructors

imports // functions

	api/_runtime

rules

	index-store-prop(|kind): (name, val) -> <index-store-prop(|kind, name)>val

	index-store-prop(|kind, name): val -> val
		with
			<_index-add(|val, "analysis2")>Prop(<_nabl-uri>name, kind)

	index-get-prop(|kind): name -> val
		where
			<_index-get-all-values>Prop(<_nabl-uri>name, kind) => val

  index-store-def: name{defi@Def(uri)} -> name
    with
      <_index-add(|"analysis2")>defi;
//      <debug>uri;
//      <debug>defi;
      uri-nonnique := <_nabl-nonunique-uri>uri;
//      <debug>uri-nonnique;
      <new-alias2(|"analysis2", uri-nonnique, uri)>defi

  new-alias2(|source, uri, alias-uri):
    _ -> alias
    with
      alias  := Alias(uri);
      ialias := InverseAlias(alias-uri);
      if <not(eq)> (uri, alias-uri) then
        <_index-add(|alias-uri, source)> alias;
        <_index-add(|uri, source)> ialias
      end

rules

  index-store-prop2(|kind, name): val -> val
    with
      <_index-add(|val, "compiler-options")>Prop(<_nabl-uri>name, kind)

  clear-index2: a -> a
    with
      <_index-clear-source>"compiler-options"
