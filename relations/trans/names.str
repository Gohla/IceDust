module names

imports
  lib/nabl/-
  lib/task/-
  lib/properties/-
  lib/types/-
  lib/editor/-
  include/Relations


signature
  constructors
    NablNsModule     : Namespace
    NablNsEntityType : Namespace
    NablNsEntity     : Namespace
    NablNsAttribute  : Namespace
    NablNsRole       : Namespace
    NablNsThis       : Namespace


signature
  constructors
    NablProp_derivation-type : Property
    NablProp_fulfill-role    : Property


rules

  nabl-custom-properties(add-properties) =
    ![NablProp_derivation-type(), NablProp_fulfill-role()]
    ; add-properties

  derivation-type-is(|task*) =
    nabl-prop-calc(|task*, [])

  derivation-type-task(|task*) =
    get-or-create-property-task(|task*, NablProp_derivation-type())

  derivation-type-is(|task*, dep*) =
    nabl-prop-calc(|task*, dep*)

  derivation-type-list(|task*) =
    nabl-prop-list(|task*, [])

  derivation-type-list(|task*, dep*) =
    nabl-prop-list(|task*, dep*)

  derivation-type-lookup(|task*) =
    nabl-prop-lookup(|NablProp_derivation-type(), task*, [])

  derivation-type-lookup(|task*, dep*) =
    nabl-prop-lookup(|NablProp_derivation-type(), task*, dep*)

  derivation-type-match(|task*, expected) =
    nabl-prop-match(
    | NablProp_derivation-type()
    , task*
    , Eq()
    , expected
    )

  derivation-type-match(|task*, relation, expected) =
    nabl-prop-match(|NablProp_derivation-type(), task*, relation, expected)

  create-derivation-type-task(|task*) =
    fail

  get-derivation-type =
    get-property(|NablProp_derivation-type())

  store-derivation-type(|partition, prop) =
    nabl-store-prop(
    | partition
    , Prop(NablProp_derivation-type(), prop, [])
    )

  create-property-task(|partition, kind):
    term -> <create-derivation-type-task(|partition)> term
    where NablProp_derivation-type() := kind

  fulfill-role-is(|task*) =
    nabl-prop-calc(|task*, [])

  fulfill-role-task(|task*) =
    get-or-create-property-task(|task*, NablProp_fulfill-role())

  fulfill-role-is(|task*, dep*) =
    nabl-prop-calc(|task*, dep*)

  fulfill-role-list(|task*) =
    nabl-prop-list(|task*, [])

  fulfill-role-list(|task*, dep*) =
    nabl-prop-list(|task*, dep*)

  fulfill-role-lookup(|task*) =
    nabl-prop-lookup(|NablProp_fulfill-role(), task*, [])

  fulfill-role-lookup(|task*, dep*) =
    nabl-prop-lookup(|NablProp_fulfill-role(), task*, dep*)

  fulfill-role-match(|task*, expected) =
    nabl-prop-match(
    | NablProp_fulfill-role()
    , task*
    , Eq()
    , expected
    )

  fulfill-role-match(|task*, relation, expected) =
    nabl-prop-match(|NablProp_fulfill-role(), task*, relation, expected)

  create-fulfill-role-task(|task*) =
    fail

  get-fulfill-role =
    get-property(|NablProp_fulfill-role())

  store-fulfill-role(|partition, prop) =
    nabl-store-prop(
    | partition
    , Prop(NablProp_fulfill-role(), prop, [])
    )

  create-property-task(|partition, kind):
    term -> <create-fulfill-role-task(|partition)> term
    where NablProp_fulfill-role() := kind


rules

  nabl-get-scope =
    ?ModuleDesugared(m, _, _, _)
    ; ![NablNsEntityType(), NablNsEntity()]

  nabl-get-name :
    ModuleDesugared(m, _, _, _) -> m

  nabl-name-apply(s) =
    ModuleDesugared(s, id, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?ModuleDesugared(m, _, _, _)
    ; origin-track-forced(
        ModuleDesugared(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsModule()
          , Unique()
          , Current()
          , [NablNsEntityType(), NablNsEntity()]
          , []
          )
        , id
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-scope =
    ?EntityTypeDef(_, e, _)
    ; ![NablNsAttribute(), NablNsRole(), NablNsThis()]

  nabl-get-name :
    EntityTypeDef(_, e, _) -> e

  nabl-name-apply(s) =
    EntityTypeDef(id, s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?EntityTypeDef(_, e, _)
    ; origin-track-forced(
        EntityTypeDef(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsEntityType()
          , Unique()
          , Current()
          , [NablNsAttribute(), NablNsRole(), NablNsThis()]
          , []
          )
        , id
        )
      |
      )
    ; where(i-2__ := <nabl-def(
                        ?c-uri2__
                      , ?s-uri2__
                      | lang__
                      , partition__
                      , uniques__
                      , c-uri1__
                      , s-uri1__
                      , NablNsThis()
                      , Unique()
                      , Current()
                      , []
                      , []
                      )> "this")
    ; match(child-uris__|c-uri2__)
    ; match(sibl-uris__|s-uri2__)
    ; match(implicits__|[i-2__])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?EntityTypeDef(_, e, _)
    ; (where([i-2__] := implicits__)
       ; where(<nabl-store-props(
                | partition__
                , [Prop(Type(), e, [])]
                )> i-2__))
    ; fail

  nabl-get-name :
    EntityType(e) -> e

  nabl-name-apply(s) =
    EntityType(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?EntityType(e)
    ; origin-track-forced(
        EntityType(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsEntityType()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-get-scope =
    ?EntityOrRelation(EntityType(entityType), e, _, _)
    ; ![NablNsThis()]

  nabl-get-name :
    EntityOrRelation(EntityType(entityType), e, _, _) -> e

  nabl-name-apply(s) =
    EntityOrRelation(EntityType(id), s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?EntityOrRelation(EntityType(entityType), e, _, _)
    ; origin-track-forced(
        EntityOrRelation(
          origin-track-forced(EntityType(id)|)
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsEntity()
          , Unique()
          , Current()
          , [NablNsThis()]
          , []
          )
        , id
        , id
        )
      |
      )
    ; where(i-2__ := <nabl-def(
                        ?c-uri2__
                      , ?s-uri2__
                      | lang__
                      , partition__
                      , uniques__
                      , c-uri1__
                      , s-uri1__
                      , NablNsThis()
                      , Unique()
                      , Current()
                      , []
                      , []
                      )> "this")
    ; match(child-uris__|c-uri2__)
    ; match(sibl-uris__|s-uri2__)
    ; match(implicits__|[i-2__])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?EntityOrRelation(EntityType(entityType), e, _, _)
    ; (where([i-2__] := implicits__)
       ; EntityOrRelation(
           EntityType(id)
         , nabl-store-props(
           | partition__
           , [Prop(Type(), entityType, [])]
           )
         , id
         , id
         )
       ; where(<nabl-store-props(
                | partition__
                , [Prop(Type(), entityType, [])]
                )> i-2__))
    ; fail

  nabl-get-name :
    EntityName(e) -> e

  nabl-name-apply(s) =
    EntityName(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?EntityName(e)
    ; origin-track-forced(
        EntityName(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsEntity()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-get-name :
    Attribute(a, t, _) -> a

  nabl-name-apply(s) =
    Attribute(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Attribute(a, t, _)
    ; origin-track-forced(
        Attribute(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsAttribute()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?Attribute(a, t, _)
    ; Attribute(
        nabl-store-props(
        | partition__
        , [Prop(Type(), t, [])]
        )
      , id
      , id
      )
    ; fail

  nabl-get-name :
    AttributeName(a) -> a

  nabl-name-apply(s) =
    AttributeName(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?AttributeName(a)
    ; where(r7-1-1-1__ := <nabl-use-candidate(|lang__, partition__, uris__, "this")
                           ; nabl-prop-lookup(|Type(), partition__, [])> UseCandidate(
                                                                           NablNsThis()
                                                                         , []
                                                                         , Current()
                                                                         , True()
                                                                         , []
                                                                         ))
    ; origin-track-forced(
        AttributeName(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsAttribute()
              , []
              , Context(
                  NablNsEntityType()
                , r7-1-1-1__
                , []
                , Current()
                )
              , True()
              , [r7-1-1-1__]
              )
            ]
          )
        )
      |
      )

  task-rewrite :
    ("match7-1-1-1-1", (t, [])) -> t

  nabl-get-name :
    AccessEntityAttribute(EntityName(e), a) -> a

  nabl-name-apply(s) =
    AccessEntityAttribute(EntityName(id), s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?AccessEntityAttribute(EntityName(e), a)
    ; where(r8-1-1-1__ := <nabl-use-candidate(|lang__, partition__, uris__, e)
                           ; nabl-prop-lookup(|Type(), partition__, [])> UseCandidate(
                                                                           NablNsEntity()
                                                                         , []
                                                                         , Current()
                                                                         , True()
                                                                         , []
                                                                         ))
    ; origin-track-forced(
        AccessEntityAttribute(
          origin-track-forced(EntityName(id)|)
        , nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsAttribute()
              , []
              , Context(
                  NablNsEntityType()
                , r8-1-1-1__
                , []
                , Current()
                )
              , True()
              , [r8-1-1-1__]
              )
            ]
          )
        )
      |
      )

  task-rewrite :
    ("match8-1-1-1-1", (t, [])) -> t

  nabl-get-name :
    Role(EntityType(roleType), multiplicity, role) -> role

  nabl-name-apply(s) =
    Role(EntityType(id), id, s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Role(EntityType(roleType), multiplicity, role)
    ; origin-track-forced(
        Role(
          origin-track-forced(EntityType(id)|)
        , id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsRole()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?Role(EntityType(roleType), multiplicity, role)
    ; Role(
        EntityType(id)
      , id
      , nabl-store-props(
        | partition__
        , [Prop(Type(), roleType, [])]
        )
      )
    ; fail

  nabl-get-name :
    RoleName(r) -> r

  nabl-name-apply(s) =
    RoleName(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?RoleName(r)
    ; where(r10-1-1-1__ := <nabl-use-candidate(|lang__, partition__, uris__, "this")
                            ; nabl-prop-lookup(|Type(), partition__, [])> UseCandidate(
                                                                            NablNsThis()
                                                                          , []
                                                                          , Current()
                                                                          , True()
                                                                          , []
                                                                          ))
    ; origin-track-forced(
        RoleName(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsRole()
              , []
              , Context(
                  NablNsEntityType()
                , r10-1-1-1__
                , []
                , Current()
                )
              , True()
              , [r10-1-1-1__]
              )
            ]
          )
        )
      |
      )

  task-rewrite :
    ("match10-1-1-1-1", (t, [])) -> t