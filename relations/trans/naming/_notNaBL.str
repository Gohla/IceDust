module _notNaBL

imports
	lib/editor-common.generated
	lib/nabl/-
	lib/properties/-
	lib/task/-
	lib/types/-

	include/Relations
	trans/naming/names
	

signature constructors
	
	Normal: DerivationType


/**
 *	Note: all these rules should go into NaBL and TS (when NaBL and TS support these)
 */

rules // check if entities have all the required attributes and roles assigned

	nabl-constraint(|ctx):
		EntityOrRelation(EntityType(e-ty), e, _, as) -> <fail>
		with
			ty-def 		 := <nabl-create-collectdefs(|ctx)> e-ty;
			[ty-attrs] := <nabl-resolve-all-tasks(|ctx, NablNsAttribute(), [])> [ty-def];
			as-defs    := <map(?AttributeValue(Identifier(<nabl-create-collectdefs(|ctx)>), _))> as;	
			as-attrs   := <task-create-combine(|ctx)> as-defs ;
			diff       := <task-create-diff(|ctx)> (ty-attrs, as-attrs);
			diff'      := <nabl-create-propconstraint(|ctx, NablProp_derivation-type(), diff)> Normal();
			diff''     := <nabl-create-propconstraint(|ctx, NablProp_multiplicity(), diff')> One();
			<task-create-error-on-success(|ctx, diff'', ["Provide all required attributes: ", diff''])> e
			
	nabl-constraint(|ctx):
		EntityOrRelation(EntityType(e-ty), e, roles, _) -> <fail>
		with
			ty-def 		 := <nabl-create-collectdefs(|ctx)> e-ty;
			[ty-roles] := <nabl-resolve-all-tasks(|ctx, NablNsRole(), [])> [ty-def];
			as-defs    := <map(?RoleValue(RoleName(<nabl-create-collectdefs(|ctx)>), _))> roles;
			as-roles   := <task-create-combine(|ctx)> as-defs ;
			diff       := <task-create-diff(|ctx)> (ty-roles, as-roles);
			<task-create-error-on-success(|ctx, diff, ["Provide all required roles: ", diff])> e

rules // Entities fulfill roles

	nabl-prop-site(|lang, ctx, uris, states, implicits):
		e@EntityTypeDef(_, name, _) -> <fail>
		where
			uri := <nabl-uri> name;
			scope := <nabl-uri-parent> uri;
			allRelations := <nabl-resolve-all-tasks(|ctx, NablNsEntityType(), [])> [scope];
			roles := <nabl-resolve-all-tasks(|ctx, NablNsRole(), [Prop(Type(), name, [])]);task-create-combine(|ctx)> allRelations;
			<store-fulfill-role(|ctx, roles)> name
  
  // multiple version of names.str (generated) TODO: needs to be generated to names.str @see http://yellowgrass.org/issue/NaBL/95
  get-fulfill-role-multiple =
    get-properties(|NablProp_fulfill-role())

rules // check if Entity (not Relation) has no roles

	constraint-error: EntityTypeDef(EntityType(), _, attributesAndRoles) -> <map(no-role);concat> attributesAndRoles
	no-role: x@Role(_,_,_) -> [(x, $[An entity cannot have roles.])]
	no-role: Attribute(_,_,_,_) -> []
	//TODO: move this to tasks

rules // check if Entity Type names start wiht a capital
	
	constraint-warning:
		EntityTypeDef(_, x, _) -> (x, $[Entity type names must start with a capital])
		where
			not(<string-starts-with-capital> x)
	//TODO: move this to tasks
			
