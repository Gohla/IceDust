module _notNaBL

imports // constructors

	// include/Relations //TODO: remove
	// src-gen/signatures/Rules-sig //TODO: remove
	src-gen/signatures/Types-sig
	trans/api/_runtime-constructors
	trans/api/constructors
	// trans/desugaring/constructors //TODO: remove
	trans/naming/names
	
imports // functions
	
	trans/api/_runtime
	trans/api/data-api
	trans/api/model-api
	trans/api/rules-api
	
imports //TODO: move to API

	lib/editor-common.generated

signature constructors //TODO: move
	
	Normal: DerivationType

/**
 *	Note: all these rules should go into NaBL and TS (when NaBL and TS support these)
 */

rules // unresolved references manual messages

	nabl-check-disable-unresolved = id
	
	nabl-constraint(|ctx): x -> <fail>
		where
			(e, msg) := <unresolved-error>x;
		  <_has-annotation(?Use(task))>e;
		  <_task-create-error-on-failure(|ctx, task, ["Unresolved reference: ", e, " cannot be resolved to ", msg])> e
		  
	unresolved-error: Ref(e) 											-> (e, "an EntityInstance, Attribute, Role, Inverse or Shortcut")
	unresolved-error: MemberAccess(_, e)					-> (e, "an Attribute, Role, Inverse or Shortcut")
	unresolved-error: AttributeRef(e) 						-> (e, "an Attribute")
	unresolved-error: RoleRef(e) 									-> (e, "a Role")
	unresolved-error: EntityRef(e) 								-> (e, "an Entity")
	unresolved-error: EntityInstanceRef(e)				-> (e, "an EntityInstance")
	unresolved-error: Role(NaBLHelp(e, _), _, _,_)-> (e, "an Entity")
	unresolved-error: AttrRef(e) 									-> (e, "an Attribute")
	unresolved-error: CallRule(e, _) 							-> (e, "a Rule")
	
	unresolved-error = where(is-node);?e;!(<node-get-varname>e, "a Variable")
	unresolved-error = where(is-edge);?e;!(<edge-get-edgemodel>e, "a Role, Inverse or Shortcut")

rules // check if there are no name collisions in attributes, roles, inverses and shortcuts
	
	entity-member-ns: _ -> [NablNsAttribute(),NablNsRole(),NablNsInverse(),NablNsShortcut()]

	nabl-constraint(|ctx):
		a -> <fail>
			where
				<is-string>a;                     //on all strings
				name := <nabl-get-name>a;         //that have an nabl name
				<not(_nabl-has-reference)>name;    //and this name is a def
				uri := <_nabl-uri> name;
				ns	:= <_nabl-uri-namespace> uri;
				<fetch(?ns)><entity-member-ns>    //and its namespace is one we want to check
			with
				<name-nses-conflict(|ctx)>name

	name-nses-conflict(|ctx): a-name -> <id>
		with
			<map(name-ns-conflict(|ctx, a-name))><entity-member-ns>

	name-ns-conflict(|ctx, a-name): conflict-ns -> <id>
		with
			uri := <_nabl-uri> a-name;
			ns	:= <_nabl-uri-namespace> uri;
			if <not(eq)> (conflict-ns, ns) then
				uri':= <_nabl-uri-parent> uri;
				parent:= <_nabl-uri-name> uri';
				parent-ns := <_nabl-uri-namespace> uri';
				role-defs := <_nabl-lookup-lexical(|ctx, conflict-ns)> a-name;
				<_task-create-error-on-success(|ctx, role-defs, ["Conflicting ", <_pp-ns>ns, " and ", <_pp-ns>conflict-ns, " ", a-name, " in ", <_pp-ns>parent-ns, " ", parent])> a-name
			end
		  
rules // check if entities have all the required attributes and roles assigned

	nabl-constraint(|ctx): ei -> <fail>
		where
			is-entityinstance
		with
			ty-def 		 := <entityinstance-get-type;_nabl-create-collectdefs(|ctx)> ei;
			[ty-attrs] := <_nabl-resolve-all-tasks(|ctx, NablNsAttribute(), [])> [ty-def];
			as-defs    := <entityinstance-get-attrvalues;map(attributevalue-get-attr;_nabl-create-collectdefs(|ctx))> ei;	
			as-attrs   := <_task-create-combine(|ctx)> as-defs ;
			diff       := <_task-create-diff(|ctx)> (ty-attrs, as-attrs);
			diff'      := <_nabl-create-propconstraint(|ctx, NablProp_derivation-type(), diff)> Normal();
			diff''     := <_nabl-create-propconstraint(|ctx, NablProp_multiplicity(), diff')> One();
			<entityinstance-get-name;_task-create-error-on-success(|ctx, diff'', ["Provide all required attributes: ", diff''])> ei

	nabl-constraint(|ctx): ei -> <fail>
		where
			is-entityinstance
		with
			ty-def 		 := <entityinstance-get-type;_nabl-create-collectdefs(|ctx)> ei;
			[ty-roles] := <_nabl-resolve-all-tasks(|ctx, NablNsRole(), [])> [ty-def];
			as-defs    := <entityinstance-get-rolevalues;map(rolevalue-get-role;_nabl-create-collectdefs(|ctx))> ei;
			as-roles   := <_task-create-combine(|ctx)> as-defs ;
			diff       := <_task-create-diff(|ctx)> (ty-roles, as-roles);
			<entityinstance-get-name;_task-create-error-on-success(|ctx, diff, ["Provide all required roles: ", diff])> ei

rules // check if Entity (not Relation) has no roles

	nabl-constraint(|ctx):e -> <fail>
		where
			is-entity;
			entity-is-entitytype
		with
			entity-get-members;filter(no-role-task(|ctx))
			
	no-role-task(|ctx): r -> None()
		where
			is-role
		with
			<_task-create-error(|ctx, ["An entity cannot have roles."])> r

rules // check if Entity names start with a capital
			
	nabl-constraint(|ctx): e -> <fail>
		where
			is-entity
		with
			x := <entity-get-name>e;
			if not(<string-starts-with-capital> x) then
				<_task-create-warning(|ctx, ["Entity type names must start with a capital."])> x
			end
			
rules // predicates over multiplcities
	
	upper-one: ZeroOrOne() -> <id>
	upper-one: One() -> <id>
	upper-many: ZeroOrMore() -> <id>
	upper-many: OneOrMore() -> <id>
	lower-zero: ZeroOrOne() -> <id>
	lower-zero: ZeroOrMore() -> <id>
	lower-one: One() -> <id>
	lower-one: OneOrMore() -> <id>
	nullable = lower-zero
