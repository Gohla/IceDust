module _notNaBL

imports // constructors

	// include/Relations //TODO: remove
	// src-gen/signatures/Rules-sig //TODO: remove
	src-gen/signatures/Types-sig
	trans/api/_runtime-constructors
	trans/api/constructors
	// trans/desugaring/constructors //TODO: remove
	trans/naming/names
	
imports // functions
	
	trans/api/_runtime
	trans/api/data-api
	trans/api/model-api
	trans/api/rules-api
	trans/lib/nabl-ext //is not called, but calls unresolved-error and ns-conflict-error
	
imports //TODO: move to API

	lib/editor-common.generated

signature constructors //TODO: move
	
	Normal: DerivationType

/**
 *	Note: all these rules should go into NaBL and TS (when NaBL and TS support these)
 */

rules // unresolved references manual messages

	nabl-check-disable-unresolved = id
		  
	unresolved-error: Ref(e) 											-> (e, [NablNsEntityInstance(), NablNsAttribute(), NablNsRole(), NablNsInverse(), NablNsShortcut()])
	unresolved-error: MemberAccess(_, e)					-> (e, [NablNsAttribute(), NablNsRole(), NablNsInverse(), NablNsShortcut()])
	unresolved-error: AttributeRef(e) 						-> (e, [NablNsAttribute()])
	unresolved-error: RoleRef(e) 									-> (e, [NablNsRole()])
	unresolved-error: EntityRef(e) 								-> (e, [NablNsEntity()])
	unresolved-error: EntityInstanceRef(e)				-> (e, [NablNsEntityInstance()])
	unresolved-error: Role(NaBLHelp(e, _), _, _,_)-> (e, [NablNsEntity()])
	unresolved-error: AttrRef(e) 									-> (e, [NablNsAttribute()])
	unresolved-error: CallRule(e, _) 							-> (e, [NablNsRule()])
	
	unresolved-error = where(is-node);?e;!(<node-get-varname>e, 	[NablNsLHSVariable()])
	unresolved-error = where(is-edge);?e;!(<edge-get-varname>e, 	[NablNsLHSVariable()])
	unresolved-error = where(is-edge);?e;!(<edge-get-edgemodel>e, [NablNsRole(), NablNsInverse(), NablNsShortcut()])

rules // check if there are no name collisions in attributes, roles, inverses and shortcuts
	
	ns-conflict-error = ![
		[NablNsAttribute(), NablNsRole(), NablNsInverse(), NablNsShortcut()]
	]
		  
signature constructors

	EiAttr : Term
	EiRole : Term
	
rules // check if entities have all the required attributes and roles assigned
	
	contains-all-errors = ![EiAttr(), EiRole()]
	
	contains-all-error-on          (|f) = where(EiAttr() := f); is-entityinstance
	contains-all-error-def-of      (|f) = where(EiAttr() := f); entityinstance-get-type
	contains-all-error-ast-children(|f) = where(EiAttr() := f); entityinstance-get-attrvalues;map(attributevalue-get-attr)
	contains-all-error-msg-on      (|f) = where(EiAttr() := f); entityinstance-get-name
	contains-all-error-filters     (|f) = where(EiAttr() := f); !(
		NablNsAttribute(),
		[
			(NablProp_derivation-type(), Normal()),
			(NablProp_multiplicity(), One())
		]
	)
	
	contains-all-error-on          (|f) = where(EiRole() := f); is-entityinstance
	contains-all-error-def-of      (|f) = where(EiRole() := f); entityinstance-get-type
	contains-all-error-ast-children(|f) = where(EiRole() := f); entityinstance-get-rolevalues;map(rolevalue-get-role)
	contains-all-error-msg-on      (|f) = where(EiRole() := f); entityinstance-get-name
	contains-all-error-filters     (|f) = where(EiRole() := f); !(
		NablNsRole(),
		[]
	)

rules // check if Entity (not Relation) has no roles

	nabl-constraint(|ctx) =
		where(is-entity;entity-is-entitytype);
		entity-get-members;filter(is-role;_task-create-error(|ctx, ["An entity cannot have roles."]));fail

rules // check if Entity names start with a capital
			
	nabl-constraint(|ctx) =
		where(is-entity);
		entity-get-name;
		if not(string-starts-with-capital) then _task-create-warning(|ctx, ["Entity type names must start with a capital."]) end
			
rules // predicates over multiplcities
	
	upper-one: ZeroOrOne() -> <id>
	upper-one: One() -> <id>
	upper-many: ZeroOrMore() -> <id>
	upper-many: OneOrMore() -> <id>
	lower-zero: ZeroOrOne() -> <id>
	lower-zero: ZeroOrMore() -> <id>
	lower-one: One() -> <id>
	lower-one: OneOrMore() -> <id>
	nullable = lower-zero
