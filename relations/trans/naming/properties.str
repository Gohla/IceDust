module properties

imports
	lib/analysis/-
	lib/nabl/-
	lib/properties/-
	lib/task/-
	lib/types/-
	
	include/Relations
	
	trans/naming/names
	
signature constructors
	
	Normal: DerivationType

rules // Attributes are Derivation(), has DefaultValue() or are Normal()
	
	nabl-prop-site(|lang, ctx, uris, states, implicits):
		e@Attribute(name, type, None()) -> <fail>
			where
				derivationType := Normal();
				<store-derivation-type(|ctx, derivationType)>e

	nabl-prop-site(|lang, ctx, uris, states, implicits):
		e@Attribute(name, type, Derivation(derivationExpr, derivationType)) -> <fail>
			where
				<store-derivation-type(|ctx, derivationType)>e

rules // Entities role fulfilling

	nabl-prop-site(|lang, ctx, uris, states, implicits):
		e@EntityTypeDef(_, name, _) -> <fail>
		where
			uri := <nabl-uri> name;
			scope := <nabl-uri-parent> uri;
			allRelations := <nabl-resolve-all-tasks(|ctx, NablNsEntityType(), [])> [scope];
			roles := <nabl-resolve-all-tasks(|ctx, NablNsRole(), [Prop(Type(), name, [])]);task-create-combine(|ctx)> allRelations;
			<store-fulfill-role(|ctx, roles)> name
  
  // // multiple version of properties/query.str (runtime)
  // get-properties(|kind) =
  //   (get-property-task(|kind) <+ try(nabl-get-name); get-index-properties(|kind))
  // ; try(task-result-combinations-single; Hd) // Try because results may already be inserted? 
  // 
  // // multiple version of names.str (generated)
  // get-fulfill-role-multiple =
  //   get-properties(|NablProp_fulfill-role())

rules // Entities - is-relation
	
	nabl-prop-site(|lang, ctx, uris, states, implicits):
		e@EntityTypeDef(RelationType(), name, _) -> <fail>
		where
			<store-is-relation(|ctx, 1)> name

// rules // Helper rules
// 
// 	debug-task: task -> task
// 		where
// 			result := <try(insert-results-or-delay)> task;
// 			<debug-depth>[task, result];
// 			<debug>[task, result]
