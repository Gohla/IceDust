module relations

imports
	
	libstratego-lib
	libstratego-gpp
	libstratego-aterm

	lib/editor-common.generated
	lib/analysis/-
	lib/index/-
	lib/nabl/-
	lib/properties/-
	lib/task/-
	lib/types/-
	
	include/Relations
	editor/Relations-Outliner
	
	trans/checking/check	
	trans/desugaring/desugar
	trans/generating/generate
	trans/naming/names
	trans/naming/properties
	trans/prettyprinting/pp
	trans/typing/types.generated


rules // Analysis
	
	editor-analyze = analysis-default-editor
	
	analysis-single-default-interface = 
		analysis-single-default(desugar-all, id, id|<language>)
	analysis-multiple-default-interface = 
		analysis-multiple-default(parse-file <+ !(), desugar-all, id, id|<language>, <project-path>)
	
	editor-save = analysis-save-default(|<language>)

rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) -> <get-type>target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast
	
	// Formats the program using a pretty printer		
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected
      //result := selected

rules // Debugging
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected

	// Prints the analyzed annotated abstract syntax ATerm of a selection.
	debug-show-desugared:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			ast'                    := <desugar-all> ast;
			filename := <guarantee-extension(|"desugared.aterm")> path;
			result   := ast'
			
	// Prints the analyzed annotated abstract syntax ATerm of a selection.
	debug-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			result	 := ast
			
	debug-index-project =
		analysis-debug-index-project(|<language>)
	debug-index-project-resolve = 
		analysis-debug-index-project-resolve(|<language>)
	debug-index-project-resolve-ast:
    	(_, _, _, path, project-path) -> (filename, result)
	    with
	    	language := <language>;
	    	index-setup(|language, project-path);
	    	task-setup(|project-path);
	    	result-ast := <index-get-all-partitions; map(\f -> (f, <index-get-all-in-partition> f)\)>;
	    	result-ast' := <beautify-indices> result-ast;
			  filename := $[[project-path]/[<dirname> path]/index.project.aterm];
			  result   := result-ast'
	debug-index-partition =
		analysis-debug-index-partition(|<language>)
	debug-index-selection-partition =
		analysis-debug-index-partition-resolve(|<language>)

	debug-task-project =
		analysis-debug-task-project(|<language>)
	debug-task-partition =
		analysis-debug-task-partition(|<language>)
	debug-task-selection =
		analysis-debug-task-selection(|<language>)
		
	debug-project =
		analysis-debug-project(|<language>)
	debug-partition =
		analysis-debug-partition(|<language>)
		
	debug-reanalyze = 
		analysis-debug-reanalyze(|<language>)
