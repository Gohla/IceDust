module typing/_subtyping-manual

imports // constructors
	
  api/_runtime-constructors
	
imports // functions
  
  api/_runtime

signature constructors
  
  LeastUpperBound : URI * List(URI) * URI * List(URI) -> SuperList

rules
  
  type-func-least-upper-bound(|ctx) : x@(t1, t2) -> result
    with
      t1sups-task := <_relation-create-lookup(|ctx, "<sub:")> t1;
      t2sups-task := <_relation-create-lookup(|ctx, "<sub:")> t2;
      result      := <_new-task(|ctx, <_task-combinator-type>, <_task-auto-storage>)> Rewrite("least-upper-bound", LeastUpperBound(t1, t1sups-task, t2, t2sups-task)) // requires <task-combinator-type> such that lists are passed to the rewrite instead of rewrite called with the cross-product of list elements
      
  task-rewrite : ("least-upper-bound", t) -> <least-upper-bound>t
  
  least-upper-bound: LeastUpperBound(t1*, sup1*, t2*, sup2*) -> least-com
    with
      sup1'* := [t1*, sup1*];
      sup2'* := [t2*, sup2*];
      common-sup* := <isect>(sup1'*,sup2'*)
    where
      least-com   := <Hd>common-sup*

  move-last-elem-to-front: list -> [last|rest]
    with
      <split-last>list => (rest,last)
