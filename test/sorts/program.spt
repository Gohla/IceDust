/**
* Relations and relation-patterns
*/
module test-program

language Relations

test Blog model [[
	module Blog
	model
	entity BlogUser{}
	entity BlogPost{}
	relation Posting{
		BlogUser *
		BlogPost 1
	}
]] 0 errors

test Exam prerequisites model [[
	module Exam
	model
	entity Exam{}
	entity Student{}
	entity Requirement{}
	relation Enrollment{
		Exam *
		Student *
	}
	relation Prerequisite{
		Exam *
		Requirement *
	}
	relation Passed{
		Student *
		Exam *
	}
]] 0 errors

test Supply model [[
	module Supply
	model
	entity Part{}
	entity Project{}
	entity Supplier{}
	relation Supply{
		Part *
		Project *
		Supplier *
	}
]] 0 errors

test Marriage model [[
	module Mariage
	model
	entity Person{}
	relation Marriage{
		Person 1 husband
		Person 1 wife
	}
]] 0 errors

test Marriage counseling model [[
	module Mariage
	model
	entity Person{}
	relation Marriage{
		Person 1 husband
		Person 1 wife
	}
	relation Counseling{
		Person * counselor
		Marriage *
	}
]] 0 errors

//FIXME: specify symmetry
test Friend model [[
	module Friend
	model
	entity Person{}
	relation Friendship{
		Person 1 personA
		Person 1 personB
	}
]] 0 errors

// would probably specify a marriage as relation and derive parents with derivations
test Family tree model [[
	module Family
	model
	entity Person{}
	relation Parent{
		Person 1 child	//has 1 father and mother
		Person * father	//can have multiple children
		Person * mother	//can have multiple children
	}
]] 0 errors

//NOTE: these multiplicities do not enforce a tree (is closest normal models can get to it)
test Tree partial model [[
	module Tree
	model
	entity TreeNode{}
	relation TreeEdge{
		TreeNode * parent	//parent has multiple edges to children
		TreeNode 1 child	//child has edge to parent
	}
]] 0 errors

//FIXME: use a hierarchy pattern for the tree
test Tree model [[
	module Tree
	model
	entity TreeNode{}
	relation TreeEdge{
		TreeNode * parent
		TreeNode 1 child
	}
]] 0 errors

//TODO: add derivation and constraint examples