module debug

imports
	include/Relations
	runtime/editor/interop
	lib/editor-common.generated
	lib/runtime/index/-
	lib/runtime/nabl/-
	lib/runtime/properties/-
	lib/runtime/types/-
	lib/runtime/task/-
	lib/runtime/analysis/-
	names

	

rules

/**
 *	Builders for index content visualization
 */
	debug-index-contents:
    	(_, _, _, path, project-path) -> (filename, result)
	    with
	    	language := <language>;
	    	index-setup(|language, project-path);
	    	result-ast := <index-get-all-partitions; map(\f -> (f, <index-get-all-in-partition> f)\)>;
	    	result-ast' := <beautify-indices> result-ast;
			if result-index := <foreign-call(|"Analysis", "from-index-debug-str")> result-ast' then
			    filename := $[[project-path]/[<dirname> path]/project.index];
			    result   := result-index
			else
			    filename := $[[project-path]/[<dirname> path]/index.project.aterm];
			    result   := result-ast'
			end
			
	debug-index-contents-ast:
    	(_, _, _, path, project-path) -> (filename, result)
	    with
	    	language := <language>;
	    	index-setup(|language, project-path);
	    	result-ast := <index-get-all-partitions; map(\f -> (f, <index-get-all-in-partition> f)\)>;
	    	result-ast' := <beautify-indices> result-ast;
		    filename := $[[project-path]/[<dirname> path]/index.project.aterm];
		    result   := result-ast'
			
		
		
/**
 *	Beautify: make readable
 */
	beautify-indices: indices -> indices''
		where
			indices'  := <filter(ignore-extension)> indices;
			indices'' := <map(beautify-index)>indices'
		
	beautify-index: (partition, index) -> (partition, index4)
		where
			index2 := <give-all-tasks-results>index;
			index3 := <reverse-uris> index2;
			index4 := <qsort(index-compare)> index3

	// ignore partitions of generated files
	ignore-extensions: _ -> ["index", "analysis", "task", "aterm"]
	ignore-extension: (partition, index) -> (partition, index)
		where
			(path, _) := partition;
			extension := <get-extension>path;
			<not(elem)> (extension, <ignore-extensions>)
	
	// resolve all task results
	give-all-tasks-results = bottomup(try(give-task-results))	//TODO: fail if a task has no result yet + show a debug line instead of a stack trace
	give-task-results: e@Result(_) -> <insert-results>e
	
	// order the index entries
	index-ordering: _ -> ["Def","Prop","Alias","InverseAlias","Use"]

	index-compare: (a,b) -> (a,b)
		where
			a-order := <get-index> (<get-constructor>a, <index-ordering>);
			b-order := <get-index> (<get-constructor>b, <index-ordering>);
			if <eq>(a-order, b-order) then
				if Use(_) := a then
					Use([Def(URI(_, a-url))]) := a;
					Use([Def(URI(_, b-url))]) := b
				else
					[URI(_, a-url)|_] := <get-arguments>a;
					[URI(_, b-url)|_] := <get-arguments>b
				end;
				<uri-compare> (a-url, b-url)
			else
				cmp-o := <lt>(a-order, b-order)
			end
	
	uri-compare: ([], []) -> <fail>
	uri-compare: (a, []) -> <fail>
	uri-compare: ([], b) -> ([], b)
	uri-compare: ([a|as], [b|bs]) -> ([a|as], [b|bs]) 
		where
			ID(a-namespace, a-name, _) := a;
			ID(b-namespace, b-name, _) := b;
			if <eq>(a-namespace, b-namespace) then
				if <eq>(a-name, b-name) then
					<uri-compare> (as, bs)
				else
					<string-lt>(a-name, b-name)
				end
			else
				<string-lt>(<get-constructor>a-namespace, <get-constructor>b-namespace)
			end
			
	// reverse URIs (for having urls in the right order, and for ordering as tree)
	reverse-uris = bottomup(try(reverse-uri))
	reverse-uri: URI(language, uri) -> URI(language, <reverse>uri)
			

