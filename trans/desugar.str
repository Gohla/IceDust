module desugaring/desugar

imports
	include/Relations

rules


desugar-all = bottomup(try(desugar);try(flatten-list))


/**
 *	Default desugarings
 */
// remove all Some() constructs
desugar: Some(a) -> a

// make the top level construct indicate that it is desugared (we dont want any further processing if its not desugared)
desugar: Module(moduleName, model, data, execute) -> ModuleDesugared(moduleName, model, data, execute)


/**
 *	Generate omitted names
 */
desugar = generate-role-name

generate-role-name: Role(EntityType(e), multiplicity, None()) -> Role(EntityType(e), multiplicity, e)

	
	
/**
 *	Qualify names
 */	
// desugar = qualify
// 
// qualify: EntityOrRelation(entityType, entityName, roles, attributes) -> EntityOrRelation(entityType, entityName, roles', attributes')
// 	where
// 		roles' := <all(try(qualify-role(|entityType)))> roles;
// 		attributes' := <all(try(qualify-attribute(|entityType)))> attributes
// 
// qualify-role(|entityType): RoleValue(RoleNameUnqualified(role), value) -> RoleValue(RoleName(entityType, role),value)
// qualify-attribute(|entityType): AttributeValue(AttributeNameUnqualified(attribute),value) -> AttributeValue(AttributeName(entityType, attribute),value)


signature constructors
	ModuleDesugared: ID * ModelDef * DataDef * Executable -> ModuleDesugared