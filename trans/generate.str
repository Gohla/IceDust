module generate

imports

	lib/editor-common.generated
	include/Relations
	lib/java/java
	lib/java/pretty-print

rules // Builder
	
	// Generates a Java program for selected AST.
	// generate-java:
	// 	(selected, position, ast, path, project-path) -> (filename, result)
	// 	with
	// 		filename := <guarantee-extension(|"java")> path;
	// 		java-ast := <to-java> selected;
	// 		result   := <pp-java-string> java-ast

	generate-java:
		(selected, position, ast, path, project-path) -> (fileName, result)
		with
			(fileName, result) := <to-java>(selected, path)
			
	compile-java:
		(selected, position, ast, path, project-path) -> None()
		with
			(javaFileName, _) := <to-java>(selected, path);
			<compile-java> javaFileName
			
	execute-java:
		(selected, position, ast, path, project-path) -> None()
		with
			(javaFileName, _) := <to-java>(selected, path);
			classFileName := <compile-java> javaFileName;
			<execute-java> classFileName
			

	to-java:
	    (selected, path) -> (fileName, result)
	    with
			fileName := <guarantee-extension(|"java")> path;
			java-ast := <to-java> selected;
			result   := <pp-java-string> java-ast;
			<write-file> (fileName, result)
			
	compile-java:
		javaFileName -> classFileName
		with
			<try(call)> ("javac", [javaFileName]);
			classFileName := <guarantee-extension(|"class")> javaFileName;
			<refresh-workspace-file> classFileName

	execute-java:
		classFileName -> None()
		with
			className := <remove-extension> classFileName;
			<try(call)> ("java", [className])
			

// helper rules
rules
	// filewriter
	write-file: (fileName, content) -> (fileName, content)
		where
			<dirname;ensure-dir> fileName
		where
			fileDescriptor := <fopen> (fileName, "w");
			<fputs> (content, fileDescriptor);
			<fclose> fileDescriptor;
			<refresh-workspace-file> fileName
			
	ensure-dir: path -> path
		where
			<file-exists;filemode;isdir> path
	ensure-dir: path -> path
		where
			<not(file-exists;filemode;isdir)> path;
			<dirname;ensure-dir> path;
			<mkdir> path



rules // Transformation to java strings.

  to-java:
    [_] -> <concat-strings> <map(to-java)>
    
  to-java:
    () -> ""

  to-java:
    Module(moduleName, model, data, execute) ->
CompilationUnit(
  None()
, []
, [ ClassDec(
      ClassDecHead([], Id(moduleName), None(), None(), None())
    , ClassBody(
        [ MethodDec(
            MethodDecHead(
              [Public(), Static()]
            , None()
            , Void()
            , Id("main")
            , [ Param(
                  []
                , ArrayType(ClassOrInterfaceType(TypeName(Id("String")), None()))
                , Id("args")
                )
              ]
            , None()
            )
          , Block(
              [ ExprStm(
                  Invoke(
                    Method(
                      MethodName(
                        AmbName(AmbName(Id("System")), Id("out"))
                      , Id("println")
                      )
                    )
                  , [Lit(String([Chars("Hello world!")]))]
                  )
                )
              ]
            )
          )
        ]
      )
    )
  ]
)