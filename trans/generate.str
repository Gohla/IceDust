module generate

imports

	include/Relations
	lib/java/java
	lib/java/pp

rules // Builder
	
	// Generates a Java program for selected AST.
	generate-java:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"java")> path;
			java-ast := <to-java> selected;
			result   := <pp-java-string> java-ast

rules // Transformation to java strings.

  to-java:
    [_] -> <concat-strings> <map(to-java)>
    
  to-java:
    () -> ""

  to-java:
    Module(x, model, execute) ->
CompilationUnit(
  Some(PackageDec([], PackageName([Id("test")])))
, []
, [ ClassDec(
      ClassDecHead([], Id("test"), None(), None(), None())
    , ClassBody(
        [ 
        MethodDec(
            MethodDecHead(
              [Public(), Static()]
            , None()
            , Void()
            , Id("main")
            , [ 
              	Param(
                  []
                , ArrayType(ClassOrInterfaceType(TypeName(Id("String")), None()))
                , Id("args")
                )
              ]
            , None()
            )
          , Block(
              [ 
              	ExprStm(
                  Invoke(
                    Method(
                      MethodName(
                        AmbName(AmbName(Id("System")), Id("out"))
                      , Id("println")
                      )
                    )
                  , [
                    	"\"Hello world\""
                    	// Lit(String([Chars("Hello world")]))
                    ]
                  )
                )
              ]
            )
          )
        ]
      )
    )
  ]
)