module names

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/editor/-
  include/Relations


signature
  constructors
    NablNsModule     : Namespace
    NablNsEntityType : Namespace
    NablNsEntity     : Namespace
    NablNsAttribute  : Namespace
    NablNsRole       : Namespace


rules

  nabl-get-scope =
    ?Module(m, _, _, _)
    ; ![NablNsEntityType(), NablNsEntity()]

  nabl-get-name :
    Module(m, _, _, _) -> m

  nabl-name-apply(s) =
    Module(s, id, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Module(m, _, _, _)
    ; origin-track-forced(
        Module(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsModule()
          , Unique()
          , Current()
          , [NablNsEntityType(), NablNsEntity()]
          , []
          )
        , id
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-scope =
    ?EntityTypeDef(e, _)
    ; ![NablNsAttribute()]

  nabl-get-name :
    EntityTypeDef(e, _) -> e

  nabl-name-apply(s) =
    EntityTypeDef(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?EntityTypeDef(e, _)
    ; origin-track-forced(
        EntityTypeDef(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsEntityType()
          , Unique()
          , Current()
          , [NablNsAttribute()]
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-scope =
    ?RelationTypeDef(e, _)
    ; ![NablNsRole(), NablNsAttribute()]

  nabl-get-name :
    RelationTypeDef(e, _) -> e

  nabl-name-apply(s) =
    RelationTypeDef(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?RelationTypeDef(e, _)
    ; origin-track-forced(
        RelationTypeDef(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsEntityType()
          , Unique()
          , Current()
          , [NablNsRole(), NablNsAttribute()]
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    EntityType(e) -> e

  nabl-name-apply(s) =
    EntityType(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?EntityType(e)
    ; origin-track-forced(
        EntityType(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsEntityType()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-get-name :
    EntityOrRelation(EntityType(entityType), e, _, _) -> e

  nabl-name-apply(s) =
    EntityOrRelation(EntityType(id), s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?EntityOrRelation(EntityType(entityType), e, _, _)
    ; origin-track-forced(
        EntityOrRelation(
          origin-track-forced(EntityType(id)|)
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsEntity()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?EntityOrRelation(EntityType(entityType), e, _, _)
    ; EntityOrRelation(
        EntityType(id)
      , nabl-store-props(
        | partition__
        , [Prop(Type(), entityType, [])]
        )
      , id
      , id
      )
    ; fail

  nabl-get-name :
    EntityName(e) -> e

  nabl-name-apply(s) =
    EntityName(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?EntityName(e)
    ; origin-track-forced(
        EntityName(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsEntity()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-get-name :
    Attribute(a, t) -> a

  nabl-name-apply(s) =
    Attribute(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Attribute(a, t)
    ; origin-track-forced(
        Attribute(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsAttribute()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?Attribute(a, t)
    ; Attribute(
        nabl-store-props(
        | partition__
        , [Prop(Type(), t, [])]
        )
      , id
      )
    ; fail

  nabl-get-name :
    AttributeName(EntityType(e), a) -> a

  nabl-name-apply(s) =
    AttributeName(EntityType(id), s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?AttributeName(EntityType(e), a)
    ; origin-track-forced(
        AttributeName(
          origin-track-forced(EntityType(id)|)
        , nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsAttribute()
              , []
              , Context(
                  NablNsEntityType()
                , e
                , []
                , Current()
                )
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-get-name :
    AccessEntityAttribute(EntityName(e), a) -> a

  nabl-name-apply(s) =
    AccessEntityAttribute(EntityName(id), s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?AccessEntityAttribute(EntityName(e), a)
    ; where(r9-1-1-1__ := <nabl-use-candidate(|lang__, partition__, uris__, e)
                           ; nabl-prop-lookup(|Type(), partition__, [])> UseCandidate(
                                                                           NablNsEntity()
                                                                         , []
                                                                         , Current()
                                                                         , True()
                                                                         , []
                                                                         ))
    ; origin-track-forced(
        AccessEntityAttribute(
          origin-track-forced(EntityName(id)|)
        , nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsAttribute()
              , []
              , Context(
                  NablNsEntityType()
                , r9-1-1-1__
                , []
                , Current()
                )
              , True()
              , [r9-1-1-1__]
              )
            ]
          )
        )
      |
      )

  task-rewrite :
    ("match9-1-1-1-1", (t, [])) -> t

  nabl-get-name :
    Role(roleType, multiplicity, role) -> role

  nabl-name-apply(s) =
    Role(id, id, s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Role(roleType, multiplicity, role)
    ; origin-track-forced(
        Role(
          id
        , id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsRole()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?Role(roleType, multiplicity, role)
    ; Role(
        id
      , id
      , nabl-store-props(
        | partition__
        , [Prop(Type(), roleType, [])]
        )
      )
    ; fail

  nabl-get-name :
    RoleName(EntityType(e), r) -> r

  nabl-name-apply(s) =
    RoleName(EntityType(id), s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?RoleName(EntityType(e), r)
    ; origin-track-forced(
        RoleName(
          origin-track-forced(EntityType(id)|)
        , nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsRole()
              , []
              , Context(
                  NablNsEntityType()
                , e
                , []
                , Current()
                )
              , True()
              , []
              )
            ]
          )
        )
      |
      )