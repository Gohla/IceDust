module properties

imports
	lib/nabl/-
	lib/task/-
	lib/properties/-
	lib/types/-
	lib/editor/-
	include/Relations
	names
	

rules
	


	// nabl-prop-site(|lang, ctx, uris, states, implicits):
	// 	e@EntityTypeDef(name, _) -> <fail>
	// 	where
	// 		<debug> $[Fulfilling roles of [name]];
	// 		uri := <nabl-uri> name;
	// 		<debug> uri;
	// 		scope := <nabl-uri-parent> uri;
	// 		<debug> scope;
	// 		// find all relations
	// 		allRelations := <nabl-resolve-all-tasks(|ctx, NablNsEntityType(), [])> [scope];
	// 		<debug-task> allRelations;
	// 		// find all roles in all these relations
	// 		allRoles := <nabl-resolve-all-tasks(|ctx, NablNsRole(), [])> allRelations;
	// 		<debug-task> allRoles;
	// 		<insert-results-or-delay;map(map(debug;try(get-type);debug))>allRoles;
	// 		// TODO: get only the roles with me as type.
	// 		// <debug> "get roles";
	// 		// roles := <nabl-resolve-all-tasks(|ctx, NablNsRole(), [Prop(name,[],[])])> allRelations; //doesnt seem to work: filtering by type
	// 		// <debug-task> roles;
	// 		// <debug> "have roles";
	// 		fulfills-roles := "foo";
	// 		<store-fulfill-role(|ctx, fulfills-roles)> name

    
    
    
/**
 *	Defing a property on entities for participating in relations, it should look something like this:
 */
// nabl-prop-site(|lang__, partition__, uris__, states__, implicits__):
//     Entity(en, _) -> <fail>
//     where
//       uri := <nabl-uri> en
//     ; scope := <nabl-uri-parent> uri
//     ; relations := <nabl-resolve-all-tasks(|ctx, NablNsRelation(), [])> [scope]
//     ; roles := <nabl-resolve-all-tasks(|ctx, NablNsRole(), [Type(EntityType(en))])> relations
//     ; <nabl-store-roles(|ctx)>


	debug-task: task -> task
		where
			result := <try(insert-results-or-delay)> task;
			<debug-depth>[task, result];
			<debug>[task, result]


