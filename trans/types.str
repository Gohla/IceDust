module types

imports
	include/Relations
	types.generated
	lib/runtime/types/-
	lib/runtime/task/-
	

rules
	
	//TODO: is this possible in TS yet?
	create-type-task(|ctx): Integer(_)  -> <type-is(|ctx)> PrimitiveType("Int")
	create-type-task(|ctx): String(_)  -> <type-is(|ctx)> PrimitiveType("String")
	
	//FIXME: (#1) why do I need to write this redundantly? Without this line the hover-help type works, but the constraint does not.
	create-type-task(|ctx): e@AttributeName(_)	-> <get-type>e
	// create-type-task(|ctx): e@RoleName(_)		-> <get-type>e
	// create-type-task(|ctx): e@EntityName(_)		-> <get-type>e	
																




/**
 *	Defing a property on entities for participating in relations, it should look something like this:
 */
// nabl-prop-site(|lang__, partition__, uris__, states__, implicits__):
//     Entity(en, _) -> <fail>
//     where
//       uri := <nabl-uri> en
//     ; scope := <nabl-uri-parent> uri
//     ; relations := <nabl-resolve-all-tasks(|ctx, NablNsRelation(), [])> [scope]
//     ; roles := <nabl-resolve-all-tasks(|ctx, NablNsRole(), [Type(EntityType(en))])> relations
//     ; <nabl-store-roles(|ctx)>